# coding: utf-8

"""
    Event Notification Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libens.configuration import Configuration


class CreateSubscriptionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'actions': 'list[str]',
        'name': 'str',
        'description': 'str',
        'filter_expression': 'str',
        'delivery_target': 'DeliveryTarget'
    }

    attribute_map = {
        'type': 'type',
        'actions': 'actions',
        'name': 'name',
        'description': 'description',
        'filter_expression': 'filterExpression',
        'delivery_target': 'deliveryTarget'
    }

    def __init__(self, type=None, actions=None, name=None, description=None, filter_expression=None, delivery_target=None, local_vars_configuration=None):  # noqa: E501
        """CreateSubscriptionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._actions = None
        self._name = None
        self._description = None
        self._filter_expression = None
        self._delivery_target = None
        self.discriminator = None

        self.type = type
        if actions is not None:
            self.actions = actions
        self.name = name
        if description is not None:
            self.description = description
        if filter_expression is not None:
            self.filter_expression = filter_expression
        self.delivery_target = delivery_target

    @property
    def type(self):
        """Gets the type of this CreateSubscriptionRequest.  # noqa: E501

        Event type which will be subscribed to  # noqa: E501

        :return: The type of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSubscriptionRequest.

        Event type which will be subscribed to  # noqa: E501

        :param type: The type of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) > 255):
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and not re.search(r'^[a-zA-Z]+[.a-zA-Z]*$', type)):  # noqa: E501
            raise ValueError(r"Invalid value for `type`, must be a follow pattern or equal to `/^[a-zA-Z]+[.a-zA-Z]*$/`")  # noqa: E501

        self._type = type

    @property
    def actions(self):
        """Gets the actions of this CreateSubscriptionRequest.  # noqa: E501

        Actions which will be subscribed to for the event type  # noqa: E501

        :return: The actions of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreateSubscriptionRequest.

        Actions which will be subscribed to for the event type  # noqa: E501

        :param actions: The actions of this CreateSubscriptionRequest.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def name(self):
        """Gets the name of this CreateSubscriptionRequest.  # noqa: E501

        Name of the subscription  # noqa: E501

        :return: The name of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubscriptionRequest.

        Name of the subscription  # noqa: E501

        :param name: The name of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateSubscriptionRequest.  # noqa: E501

        Optional description for the subscription  # noqa: E501

        :return: The description of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSubscriptionRequest.

        Optional description for the subscription  # noqa: E501

        :param description: The description of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 8192):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `8192`")  # noqa: E501

        self._description = description

    @property
    def filter_expression(self):
        """Gets the filter_expression of this CreateSubscriptionRequest.  # noqa: E501

        JSON-structured filter expression for events matching the subscription  # noqa: E501

        :return: The filter_expression of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this CreateSubscriptionRequest.

        JSON-structured filter expression for events matching the subscription  # noqa: E501

        :param filter_expression: The filter_expression of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                filter_expression is not None and len(filter_expression) > 8192):
            raise ValueError("Invalid value for `filter_expression`, length must be less than or equal to `8192`")  # noqa: E501

        self._filter_expression = filter_expression

    @property
    def delivery_target(self):
        """Gets the delivery_target of this CreateSubscriptionRequest.  # noqa: E501


        :return: The delivery_target of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: DeliveryTarget
        """
        return self._delivery_target

    @delivery_target.setter
    def delivery_target(self, delivery_target):
        """Sets the delivery_target of this CreateSubscriptionRequest.


        :param delivery_target: The delivery_target of this CreateSubscriptionRequest.  # noqa: E501
        :type: DeliveryTarget
        """
        if self.local_vars_configuration.client_side_validation and delivery_target is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_target`, must not be `None`")  # noqa: E501

        self._delivery_target = delivery_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSubscriptionRequest):
            return True

        return self.to_dict() != other.to_dict()
