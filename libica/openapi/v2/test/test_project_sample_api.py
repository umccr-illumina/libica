"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>   # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import unittest

import libica.openapi.v2
from libica.openapi.v2.api.project_sample_api import ProjectSampleApi  # noqa: E501


class TestProjectSampleApi(unittest.TestCase):
    """ProjectSampleApi unit test stubs"""

    def setUp(self):
        self.api = ProjectSampleApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_metadata_model_to_sample(self):
        """Test case for add_metadata_model_to_sample

        Add a metadata model to a sample.  # noqa: E501
        """
        pass

    def test_complete_project_sample(self):
        """Test case for complete_project_sample

        Completes the sample after data has been linked to it.  # noqa: E501
        """
        pass

    def test_create_sample_in_project(self):
        """Test case for create_sample_in_project

        Create a new sample in this project  # noqa: E501
        """
        pass

    def test_deep_delete_sample(self):
        """Test case for deep_delete_sample

        Delete a sample together with all of its data.  # noqa: E501
        """
        pass

    def test_delete_and_unlink_sample(self):
        """Test case for delete_and_unlink_sample

        Delete a sample and unlink its data.  # noqa: E501
        """
        pass

    def test_delete_sample_with_input(self):
        """Test case for delete_sample_with_input

        Delete a sample as well as its input data.  # noqa: E501
        """
        pass

    def test_get_project_sample(self):
        """Test case for get_project_sample

        Retrieve a project sample.  # noqa: E501
        """
        pass

    def test_get_project_samples(self):
        """Test case for get_project_samples

        Retrieve project samples.  # noqa: E501
        """
        pass

    def test_get_projects_for_sample(self):
        """Test case for get_projects_for_sample

        Retrieve a list of projects for this sample.  # noqa: E501
        """
        pass

    def test_get_sample_data_list(self):
        """Test case for get_sample_data_list

        Retrieve the list of sample data.  # noqa: E501
        """
        pass

    def test_get_sample_history(self):
        """Test case for get_sample_history

        Retrieve sample history.  # noqa: E501
        """
        pass

    def test_get_sample_metadata_field(self):
        """Test case for get_sample_metadata_field

        Retrieve a metadata field.  # noqa: E501
        """
        pass

    def test_get_sample_metadata_field_count(self):
        """Test case for get_sample_metadata_field_count

        Retrieves the number of occurrences of a given field.  # noqa: E501
        """
        pass

    def test_link_data_to_sample(self):
        """Test case for link_data_to_sample

        Link data to a sample.  # noqa: E501
        """
        pass

    def test_link_sample_to_project(self):
        """Test case for link_sample_to_project

        Link a sample to a project.  # noqa: E501
        """
        pass

    def test_mark_sample_deleted(self):
        """Test case for mark_sample_deleted

        Mark a sample deleted.  # noqa: E501
        """
        pass

    def test_unlink_data_from_sample(self):
        """Test case for unlink_data_from_sample

        Unlink data from a sample.  # noqa: E501
        """
        pass

    def test_unlink_sample_from_project(self):
        """Test case for unlink_sample_from_project

        Unlink a sample from a project.  # noqa: E501
        """
        pass

    def test_update_project_sample(self):
        """Test case for update_project_sample

        Update a project sample.  # noqa: E501
        """
        pass

    def test_update_sample_metadata_fields(self):
        """Test case for update_sample_metadata_fields

        Update metadata fields.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
