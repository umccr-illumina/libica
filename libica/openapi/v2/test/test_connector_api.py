"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <b>API-key</b><br> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <b>JWT</b><br> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br> </p> <p> <b>Basic Authentication</b><br> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p>   # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import unittest

import libica.openapi.v2
from libica.openapi.v2.api.connector_api import ConnectorApi  # noqa: E501


class TestConnectorApi(unittest.TestCase):
    """ConnectorApi unit test stubs"""

    def setUp(self):
        self.api = ConnectorApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_cancel_connector(self):
        """Test case for cancel_connector

        Cancel a connector.  # noqa: E501
        """
        pass

    def test_create_connector(self):
        """Test case for create_connector

        Create a connector.  # noqa: E501
        """
        pass

    def test_create_download_rule(self):
        """Test case for create_download_rule

        Create a download rule.  # noqa: E501
        """
        pass

    def test_create_upload_rule(self):
        """Test case for create_upload_rule

        Create an upload rule.  # noqa: E501
        """
        pass

    def test_delete_download_rule(self):
        """Test case for delete_download_rule

        Delete a download rule.  # noqa: E501
        """
        pass

    def test_delete_upload_rule(self):
        """Test case for delete_upload_rule

        Delete an upload rule.  # noqa: E501
        """
        pass

    def test_disable_connector(self):
        """Test case for disable_connector

        Disable a connector.  # noqa: E501
        """
        pass

    def test_enable_connector(self):
        """Test case for enable_connector

        Enable a connector.  # noqa: E501
        """
        pass

    def test_get_connector(self):
        """Test case for get_connector

        Retrieve a connector.  # noqa: E501
        """
        pass

    def test_get_connectors(self):
        """Test case for get_connectors

        Retrieve a list of connectors.  # noqa: E501
        """
        pass

    def test_get_download_rule(self):
        """Test case for get_download_rule

        Retrieve a download rule.  # noqa: E501
        """
        pass

    def test_get_download_rules(self):
        """Test case for get_download_rules

        Retrieve a list of download rules.  # noqa: E501
        """
        pass

    def test_get_upload_rule(self):
        """Test case for get_upload_rule

        Retrieve an upload rule.  # noqa: E501
        """
        pass

    def test_get_upload_rules(self):
        """Test case for get_upload_rules

        Retrieve a list of upload rules.  # noqa: E501
        """
        pass

    def test_update_download_rule(self):
        """Test case for update_download_rule

        Update a download rule.  # noqa: E501
        """
        pass

    def test_update_upload_rule(self):
        """Test case for update_upload_rule

        Update an upload rule.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
