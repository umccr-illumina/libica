# coding: utf-8

"""
    Task Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libtes.configuration import Configuration


class CreateClusterRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'svc_acct_u_id': 'str',
        'status': 'str',
        'type': 'str',
        'acl': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'svc_acct_u_id': 'svcAcctUId',
        'status': 'status',
        'type': 'type',
        'acl': 'acl'
    }

    def __init__(self, name=None, svc_acct_u_id=None, status=None, type=None, acl=None, local_vars_configuration=None):  # noqa: E501
        """CreateClusterRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._svc_acct_u_id = None
        self._status = None
        self._type = None
        self._acl = None
        self.discriminator = None

        self.name = name
        if svc_acct_u_id is not None:
            self.svc_acct_u_id = svc_acct_u_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if acl is not None:
            self.acl = acl

    @property
    def name(self):
        """Gets the name of this CreateClusterRequest.  # noqa: E501


        :return: The name of this CreateClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequest.


        :param name: The name of this CreateClusterRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def svc_acct_u_id(self):
        """Gets the svc_acct_u_id of this CreateClusterRequest.  # noqa: E501


        :return: The svc_acct_u_id of this CreateClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._svc_acct_u_id

    @svc_acct_u_id.setter
    def svc_acct_u_id(self, svc_acct_u_id):
        """Sets the svc_acct_u_id of this CreateClusterRequest.


        :param svc_acct_u_id: The svc_acct_u_id of this CreateClusterRequest.  # noqa: E501
        :type: str
        """

        self._svc_acct_u_id = svc_acct_u_id

    @property
    def status(self):
        """Gets the status of this CreateClusterRequest.  # noqa: E501


        :return: The status of this CreateClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateClusterRequest.


        :param status: The status of this CreateClusterRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this CreateClusterRequest.  # noqa: E501


        :return: The type of this CreateClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateClusterRequest.


        :param type: The type of this CreateClusterRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def acl(self):
        """Gets the acl of this CreateClusterRequest.  # noqa: E501

        Access Control List  # noqa: E501

        :return: The acl of this CreateClusterRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CreateClusterRequest.

        Access Control List  # noqa: E501

        :param acl: The acl of this CreateClusterRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClusterRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateClusterRequest):
            return True

        return self.to_dict() != other.to_dict()
