# coding: utf-8

"""
    Task Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libtes.configuration import Configuration


class CreateTaskRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'acl': 'list[str]',
        'task_versions': 'list[CreateTaskVersionRequest]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'acl': 'acl',
        'task_versions': 'taskVersions'
    }

    def __init__(self, name=None, description=None, acl=None, task_versions=None, local_vars_configuration=None):  # noqa: E501
        """CreateTaskRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._acl = None
        self._task_versions = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if acl is not None:
            self.acl = acl
        if task_versions is not None:
            self.task_versions = task_versions

    @property
    def name(self):
        """Gets the name of this CreateTaskRequest.  # noqa: E501

        User-defined name of the task  # noqa: E501

        :return: The name of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTaskRequest.

        User-defined name of the task  # noqa: E501

        :param name: The name of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTaskRequest.  # noqa: E501

        User-defined description of the task  # noqa: E501

        :return: The description of this CreateTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTaskRequest.

        User-defined description of the task  # noqa: E501

        :param description: The description of this CreateTaskRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 4096):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def acl(self):
        """Gets the acl of this CreateTaskRequest.  # noqa: E501

        Access Control List  # noqa: E501

        :return: The acl of this CreateTaskRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CreateTaskRequest.

        Access Control List  # noqa: E501

        :param acl: The acl of this CreateTaskRequest.  # noqa: E501
        :type: list[str]
        """

        self._acl = acl

    @property
    def task_versions(self):
        """Gets the task_versions of this CreateTaskRequest.  # noqa: E501

        List of task versions  # noqa: E501

        :return: The task_versions of this CreateTaskRequest.  # noqa: E501
        :rtype: list[CreateTaskVersionRequest]
        """
        return self._task_versions

    @task_versions.setter
    def task_versions(self, task_versions):
        """Sets the task_versions of this CreateTaskRequest.

        List of task versions  # noqa: E501

        :param task_versions: The task_versions of this CreateTaskRequest.  # noqa: E501
        :type: list[CreateTaskVersionRequest]
        """

        self._task_versions = task_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
