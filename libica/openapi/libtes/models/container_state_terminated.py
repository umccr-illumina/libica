# coding: utf-8

"""
    Task Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libtes.configuration import Configuration


class ContainerStateTerminated(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exit_code': 'int',
        'signal': 'int',
        'reason': 'str',
        'message': 'str',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'container_id': 'str'
    }

    attribute_map = {
        'exit_code': 'exitCode',
        'signal': 'signal',
        'reason': 'reason',
        'message': 'message',
        'started_at': 'startedAt',
        'finished_at': 'finishedAt',
        'container_id': 'containerID'
    }

    def __init__(self, exit_code=None, signal=None, reason=None, message=None, started_at=None, finished_at=None, container_id=None, local_vars_configuration=None):  # noqa: E501
        """ContainerStateTerminated - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exit_code = None
        self._signal = None
        self._reason = None
        self._message = None
        self._started_at = None
        self._finished_at = None
        self._container_id = None
        self.discriminator = None

        if exit_code is not None:
            self.exit_code = exit_code
        if signal is not None:
            self.signal = signal
        if reason is not None:
            self.reason = reason
        if message is not None:
            self.message = message
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if container_id is not None:
            self.container_id = container_id

    @property
    def exit_code(self):
        """Gets the exit_code of this ContainerStateTerminated.  # noqa: E501


        :return: The exit_code of this ContainerStateTerminated.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ContainerStateTerminated.


        :param exit_code: The exit_code of this ContainerStateTerminated.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    @property
    def signal(self):
        """Gets the signal of this ContainerStateTerminated.  # noqa: E501


        :return: The signal of this ContainerStateTerminated.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this ContainerStateTerminated.


        :param signal: The signal of this ContainerStateTerminated.  # noqa: E501
        :type: int
        """

        self._signal = signal

    @property
    def reason(self):
        """Gets the reason of this ContainerStateTerminated.  # noqa: E501


        :return: The reason of this ContainerStateTerminated.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ContainerStateTerminated.


        :param reason: The reason of this ContainerStateTerminated.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def message(self):
        """Gets the message of this ContainerStateTerminated.  # noqa: E501


        :return: The message of this ContainerStateTerminated.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ContainerStateTerminated.


        :param message: The message of this ContainerStateTerminated.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def started_at(self):
        """Gets the started_at of this ContainerStateTerminated.  # noqa: E501


        :return: The started_at of this ContainerStateTerminated.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ContainerStateTerminated.


        :param started_at: The started_at of this ContainerStateTerminated.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ContainerStateTerminated.  # noqa: E501


        :return: The finished_at of this ContainerStateTerminated.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ContainerStateTerminated.


        :param finished_at: The finished_at of this ContainerStateTerminated.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def container_id(self):
        """Gets the container_id of this ContainerStateTerminated.  # noqa: E501


        :return: The container_id of this ContainerStateTerminated.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ContainerStateTerminated.


        :param container_id: The container_id of this ContainerStateTerminated.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerStateTerminated):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerStateTerminated):
            return True

        return self.to_dict() != other.to_dict()
