# coding: utf-8

"""
    Task Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libtes.configuration import Configuration


class ContainerState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'waiting': 'ContainerStateWaiting',
        'running': 'ContainerStateRunning',
        'terminated': 'ContainerStateTerminated'
    }

    attribute_map = {
        'waiting': 'waiting',
        'running': 'running',
        'terminated': 'terminated'
    }

    def __init__(self, waiting=None, running=None, terminated=None, local_vars_configuration=None):  # noqa: E501
        """ContainerState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._waiting = None
        self._running = None
        self._terminated = None
        self.discriminator = None

        if waiting is not None:
            self.waiting = waiting
        if running is not None:
            self.running = running
        if terminated is not None:
            self.terminated = terminated

    @property
    def waiting(self):
        """Gets the waiting of this ContainerState.  # noqa: E501


        :return: The waiting of this ContainerState.  # noqa: E501
        :rtype: ContainerStateWaiting
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """Sets the waiting of this ContainerState.


        :param waiting: The waiting of this ContainerState.  # noqa: E501
        :type: ContainerStateWaiting
        """

        self._waiting = waiting

    @property
    def running(self):
        """Gets the running of this ContainerState.  # noqa: E501


        :return: The running of this ContainerState.  # noqa: E501
        :rtype: ContainerStateRunning
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this ContainerState.


        :param running: The running of this ContainerState.  # noqa: E501
        :type: ContainerStateRunning
        """

        self._running = running

    @property
    def terminated(self):
        """Gets the terminated of this ContainerState.  # noqa: E501


        :return: The terminated of this ContainerState.  # noqa: E501
        :rtype: ContainerStateTerminated
        """
        return self._terminated

    @terminated.setter
    def terminated(self, terminated):
        """Sets the terminated of this ContainerState.


        :param terminated: The terminated of this ContainerState.  # noqa: E501
        :type: ContainerStateTerminated
        """

        self._terminated = terminated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerState):
            return True

        return self.to_dict() != other.to_dict()
