# coding: utf-8

"""
    Task Execution Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libtes.configuration import Configuration


class TaskRunLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'datetime',
        'end_time': 'datetime',
        'error': 'str',
        'error_details': 'str',
        'stdout': 'str',
        'stderr': 'str'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'error': 'error',
        'error_details': 'errorDetails',
        'stdout': 'stdout',
        'stderr': 'stderr'
    }

    def __init__(self, start_time=None, end_time=None, error=None, error_details=None, stdout=None, stderr=None, local_vars_configuration=None):  # noqa: E501
        """TaskRunLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._end_time = None
        self._error = None
        self._error_details = None
        self._stdout = None
        self._stderr = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if error is not None:
            self.error = error
        if error_details is not None:
            self.error_details = error_details
        if stdout is not None:
            self.stdout = stdout
        if stderr is not None:
            self.stderr = stderr

    @property
    def start_time(self):
        """Gets the start_time of this TaskRunLogs.  # noqa: E501


        :return: The start_time of this TaskRunLogs.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskRunLogs.


        :param start_time: The start_time of this TaskRunLogs.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TaskRunLogs.  # noqa: E501


        :return: The end_time of this TaskRunLogs.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskRunLogs.


        :param end_time: The end_time of this TaskRunLogs.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this TaskRunLogs.  # noqa: E501


        :return: The error of this TaskRunLogs.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskRunLogs.


        :param error: The error of this TaskRunLogs.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_details(self):
        """Gets the error_details of this TaskRunLogs.  # noqa: E501


        :return: The error_details of this TaskRunLogs.  # noqa: E501
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this TaskRunLogs.


        :param error_details: The error_details of this TaskRunLogs.  # noqa: E501
        :type: str
        """

        self._error_details = error_details

    @property
    def stdout(self):
        """Gets the stdout of this TaskRunLogs.  # noqa: E501


        :return: The stdout of this TaskRunLogs.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this TaskRunLogs.


        :param stdout: The stdout of this TaskRunLogs.  # noqa: E501
        :type: str
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """Gets the stderr of this TaskRunLogs.  # noqa: E501


        :return: The stderr of this TaskRunLogs.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this TaskRunLogs.


        :param stderr: The stderr of this TaskRunLogs.  # noqa: E501
        :type: str
        """

        self._stderr = stderr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRunLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskRunLogs):
            return True

        return self.to_dict() != other.to_dict()
