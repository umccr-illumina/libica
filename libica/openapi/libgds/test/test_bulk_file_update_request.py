# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import libica.openapi.libgds
from libica.openapi.libgds.models.bulk_file_update_request import BulkFileUpdateRequest  # noqa: E501
from libica.openapi.libgds.rest import ApiException

class TestBulkFileUpdateRequest(unittest.TestCase):
    """BulkFileUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BulkFileUpdateRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = libica.openapi.libgds.models.bulk_file_update_request.BulkFileUpdateRequest()  # noqa: E501
        if include_optional :
            return BulkFileUpdateRequest(
                items = [
                    libica.openapi.libgds.models.bulk_file_update_item.BulkFileUpdateItem(
                        id = '0', 
                        metadata = None,
                        format = '0', 
                        format_edam = '0', 
                        life_cycle = libica.openapi.libgds.models.file_life_cycle_settings.FileLifeCycleSettings(
                            time_grace_period_ends = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_to_be_archived = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_to_be_deleted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            archive_storage_tier = 'Archive', ), )
                    ]
            )
        else :
            return BulkFileUpdateRequest(
        )

    def testBulkFileUpdateRequest(self):
        """Test BulkFileUpdateRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
