# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import libica.openapi.libgds
from libica.openapi.libgds.models.volume_file_list_response import VolumeFileListResponse  # noqa: E501
from libica.openapi.libgds.rest import ApiException

class TestVolumeFileListResponse(unittest.TestCase):
    """VolumeFileListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test VolumeFileListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = libica.openapi.libgds.models.volume_file_list_response.VolumeFileListResponse()  # noqa: E501
        if include_optional :
            return VolumeFileListResponse(
                items = [
                    libica.openapi.libgds.models.file_response.FileResponse(
                        # FIXME GDS API does not define this volume_metadata object shape but only description.
                        #  Just setting to None for now.
                        volume_metadata = None,   # libica.openapi.libgds.models.volume_metadata.volumeMetadata()
                        id = '0', 
                        name = '0', 
                        volume_id = '0', 
                        parent_folder_id = '0', 
                        volume_name = '0', 
                        volume_configuration_name = '0', 
                        type = '0', 
                        tenant_id = '0', 
                        sub_tenant_id = '0', 
                        path = '0', 
                        time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '0', 
                        time_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        modified_by = '0', 
                        inherited_acl = [
                            '0'
                            ], 
                        urn = '0', 
                        size_in_bytes = 56,
                        # FIXME GDS API does not define this metadata object shape but only description.
                        #  Just setting to None for now.
                        metadata = None,  # libica.openapi.libgds.models.metadata.metadata()
                        is_uploaded = True, 
                        archive_status = 'None', 
                        time_archived = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        storage_tier = 'None', 
                        e_tag = '0', 
                        format = '0', 
                        format_edam = '0', 
                        status = 'Partial', 
                        life_cycle = libica.openapi.libgds.models.file_life_cycle_settings.FileLifeCycleSettings(
                            time_grace_period_ends = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_to_be_archived = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_to_be_deleted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            archive_storage_tier = 'Archive', ), 
                        presigned_url = '0', )
                    ], 
                item_success_count = 56, 
                item_failed_count = 56, 
                items_failed = [
                    libica.openapi.libgds.models.bulk_failed_item.BulkFailedItem(
                        id = '0', 
                        error_response = libica.openapi.libgds.models.error_response.ErrorResponse(
                            code = '0', 
                            message = '0', 
                            details = [
                                None
                                ], ), )
                    ]
            )
        else :
            return VolumeFileListResponse(
        )

    def testVolumeFileListResponse(self):
        """Test VolumeFileListResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
