# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import libica.openapi.libgds
from libica.openapi.libgds.models.job_list_response import JobListResponse  # noqa: E501
from libica.openapi.libgds.rest import ApiException

class TestJobListResponse(unittest.TestCase):
    """JobListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test JobListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = libica.openapi.libgds.models.job_list_response.JobListResponse()  # noqa: E501
        if include_optional :
            # FIXME updateMetadata and deleteMetadata is just string
            return JobListResponse(
                items = [
                    libica.openapi.libgds.models.job_response.JobResponse(
                        id = '0', 
                        parent_folder_urn = '0', 
                        operation_type = 'Unknown', 
                        job_type = '0', 
                        operation_parameters = libica.openapi.libgds.models.job_operation_parameters.JobOperationParameters(
                            folder_copy = libica.openapi.libgds.models.folder_copy_operation_parameters.FolderCopyOperationParameters(
                                source_folder_urn = '0', 
                                target_folder_urn = '0', 
                                destination_folder_name = '0', 
                                metadata_to_copy = [
                                    '0'
                                    ], 
                                duplicate_file_action = '0', 
                                copy_uploaded_files_only = True, 
                                source_folder_id = '0', 
                                target_folder_id = '0', ), 
                            folder_delete = libica.openapi.libgds.models.folder_delete_operation_parameters.FolderDeleteOperationParameters(
                                folder_urn = '0', ), 
                            volume_migration = libica.openapi.libgds.models.volume_migration_operation_parameters.VolumeMigrationOperationParameters(
                                volume_id = '0', ), 
                            file_copy = libica.openapi.libgds.models.file_copy_operation_parameters.FileCopyOperationParameters(
                                source_volume_id = '0', 
                                source_file_ids = [
                                    '0'
                                    ], 
                                target_folder_id = '0', 
                                duplicate_file_action = '0', ), 
                            bulk_metadata_update = libica.openapi.libgds.models.bulk_metadata_update_operation_parameters.BulkMetadataUpdateOperationParameters(
                                folder_id = '0', 
                                folder_path = '0', 
                                volume_id = '0', 
                                file_status = '0', 
                                parent_folder_metadata_updates = libica.openapi.libgds.models.metadata_update_request.MetadataUpdateRequest(
                                    update_metadata = "",
                                    delete_metadata = "", ),
                                children_folders_updates = libica.openapi.libgds.models.metadata_update_request.MetadataUpdateRequest(
                                    update_metadata = "",
                                    delete_metadata = "", ),
                                children_files_updates = libica.openapi.libgds.models.metadata_update_request.MetadataUpdateRequest(
                                    update_metadata = "",
                                    delete_metadata = "", ), ), ),
                        results = libica.openapi.libgds.models.job_output.JobOutput(
                            folder_metadata_update_output = libica.openapi.libgds.models.metadata_update_output.MetadataUpdateOutput(
                                total_count = 56, 
                                processed_count = 56, 
                                items_failed_count = 56, 
                                items_failed = [
                                    libica.openapi.libgds.models.bulk_failed_item.BulkFailedItem(
                                        id = '0', 
                                        error_response = libica.openapi.libgds.models.error_response.ErrorResponse(
                                            code = '0', 
                                            message = '0', 
                                            details = [
                                                None
                                                ], ), )
                                    ], ), 
                            file_metadata_update_output = libica.openapi.libgds.models.metadata_update_output.MetadataUpdateOutput(
                                total_count = 56, 
                                processed_count = 56, 
                                items_failed_count = 56, ), ), 
                        progress_status = 'Pending', 
                        time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '0', 
                        time_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        time_completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                item_count = 56, 
                first_page_token = '0', 
                next_page_token = '0', 
                prev_page_token = '0', 
                last_page_token = '0', 
                total_item_count = 56, 
                total_page_count = 56
            )
        else :
            return JobListResponse(
        )

    def testJobListResponse(self):
        """Test JobListResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
