# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class VolumeFileListRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'volume_id': 'str',
        'file_ids': 'list[str]',
        'include_presigned_url': 'bool',
        'presigned_url_mode': 'str'
    }

    attribute_map = {
        'volume_id': 'volumeId',
        'file_ids': 'fileIds',
        'include_presigned_url': 'includePresignedUrl',
        'presigned_url_mode': 'presignedUrlMode'
    }

    def __init__(self, volume_id=None, file_ids=None, include_presigned_url=None, presigned_url_mode=None, local_vars_configuration=None):  # noqa: E501
        """VolumeFileListRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._volume_id = None
        self._file_ids = None
        self._include_presigned_url = None
        self._presigned_url_mode = None
        self.discriminator = None

        if volume_id is not None:
            self.volume_id = volume_id
        if file_ids is not None:
            self.file_ids = file_ids
        if include_presigned_url is not None:
            self.include_presigned_url = include_presigned_url
        if presigned_url_mode is not None:
            self.presigned_url_mode = presigned_url_mode

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeFileListRequest.  # noqa: E501

        Volume identifier  # noqa: E501

        :return: The volume_id of this VolumeFileListRequest.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeFileListRequest.

        Volume identifier  # noqa: E501

        :param volume_id: The volume_id of this VolumeFileListRequest.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def file_ids(self):
        """Gets the file_ids of this VolumeFileListRequest.  # noqa: E501

        File identifiers to list  # noqa: E501

        :return: The file_ids of this VolumeFileListRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this VolumeFileListRequest.

        File identifiers to list  # noqa: E501

        :param file_ids: The file_ids of this VolumeFileListRequest.  # noqa: E501
        :type: list[str]
        """

        self._file_ids = file_ids

    @property
    def include_presigned_url(self):
        """Gets the include_presigned_url of this VolumeFileListRequest.  # noqa: E501

        Optional parameter that returns presigned URL for each file when set to true  # noqa: E501

        :return: The include_presigned_url of this VolumeFileListRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_presigned_url

    @include_presigned_url.setter
    def include_presigned_url(self, include_presigned_url):
        """Sets the include_presigned_url of this VolumeFileListRequest.

        Optional parameter that returns presigned URL for each file when set to true  # noqa: E501

        :param include_presigned_url: The include_presigned_url of this VolumeFileListRequest.  # noqa: E501
        :type: bool
        """

        self._include_presigned_url = include_presigned_url

    @property
    def presigned_url_mode(self):
        """Gets the presigned_url_mode of this VolumeFileListRequest.  # noqa: E501

        Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.  Possible values: Attachment, Inline, Browser  # noqa: E501

        :return: The presigned_url_mode of this VolumeFileListRequest.  # noqa: E501
        :rtype: str
        """
        return self._presigned_url_mode

    @presigned_url_mode.setter
    def presigned_url_mode(self, presigned_url_mode):
        """Sets the presigned_url_mode of this VolumeFileListRequest.

        Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.  Possible values: Attachment, Inline, Browser  # noqa: E501

        :param presigned_url_mode: The presigned_url_mode of this VolumeFileListRequest.  # noqa: E501
        :type: str
        """

        self._presigned_url_mode = presigned_url_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeFileListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeFileListRequest):
            return True

        return self.to_dict() != other.to_dict()
