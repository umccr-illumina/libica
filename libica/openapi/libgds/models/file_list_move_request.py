# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class FileListMoveRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_volume_id': 'str',
        'destination_folder_id': 'str',
        'ids': 'list[str]'
    }

    attribute_map = {
        'source_volume_id': 'sourceVolumeId',
        'destination_folder_id': 'destinationFolderId',
        'ids': 'ids'
    }

    def __init__(self, source_volume_id=None, destination_folder_id=None, ids=None, local_vars_configuration=None):  # noqa: E501
        """FileListMoveRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_volume_id = None
        self._destination_folder_id = None
        self._ids = None
        self.discriminator = None

        self.source_volume_id = source_volume_id
        self.destination_folder_id = destination_folder_id
        self.ids = ids

    @property
    def source_volume_id(self):
        """Gets the source_volume_id of this FileListMoveRequest.  # noqa: E501

        The volume where the source files are moved from.  # noqa: E501

        :return: The source_volume_id of this FileListMoveRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_volume_id

    @source_volume_id.setter
    def source_volume_id(self, source_volume_id):
        """Sets the source_volume_id of this FileListMoveRequest.

        The volume where the source files are moved from.  # noqa: E501

        :param source_volume_id: The source_volume_id of this FileListMoveRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `source_volume_id`, must not be `None`")  # noqa: E501

        self._source_volume_id = source_volume_id

    @property
    def destination_folder_id(self):
        """Gets the destination_folder_id of this FileListMoveRequest.  # noqa: E501

        The folder into which the source files will be moved.  # noqa: E501

        :return: The destination_folder_id of this FileListMoveRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination_folder_id

    @destination_folder_id.setter
    def destination_folder_id(self, destination_folder_id):
        """Sets the destination_folder_id of this FileListMoveRequest.

        The folder into which the source files will be moved.  # noqa: E501

        :param destination_folder_id: The destination_folder_id of this FileListMoveRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination_folder_id is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_folder_id`, must not be `None`")  # noqa: E501

        self._destination_folder_id = destination_folder_id

    @property
    def ids(self):
        """Gets the ids of this FileListMoveRequest.  # noqa: E501

        List of files ids to moved  # noqa: E501

        :return: The ids of this FileListMoveRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this FileListMoveRequest.

        List of files ids to moved  # noqa: E501

        :param ids: The ids of this FileListMoveRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and ids is None:  # noqa: E501
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileListMoveRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileListMoveRequest):
            return True

        return self.to_dict() != other.to_dict()
