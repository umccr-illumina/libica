# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class AzureTemporaryUploadCredentials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_account_name': 'str',
        'storage_container_name': 'str',
        'object_location': 'str',
        'region': 'str',
        'sas_token': 'str',
        'object_store_permissions': 'str',
        'expiration_date': 'datetime'
    }

    attribute_map = {
        'storage_account_name': 'storageAccountName',
        'storage_container_name': 'storageContainerName',
        'object_location': 'objectLocation',
        'region': 'region',
        'sas_token': 'sasToken',
        'object_store_permissions': 'objectStorePermissions',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, storage_account_name=None, storage_container_name=None, object_location=None, region=None, sas_token=None, object_store_permissions=None, expiration_date=None, local_vars_configuration=None):  # noqa: E501
        """AzureTemporaryUploadCredentials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._storage_account_name = None
        self._storage_container_name = None
        self._object_location = None
        self._region = None
        self._sas_token = None
        self._object_store_permissions = None
        self._expiration_date = None
        self.discriminator = None

        if storage_account_name is not None:
            self.storage_account_name = storage_account_name
        if storage_container_name is not None:
            self.storage_container_name = storage_container_name
        if object_location is not None:
            self.object_location = object_location
        if region is not None:
            self.region = region
        if sas_token is not None:
            self.sas_token = sas_token
        if object_store_permissions is not None:
            self.object_store_permissions = object_store_permissions
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The storage_account_name of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this AzureTemporaryUploadCredentials.


        :param storage_account_name: The storage_account_name of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._storage_account_name = storage_account_name

    @property
    def storage_container_name(self):
        """Gets the storage_container_name of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The storage_container_name of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_name

    @storage_container_name.setter
    def storage_container_name(self, storage_container_name):
        """Sets the storage_container_name of this AzureTemporaryUploadCredentials.


        :param storage_container_name: The storage_container_name of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._storage_container_name = storage_container_name

    @property
    def object_location(self):
        """Gets the object_location of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The object_location of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._object_location

    @object_location.setter
    def object_location(self, object_location):
        """Sets the object_location of this AzureTemporaryUploadCredentials.


        :param object_location: The object_location of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._object_location = object_location

    @property
    def region(self):
        """Gets the region of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The region of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AzureTemporaryUploadCredentials.


        :param region: The region of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def sas_token(self):
        """Gets the sas_token of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The sas_token of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._sas_token

    @sas_token.setter
    def sas_token(self, sas_token):
        """Sets the sas_token of this AzureTemporaryUploadCredentials.


        :param sas_token: The sas_token of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._sas_token = sas_token

    @property
    def object_store_permissions(self):
        """Gets the object_store_permissions of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The object_store_permissions of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: str
        """
        return self._object_store_permissions

    @object_store_permissions.setter
    def object_store_permissions(self, object_store_permissions):
        """Sets the object_store_permissions of this AzureTemporaryUploadCredentials.


        :param object_store_permissions: The object_store_permissions of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: str
        """

        self._object_store_permissions = object_store_permissions

    @property
    def expiration_date(self):
        """Gets the expiration_date of this AzureTemporaryUploadCredentials.  # noqa: E501


        :return: The expiration_date of this AzureTemporaryUploadCredentials.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this AzureTemporaryUploadCredentials.


        :param expiration_date: The expiration_date of this AzureTemporaryUploadCredentials.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureTemporaryUploadCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AzureTemporaryUploadCredentials):
            return True

        return self.to_dict() != other.to_dict()
