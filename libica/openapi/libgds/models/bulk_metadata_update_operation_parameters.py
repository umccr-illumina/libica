# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class BulkMetadataUpdateOperationParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'folder_id': 'str',
        'folder_path': 'str',
        'volume_id': 'str',
        'file_status': 'str',
        'parent_folder_metadata_updates': 'MetadataUpdateRequest',
        'children_folders_updates': 'MetadataUpdateRequest',
        'children_files_updates': 'MetadataUpdateRequest'
    }

    attribute_map = {
        'folder_id': 'folderId',
        'folder_path': 'folderPath',
        'volume_id': 'volumeId',
        'file_status': 'fileStatus',
        'parent_folder_metadata_updates': 'parentFolderMetadataUpdates',
        'children_folders_updates': 'childrenFoldersUpdates',
        'children_files_updates': 'childrenFilesUpdates'
    }

    def __init__(self, folder_id=None, folder_path=None, volume_id=None, file_status=None, parent_folder_metadata_updates=None, children_folders_updates=None, children_files_updates=None, local_vars_configuration=None):  # noqa: E501
        """BulkMetadataUpdateOperationParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._folder_id = None
        self._folder_path = None
        self._volume_id = None
        self._file_status = None
        self._parent_folder_metadata_updates = None
        self._children_folders_updates = None
        self._children_files_updates = None
        self.discriminator = None

        if folder_id is not None:
            self.folder_id = folder_id
        if folder_path is not None:
            self.folder_path = folder_path
        if volume_id is not None:
            self.volume_id = volume_id
        if file_status is not None:
            self.file_status = file_status
        if parent_folder_metadata_updates is not None:
            self.parent_folder_metadata_updates = parent_folder_metadata_updates
        if children_folders_updates is not None:
            self.children_folders_updates = children_folders_updates
        if children_files_updates is not None:
            self.children_files_updates = children_files_updates

    @property
    def folder_id(self):
        """Gets the folder_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The folder_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this BulkMetadataUpdateOperationParameters.


        :param folder_id: The folder_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def folder_path(self):
        """Gets the folder_path of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The folder_path of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this BulkMetadataUpdateOperationParameters.


        :param folder_path: The folder_path of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: str
        """

        self._folder_path = folder_path

    @property
    def volume_id(self):
        """Gets the volume_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The volume_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this BulkMetadataUpdateOperationParameters.


        :param volume_id: The volume_id of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def file_status(self):
        """Gets the file_status of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The file_status of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_status

    @file_status.setter
    def file_status(self, file_status):
        """Sets the file_status of this BulkMetadataUpdateOperationParameters.


        :param file_status: The file_status of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: str
        """

        self._file_status = file_status

    @property
    def parent_folder_metadata_updates(self):
        """Gets the parent_folder_metadata_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The parent_folder_metadata_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: MetadataUpdateRequest
        """
        return self._parent_folder_metadata_updates

    @parent_folder_metadata_updates.setter
    def parent_folder_metadata_updates(self, parent_folder_metadata_updates):
        """Sets the parent_folder_metadata_updates of this BulkMetadataUpdateOperationParameters.


        :param parent_folder_metadata_updates: The parent_folder_metadata_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: MetadataUpdateRequest
        """

        self._parent_folder_metadata_updates = parent_folder_metadata_updates

    @property
    def children_folders_updates(self):
        """Gets the children_folders_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The children_folders_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: MetadataUpdateRequest
        """
        return self._children_folders_updates

    @children_folders_updates.setter
    def children_folders_updates(self, children_folders_updates):
        """Sets the children_folders_updates of this BulkMetadataUpdateOperationParameters.


        :param children_folders_updates: The children_folders_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: MetadataUpdateRequest
        """

        self._children_folders_updates = children_folders_updates

    @property
    def children_files_updates(self):
        """Gets the children_files_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501


        :return: The children_files_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :rtype: MetadataUpdateRequest
        """
        return self._children_files_updates

    @children_files_updates.setter
    def children_files_updates(self, children_files_updates):
        """Sets the children_files_updates of this BulkMetadataUpdateOperationParameters.


        :param children_files_updates: The children_files_updates of this BulkMetadataUpdateOperationParameters.  # noqa: E501
        :type: MetadataUpdateRequest
        """

        self._children_files_updates = children_files_updates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkMetadataUpdateOperationParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkMetadataUpdateOperationParameters):
            return True

        return self.to_dict() != other.to_dict()
