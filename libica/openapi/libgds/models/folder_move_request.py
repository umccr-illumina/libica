# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class FolderMoveRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_parent_folder_id': 'str',
        'metadata_to_copy': 'list[str]',
        'metadata_to_update': 'object',
        'metadata_items_to_add': 'object',
        'metadata_items_to_delete': 'object'
    }

    attribute_map = {
        'target_parent_folder_id': 'targetParentFolderId',
        'metadata_to_copy': 'metadataToCopy',
        'metadata_to_update': 'metadataToUpdate',
        'metadata_items_to_add': 'metadataItemsToAdd',
        'metadata_items_to_delete': 'metadataItemsToDelete'
    }

    def __init__(self, target_parent_folder_id=None, metadata_to_copy=None, metadata_to_update=None, metadata_items_to_add=None, metadata_items_to_delete=None, local_vars_configuration=None):  # noqa: E501
        """FolderMoveRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._target_parent_folder_id = None
        self._metadata_to_copy = None
        self._metadata_to_update = None
        self._metadata_items_to_add = None
        self._metadata_items_to_delete = None
        self.discriminator = None

        self.target_parent_folder_id = target_parent_folder_id
        if metadata_to_copy is not None:
            self.metadata_to_copy = metadata_to_copy
        if metadata_to_update is not None:
            self.metadata_to_update = metadata_to_update
        if metadata_items_to_add is not None:
            self.metadata_items_to_add = metadata_items_to_add
        if metadata_items_to_delete is not None:
            self.metadata_items_to_delete = metadata_items_to_delete

    @property
    def target_parent_folder_id(self):
        """Gets the target_parent_folder_id of this FolderMoveRequest.  # noqa: E501

        The parent folder into which the folder will be moved.  # noqa: E501

        :return: The target_parent_folder_id of this FolderMoveRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_parent_folder_id

    @target_parent_folder_id.setter
    def target_parent_folder_id(self, target_parent_folder_id):
        """Sets the target_parent_folder_id of this FolderMoveRequest.

        The parent folder into which the folder will be moved.  # noqa: E501

        :param target_parent_folder_id: The target_parent_folder_id of this FolderMoveRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target_parent_folder_id is None:  # noqa: E501
            raise ValueError("Invalid value for `target_parent_folder_id`, must not be `None`")  # noqa: E501

        self._target_parent_folder_id = target_parent_folder_id

    @property
    def metadata_to_copy(self):
        """Gets the metadata_to_copy of this FolderMoveRequest.  # noqa: E501

        List of metadata to be copied/kept  # noqa: E501

        :return: The metadata_to_copy of this FolderMoveRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_to_copy

    @metadata_to_copy.setter
    def metadata_to_copy(self, metadata_to_copy):
        """Sets the metadata_to_copy of this FolderMoveRequest.

        List of metadata to be copied/kept  # noqa: E501

        :param metadata_to_copy: The metadata_to_copy of this FolderMoveRequest.  # noqa: E501
        :type: list[str]
        """

        self._metadata_to_copy = metadata_to_copy

    @property
    def metadata_to_update(self):
        """Gets the metadata_to_update of this FolderMoveRequest.  # noqa: E501

        Modifies the contents of existing metadata  # noqa: E501

        :return: The metadata_to_update of this FolderMoveRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata_to_update

    @metadata_to_update.setter
    def metadata_to_update(self, metadata_to_update):
        """Sets the metadata_to_update of this FolderMoveRequest.

        Modifies the contents of existing metadata  # noqa: E501

        :param metadata_to_update: The metadata_to_update of this FolderMoveRequest.  # noqa: E501
        :type: object
        """

        self._metadata_to_update = metadata_to_update

    @property
    def metadata_items_to_add(self):
        """Gets the metadata_items_to_add of this FolderMoveRequest.  # noqa: E501

        Add an item to a metadata with array type  # noqa: E501

        :return: The metadata_items_to_add of this FolderMoveRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata_items_to_add

    @metadata_items_to_add.setter
    def metadata_items_to_add(self, metadata_items_to_add):
        """Sets the metadata_items_to_add of this FolderMoveRequest.

        Add an item to a metadata with array type  # noqa: E501

        :param metadata_items_to_add: The metadata_items_to_add of this FolderMoveRequest.  # noqa: E501
        :type: object
        """

        self._metadata_items_to_add = metadata_items_to_add

    @property
    def metadata_items_to_delete(self):
        """Gets the metadata_items_to_delete of this FolderMoveRequest.  # noqa: E501

        Delete an item from a metadata with array type  # noqa: E501

        :return: The metadata_items_to_delete of this FolderMoveRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata_items_to_delete

    @metadata_items_to_delete.setter
    def metadata_items_to_delete(self, metadata_items_to_delete):
        """Sets the metadata_items_to_delete of this FolderMoveRequest.

        Delete an item from a metadata with array type  # noqa: E501

        :param metadata_items_to_delete: The metadata_items_to_delete of this FolderMoveRequest.  # noqa: E501
        :type: object
        """

        self._metadata_items_to_delete = metadata_items_to_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FolderMoveRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FolderMoveRequest):
            return True

        return self.to_dict() != other.to_dict()
