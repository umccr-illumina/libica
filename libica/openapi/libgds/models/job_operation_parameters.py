# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class JobOperationParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'folder_copy': 'FolderCopyOperationParameters',
        'folder_delete': 'FolderDeleteOperationParameters',
        'volume_migration': 'VolumeMigrationOperationParameters',
        'file_copy': 'FileCopyOperationParameters',
        'bulk_metadata_update': 'BulkMetadataUpdateOperationParameters'
    }

    attribute_map = {
        'folder_copy': 'folderCopy',
        'folder_delete': 'folderDelete',
        'volume_migration': 'volumeMigration',
        'file_copy': 'fileCopy',
        'bulk_metadata_update': 'bulkMetadataUpdate'
    }

    def __init__(self, folder_copy=None, folder_delete=None, volume_migration=None, file_copy=None, bulk_metadata_update=None, local_vars_configuration=None):  # noqa: E501
        """JobOperationParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._folder_copy = None
        self._folder_delete = None
        self._volume_migration = None
        self._file_copy = None
        self._bulk_metadata_update = None
        self.discriminator = None

        if folder_copy is not None:
            self.folder_copy = folder_copy
        if folder_delete is not None:
            self.folder_delete = folder_delete
        if volume_migration is not None:
            self.volume_migration = volume_migration
        if file_copy is not None:
            self.file_copy = file_copy
        if bulk_metadata_update is not None:
            self.bulk_metadata_update = bulk_metadata_update

    @property
    def folder_copy(self):
        """Gets the folder_copy of this JobOperationParameters.  # noqa: E501


        :return: The folder_copy of this JobOperationParameters.  # noqa: E501
        :rtype: FolderCopyOperationParameters
        """
        return self._folder_copy

    @folder_copy.setter
    def folder_copy(self, folder_copy):
        """Sets the folder_copy of this JobOperationParameters.


        :param folder_copy: The folder_copy of this JobOperationParameters.  # noqa: E501
        :type: FolderCopyOperationParameters
        """

        self._folder_copy = folder_copy

    @property
    def folder_delete(self):
        """Gets the folder_delete of this JobOperationParameters.  # noqa: E501


        :return: The folder_delete of this JobOperationParameters.  # noqa: E501
        :rtype: FolderDeleteOperationParameters
        """
        return self._folder_delete

    @folder_delete.setter
    def folder_delete(self, folder_delete):
        """Sets the folder_delete of this JobOperationParameters.


        :param folder_delete: The folder_delete of this JobOperationParameters.  # noqa: E501
        :type: FolderDeleteOperationParameters
        """

        self._folder_delete = folder_delete

    @property
    def volume_migration(self):
        """Gets the volume_migration of this JobOperationParameters.  # noqa: E501


        :return: The volume_migration of this JobOperationParameters.  # noqa: E501
        :rtype: VolumeMigrationOperationParameters
        """
        return self._volume_migration

    @volume_migration.setter
    def volume_migration(self, volume_migration):
        """Sets the volume_migration of this JobOperationParameters.


        :param volume_migration: The volume_migration of this JobOperationParameters.  # noqa: E501
        :type: VolumeMigrationOperationParameters
        """

        self._volume_migration = volume_migration

    @property
    def file_copy(self):
        """Gets the file_copy of this JobOperationParameters.  # noqa: E501


        :return: The file_copy of this JobOperationParameters.  # noqa: E501
        :rtype: FileCopyOperationParameters
        """
        return self._file_copy

    @file_copy.setter
    def file_copy(self, file_copy):
        """Sets the file_copy of this JobOperationParameters.


        :param file_copy: The file_copy of this JobOperationParameters.  # noqa: E501
        :type: FileCopyOperationParameters
        """

        self._file_copy = file_copy

    @property
    def bulk_metadata_update(self):
        """Gets the bulk_metadata_update of this JobOperationParameters.  # noqa: E501


        :return: The bulk_metadata_update of this JobOperationParameters.  # noqa: E501
        :rtype: BulkMetadataUpdateOperationParameters
        """
        return self._bulk_metadata_update

    @bulk_metadata_update.setter
    def bulk_metadata_update(self, bulk_metadata_update):
        """Sets the bulk_metadata_update of this JobOperationParameters.


        :param bulk_metadata_update: The bulk_metadata_update of this JobOperationParameters.  # noqa: E501
        :type: BulkMetadataUpdateOperationParameters
        """

        self._bulk_metadata_update = bulk_metadata_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobOperationParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobOperationParameters):
            return True

        return self.to_dict() != other.to_dict()
