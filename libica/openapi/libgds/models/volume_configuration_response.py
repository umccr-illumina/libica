# coding: utf-8

"""
    Genomic Data Store Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from libica.openapi.libgds.configuration import Configuration


class VolumeConfigurationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'tenant_id': 'str',
        'sub_tenant_id': 'str',
        'urn': 'str',
        'online_status': 'VolumeConfigurationOnlineStatus',
        'error_code': 'str',
        'error_message': 'str',
        'time_of_last_error': 'datetime',
        'time_created': 'datetime',
        'created_by': 'str',
        'time_modified': 'datetime',
        'modified_by': 'str',
        'object_store_settings': 'ObjectStoreSettings'
    }

    attribute_map = {
        'name': 'name',
        'tenant_id': 'tenantId',
        'sub_tenant_id': 'subTenantId',
        'urn': 'urn',
        'online_status': 'onlineStatus',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'time_of_last_error': 'timeOfLastError',
        'time_created': 'timeCreated',
        'created_by': 'createdBy',
        'time_modified': 'timeModified',
        'modified_by': 'modifiedBy',
        'object_store_settings': 'objectStoreSettings'
    }

    def __init__(self, name=None, tenant_id=None, sub_tenant_id=None, urn=None, online_status=None, error_code=None, error_message=None, time_of_last_error=None, time_created=None, created_by=None, time_modified=None, modified_by=None, object_store_settings=None, local_vars_configuration=None):  # noqa: E501
        """VolumeConfigurationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._tenant_id = None
        self._sub_tenant_id = None
        self._urn = None
        self._online_status = None
        self._error_code = None
        self._error_message = None
        self._time_of_last_error = None
        self._time_created = None
        self._created_by = None
        self._time_modified = None
        self._modified_by = None
        self._object_store_settings = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if sub_tenant_id is not None:
            self.sub_tenant_id = sub_tenant_id
        if urn is not None:
            self.urn = urn
        if online_status is not None:
            self.online_status = online_status
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if time_of_last_error is not None:
            self.time_of_last_error = time_of_last_error
        if time_created is not None:
            self.time_created = time_created
        if created_by is not None:
            self.created_by = created_by
        if time_modified is not None:
            self.time_modified = time_modified
        if modified_by is not None:
            self.modified_by = modified_by
        if object_store_settings is not None:
            self.object_store_settings = object_store_settings

    @property
    def name(self):
        """Gets the name of this VolumeConfigurationResponse.  # noqa: E501

        Name for the volume configuration  # noqa: E501

        :return: The name of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeConfigurationResponse.

        Name for the volume configuration  # noqa: E501

        :param name: The name of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this VolumeConfigurationResponse.  # noqa: E501

        The unique identifier for this Volume Configuration's Tenant  # noqa: E501

        :return: The tenant_id of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this VolumeConfigurationResponse.

        The unique identifier for this Volume Configuration's Tenant  # noqa: E501

        :param tenant_id: The tenant_id of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def sub_tenant_id(self):
        """Gets the sub_tenant_id of this VolumeConfigurationResponse.  # noqa: E501

        The unique identifier for this Volume Configurations's Sub Tenant  # noqa: E501

        :return: The sub_tenant_id of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._sub_tenant_id

    @sub_tenant_id.setter
    def sub_tenant_id(self, sub_tenant_id):
        """Sets the sub_tenant_id of this VolumeConfigurationResponse.

        The unique identifier for this Volume Configurations's Sub Tenant  # noqa: E501

        :param sub_tenant_id: The sub_tenant_id of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._sub_tenant_id = sub_tenant_id

    @property
    def urn(self):
        """Gets the urn of this VolumeConfigurationResponse.  # noqa: E501

        The Universal Resource Name, unique to this Volume Configuration  # noqa: E501

        :return: The urn of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this VolumeConfigurationResponse.

        The Universal Resource Name, unique to this Volume Configuration  # noqa: E501

        :param urn: The urn of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def online_status(self):
        """Gets the online_status of this VolumeConfigurationResponse.  # noqa: E501


        :return: The online_status of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: VolumeConfigurationOnlineStatus
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this VolumeConfigurationResponse.


        :param online_status: The online_status of this VolumeConfigurationResponse.  # noqa: E501
        :type: VolumeConfigurationOnlineStatus
        """

        self._online_status = online_status

    @property
    def error_code(self):
        """Gets the error_code of this VolumeConfigurationResponse.  # noqa: E501

        Error code returned from the object store  # noqa: E501

        :return: The error_code of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this VolumeConfigurationResponse.

        Error code returned from the object store  # noqa: E501

        :param error_code: The error_code of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this VolumeConfigurationResponse.  # noqa: E501

        Error message returned from the object store  # noqa: E501

        :return: The error_message of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this VolumeConfigurationResponse.

        Error message returned from the object store  # noqa: E501

        :param error_message: The error_message of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def time_of_last_error(self):
        """Gets the time_of_last_error of this VolumeConfigurationResponse.  # noqa: E501

        Timestamp of the last observed error.  # noqa: E501

        :return: The time_of_last_error of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_of_last_error

    @time_of_last_error.setter
    def time_of_last_error(self, time_of_last_error):
        """Sets the time_of_last_error of this VolumeConfigurationResponse.

        Timestamp of the last observed error.  # noqa: E501

        :param time_of_last_error: The time_of_last_error of this VolumeConfigurationResponse.  # noqa: E501
        :type: datetime
        """

        self._time_of_last_error = time_of_last_error

    @property
    def time_created(self):
        """Gets the time_created of this VolumeConfigurationResponse.  # noqa: E501

        The date & time this Volume was created, in GDS  # noqa: E501

        :return: The time_created of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this VolumeConfigurationResponse.

        The date & time this Volume was created, in GDS  # noqa: E501

        :param time_created: The time_created of this VolumeConfigurationResponse.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def created_by(self):
        """Gets the created_by of this VolumeConfigurationResponse.  # noqa: E501

        The creator of this Volume  # noqa: E501

        :return: The created_by of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VolumeConfigurationResponse.

        The creator of this Volume  # noqa: E501

        :param created_by: The created_by of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def time_modified(self):
        """Gets the time_modified of this VolumeConfigurationResponse.  # noqa: E501

        The date & time this Volume was updated, in GDS  # noqa: E501

        :return: The time_modified of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this VolumeConfigurationResponse.

        The date & time this Volume was updated, in GDS  # noqa: E501

        :param time_modified: The time_modified of this VolumeConfigurationResponse.  # noqa: E501
        :type: datetime
        """

        self._time_modified = time_modified

    @property
    def modified_by(self):
        """Gets the modified_by of this VolumeConfigurationResponse.  # noqa: E501

        The updator of this Volume  # noqa: E501

        :return: The modified_by of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this VolumeConfigurationResponse.

        The updator of this Volume  # noqa: E501

        :param modified_by: The modified_by of this VolumeConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def object_store_settings(self):
        """Gets the object_store_settings of this VolumeConfigurationResponse.  # noqa: E501


        :return: The object_store_settings of this VolumeConfigurationResponse.  # noqa: E501
        :rtype: ObjectStoreSettings
        """
        return self._object_store_settings

    @object_store_settings.setter
    def object_store_settings(self, object_store_settings):
        """Sets the object_store_settings of this VolumeConfigurationResponse.


        :param object_store_settings: The object_store_settings of this VolumeConfigurationResponse.  # noqa: E501
        :type: ObjectStoreSettings
        """

        self._object_store_settings = object_store_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeConfigurationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeConfigurationResponse):
            return True

        return self.to_dict() != other.to_dict()
