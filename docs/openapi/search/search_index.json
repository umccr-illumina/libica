{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to libica.openapi documentation \u00b6 Python SDK for Illumina Connected Analytics (ICA) -- https://umccr-illumina.github.io/libica/ Tested for Python 3.6, 3.7, 3.8, 3.9 Test Coverage PyDoc Wiki SDK \u00b6 libwes libtes libgds libens libconsole License \u00b6 MIT License and DISCLAIMER","title":"Welcome to libica.openapi documentation"},{"location":"#welcome-to-libicaopenapi-documentation","text":"Python SDK for Illumina Connected Analytics (ICA) -- https://umccr-illumina.github.io/libica/ Tested for Python 3.6, 3.7, 3.8, 3.9 Test Coverage PyDoc Wiki","title":"Welcome to libica.openapi documentation"},{"location":"#sdk","text":"libwes libtes libgds libens libconsole","title":"SDK"},{"location":"#license","text":"MIT License and DISCLAIMER","title":"License"},{"location":"libconsole/","text":"libica.openapi.libconsole \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libconsole package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:30.963558+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libconsole, you can run the following: from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description AccountsApi get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token HealthApi service_health GET /v1/health Returns the health status for all services. ProjectsApi list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. RegionsApi list_regions GET /v1/regions Get a list of available regions TokensApi create_token POST /v1/tokens Creates a JWT token to call IAP services. TokensApi get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token TokensApi refresh_token POST /v1/tokens:refresh Refresh session psToken. TokensApi revoke_token DELETE /v1/tokens Revokes an access token. UsagesApi get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_periods GET /v1/usages/periods Get periods detail info WorkgroupsApi list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Documentation For Models \u00b6 AccessTokenRequest AccountResponse Domain ErrorResponse HealthCheckStatuses PeriodUsageSummary ProductUsage Project ProjectPagedItems Region ServiceHealthResponse SystemHealthResponse TokenDetailResponse TokenResponse UsageResponse User UserAggregatedUsage Workgroup WorkgroupResponse Documentation For Authorization \u00b6 Basic \u00b6 Type : HTTP basic authentication Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libconsole"},{"location":"libconsole/#libicaopenapilibconsole","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libconsole package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:30.963558+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libconsole"},{"location":"libconsole/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libconsole/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libconsole/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libconsole, you can run the following: from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e )","title":"Getting Started"},{"location":"libconsole/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description AccountsApi get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token HealthApi service_health GET /v1/health Returns the health status for all services. ProjectsApi list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. RegionsApi list_regions GET /v1/regions Get a list of available regions TokensApi create_token POST /v1/tokens Creates a JWT token to call IAP services. TokensApi get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token TokensApi refresh_token POST /v1/tokens:refresh Refresh session psToken. TokensApi revoke_token DELETE /v1/tokens Revokes an access token. UsagesApi get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_periods GET /v1/usages/periods Get periods detail info WorkgroupsApi list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token","title":"Documentation for API Endpoints"},{"location":"libconsole/#documentation-for-models","text":"AccessTokenRequest AccountResponse Domain ErrorResponse HealthCheckStatuses PeriodUsageSummary ProductUsage Project ProjectPagedItems Region ServiceHealthResponse SystemHealthResponse TokenDetailResponse TokenResponse UsageResponse User UserAggregatedUsage Workgroup WorkgroupResponse","title":"Documentation For Models"},{"location":"libconsole/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libconsole/#basic","text":"Type : HTTP basic authentication","title":"Basic"},{"location":"libconsole/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libconsole/#author","text":"","title":"Author"},{"location":"libconsole/docs/AccessTokenRequest/","text":"AccessTokenRequest \u00b6 Access token passed into an api request Properties \u00b6 Name Type Description Notes access_token str This is either a psToken or a JWT token depending on the context of the call. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AccessTokenRequest"},{"location":"libconsole/docs/AccessTokenRequest/#accesstokenrequest","text":"Access token passed into an api request","title":"AccessTokenRequest"},{"location":"libconsole/docs/AccessTokenRequest/#properties","text":"Name Type Description Notes access_token str This is either a psToken or a JWT token depending on the context of the call. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/AccountResponse/","text":"AccountResponse \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] type str [optional] name str [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AccountResponse"},{"location":"libconsole/docs/AccountResponse/#accountresponse","text":"","title":"AccountResponse"},{"location":"libconsole/docs/AccountResponse/#properties","text":"Name Type Description Notes id str [optional] type str [optional] name str [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/AccountsApi/","text":"libica.openapi.libconsole.AccountsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token get_account \u00b6 AccountResponse get_account(account_id) Get requested account id info require authorization Bearer token Get requested account id info Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes account_id str Return type \u00b6 AccountResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The account information returned successfully - 401 The provided token is unauthorized. - 403 You do not have permission to access this resource. - 404 The resource was not found at the given path. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.AccountsApi"},{"location":"libconsole/docs/AccountsApi/#libicaopenapilibconsoleaccountsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token","title":"libica.openapi.libconsole.AccountsApi"},{"location":"libconsole/docs/AccountsApi/#get_account","text":"AccountResponse get_account(account_id) Get requested account id info require authorization Bearer token Get requested account id info","title":"get_account"},{"location":"libconsole/docs/AccountsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/AccountsApi/#parameters","text":"Name Type Description Notes account_id str","title":"Parameters"},{"location":"libconsole/docs/AccountsApi/#return-type","text":"AccountResponse","title":"Return type"},{"location":"libconsole/docs/AccountsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/AccountsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/AccountsApi/#http-response-details","text":"Status code Description Response headers 200 The account information returned successfully - 401 The provided token is unauthorized. - 403 You do not have permission to access this resource. - 404 The resource was not found at the given path. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/Domain/","text":"Domain \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Domain"},{"location":"libconsole/docs/Domain/#domain","text":"","title":"Domain"},{"location":"libconsole/docs/Domain/#properties","text":"Name Type Description Notes id str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libconsole/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libconsole/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/HealthApi/","text":"libica.openapi.libconsole.HealthApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description service_health GET /v1/health Returns the health status for all services. service_health \u00b6 SystemHealthResponse service_health() Returns the health status for all services. Returns the health status for all services. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 SystemHealthResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Health check succeeded - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.HealthApi"},{"location":"libconsole/docs/HealthApi/#libicaopenapilibconsolehealthapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description service_health GET /v1/health Returns the health status for all services.","title":"libica.openapi.libconsole.HealthApi"},{"location":"libconsole/docs/HealthApi/#service_health","text":"SystemHealthResponse service_health() Returns the health status for all services. Returns the health status for all services.","title":"service_health"},{"location":"libconsole/docs/HealthApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/HealthApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/HealthApi/#return-type","text":"SystemHealthResponse","title":"Return type"},{"location":"libconsole/docs/HealthApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/HealthApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/HealthApi/#http-response-details","text":"Status code Description Response headers 200 Health check succeeded - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/HealthCheckStatuses/","text":"HealthCheckStatuses \u00b6 Health status Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"HealthCheckStatuses"},{"location":"libconsole/docs/HealthCheckStatuses/#healthcheckstatuses","text":"Health status","title":"HealthCheckStatuses"},{"location":"libconsole/docs/HealthCheckStatuses/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/PeriodUsageSummary/","text":"PeriodUsageSummary \u00b6 Properties \u00b6 Name Type Description Notes start datetime [optional] end datetime [optional] i_credit int [optional] total_usages list[ProductUsage] [optional] user_aggregated_usages list[UserAggregatedUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PeriodUsageSummary"},{"location":"libconsole/docs/PeriodUsageSummary/#periodusagesummary","text":"","title":"PeriodUsageSummary"},{"location":"libconsole/docs/PeriodUsageSummary/#properties","text":"Name Type Description Notes start datetime [optional] end datetime [optional] i_credit int [optional] total_usages list[ProductUsage] [optional] user_aggregated_usages list[UserAggregatedUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProductUsage/","text":"ProductUsage \u00b6 Properties \u00b6 Name Type Description Notes type str amount float unit str i_credit float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProductUsage"},{"location":"libconsole/docs/ProductUsage/#productusage","text":"","title":"ProductUsage"},{"location":"libconsole/docs/ProductUsage/#properties","text":"Name Type Description Notes type str amount float unit str i_credit float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/Project/","text":"Project \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] urn str [optional] name str [optional] owner str [optional] time_created datetime [optional] time_modified datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Project"},{"location":"libconsole/docs/Project/#project","text":"","title":"Project"},{"location":"libconsole/docs/Project/#properties","text":"Name Type Description Notes id str [optional] urn str [optional] name str [optional] owner str [optional] time_created datetime [optional] time_modified datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProjectPagedItems/","text":"ProjectPagedItems \u00b6 Paged list response Properties \u00b6 Name Type Description Notes items list[Project] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPagedItems"},{"location":"libconsole/docs/ProjectPagedItems/#projectpageditems","text":"Paged list response","title":"ProjectPagedItems"},{"location":"libconsole/docs/ProjectPagedItems/#properties","text":"Name Type Description Notes items list[Project] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProjectsApi/","text":"libica.openapi.libconsole.ProjectsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. list_projects \u00b6 ProjectPagedItems list_projects(page_token=page_token) Get a list of available projects. Requires user authorization Bearer token. Get a list of available projects Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes page_token str [optional] Return type \u00b6 ProjectPagedItems Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Projects returned successfully - 400 The provided page token is invalid. - 401 The provided access token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.ProjectsApi"},{"location":"libconsole/docs/ProjectsApi/#libicaopenapilibconsoleprojectsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token.","title":"libica.openapi.libconsole.ProjectsApi"},{"location":"libconsole/docs/ProjectsApi/#list_projects","text":"ProjectPagedItems list_projects(page_token=page_token) Get a list of available projects. Requires user authorization Bearer token. Get a list of available projects","title":"list_projects"},{"location":"libconsole/docs/ProjectsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/ProjectsApi/#parameters","text":"Name Type Description Notes page_token str [optional]","title":"Parameters"},{"location":"libconsole/docs/ProjectsApi/#return-type","text":"ProjectPagedItems","title":"Return type"},{"location":"libconsole/docs/ProjectsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/ProjectsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/ProjectsApi/#http-response-details","text":"Status code Description Response headers 200 Projects returned successfully - 400 The provided page token is invalid. - 401 The provided access token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/Region/","text":"Region \u00b6 Resource representing environment details Properties \u00b6 Name Type Description Notes name str Name of the environment [optional] display_name str Display name for the environment [optional] base_url str BaseUrl for the environment [optional] is_enabled bool True if the environment is enabled [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Region"},{"location":"libconsole/docs/Region/#region","text":"Resource representing environment details","title":"Region"},{"location":"libconsole/docs/Region/#properties","text":"Name Type Description Notes name str Name of the environment [optional] display_name str Display name for the environment [optional] base_url str BaseUrl for the environment [optional] is_enabled bool True if the environment is enabled [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/RegionsApi/","text":"libica.openapi.libconsole.RegionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_regions GET /v1/regions Get a list of available regions list_regions \u00b6 list[Region] list_regions(instrument_type=instrument_type, version=version) Get a list of available regions Get a list of available regions Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes instrument_type str Instrument type [optional] version str Instrument version [optional] Return type \u00b6 list[Region] Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Regions found and returned successfully. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.RegionsApi"},{"location":"libconsole/docs/RegionsApi/#libicaopenapilibconsoleregionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_regions GET /v1/regions Get a list of available regions","title":"libica.openapi.libconsole.RegionsApi"},{"location":"libconsole/docs/RegionsApi/#list_regions","text":"list[Region] list_regions(instrument_type=instrument_type, version=version) Get a list of available regions Get a list of available regions","title":"list_regions"},{"location":"libconsole/docs/RegionsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/RegionsApi/#parameters","text":"Name Type Description Notes instrument_type str Instrument type [optional] version str Instrument version [optional]","title":"Parameters"},{"location":"libconsole/docs/RegionsApi/#return-type","text":"list[Region]","title":"Return type"},{"location":"libconsole/docs/RegionsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/RegionsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/RegionsApi/#http-response-details","text":"Status code Description Response headers 200 Regions found and returned successfully. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/ServiceHealthResponse/","text":"ServiceHealthResponse \u00b6 Describes the individual health of all services in the platform Properties \u00b6 Name Type Description Notes name str Name of the service [optional] status HealthCheckStatuses [optional] version str Current version for the deployed service [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ServiceHealthResponse"},{"location":"libconsole/docs/ServiceHealthResponse/#servicehealthresponse","text":"Describes the individual health of all services in the platform","title":"ServiceHealthResponse"},{"location":"libconsole/docs/ServiceHealthResponse/#properties","text":"Name Type Description Notes name str Name of the service [optional] status HealthCheckStatuses [optional] version str Current version for the deployed service [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/SystemHealthResponse/","text":"SystemHealthResponse \u00b6 The overall health of the platform Properties \u00b6 Name Type Description Notes status HealthCheckStatuses [optional] details list[ServiceHealthResponse] Service health details [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemHealthResponse"},{"location":"libconsole/docs/SystemHealthResponse/#systemhealthresponse","text":"The overall health of the platform","title":"SystemHealthResponse"},{"location":"libconsole/docs/SystemHealthResponse/#properties","text":"Name Type Description Notes status HealthCheckStatuses [optional] details list[ServiceHealthResponse] Service health details [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokenDetailResponse/","text":"TokenDetailResponse \u00b6 Properties \u00b6 Name Type Description Notes uid str [optional] name str [optional] username str [optional] current_workgroup Workgroup [optional] tid str [optional] acls list[str] [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TokenDetailResponse"},{"location":"libconsole/docs/TokenDetailResponse/#tokendetailresponse","text":"","title":"TokenDetailResponse"},{"location":"libconsole/docs/TokenDetailResponse/#properties","text":"Name Type Description Notes uid str [optional] name str [optional] username str [optional] current_workgroup Workgroup [optional] tid str [optional] acls list[str] [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokenResponse/","text":"TokenResponse \u00b6 Response payload for token create Properties \u00b6 Name Type Description Notes access_token str The returned token is either a psToken or a JWT token depending on the context of the call. [optional] token_type str The type of token requested. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TokenResponse"},{"location":"libconsole/docs/TokenResponse/#tokenresponse","text":"Response payload for token create","title":"TokenResponse"},{"location":"libconsole/docs/TokenResponse/#properties","text":"Name Type Description Notes access_token str The returned token is either a psToken or a JWT token depending on the context of the call. [optional] token_type str The type of token requested. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokensApi/","text":"libica.openapi.libconsole.TokensApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_token POST /v1/tokens Creates a JWT token to call IAP services. get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token refresh_token POST /v1/tokens:refresh Refresh session psToken. revoke_token DELETE /v1/tokens Revokes an access token. create_token \u00b6 TokenResponse create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token) Creates a JWT token to call IAP services. This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken, Basic Base64 encoded username:password or Basic with apiKey. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes x_api_key str Api Key can be passed in header to generate a JWT. [optional] client_id str Optionally pass client Id from calling app to set as authorized party on JWT. [optional] api_key str OBSOLETE: api key should now be passed as as an X-API-Key header. [optional] domain str Optionally pass the domain name you are logging into [optional] data str Data is a custom meta data field that will be applied to the session field in the JWT payload. [optional] scopes list[str] Scopes can be passed in during token generation to limit the token to particular scopes. [optional] cwid str Set the current workgroup on the token. Used for aligning resources to a workgroup. [optional] cid str Set the current context on the token. Used for aligning resources to a context. [optional] return_session_token bool By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. [optional] Return type \u00b6 TokenResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The Token is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_token_details \u00b6 TokenDetailResponse get_token_details() Get current tokens info require authorization Bearer token Get token details Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 TokenDetailResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Token details returned successfully - 401 The token provided is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] refresh_token \u00b6 TokenResponse refresh_token(body=body) Refresh session psToken. This endpoint extends the session for the psToken. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body AccessTokenRequest Access token request accepts a psToken in the access_token field in the body of the request. [optional] Return type \u00b6 TokenResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The Token was refreshed successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The token is no longer able to be refreshed. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] revoke_token \u00b6 revoke_token(body=body) Revokes an access token. This endpoint revokes the access token that is passed in. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body AccessTokenRequest Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. [optional] Return type \u00b6 void (empty response body) Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Succeeded and the token has been revoked. - 400 An invalid or missing input parameter will result in a bad request.\\\" - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.TokensApi"},{"location":"libconsole/docs/TokensApi/#libicaopenapilibconsoletokensapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_token POST /v1/tokens Creates a JWT token to call IAP services. get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token refresh_token POST /v1/tokens:refresh Refresh session psToken. revoke_token DELETE /v1/tokens Revokes an access token.","title":"libica.openapi.libconsole.TokensApi"},{"location":"libconsole/docs/TokensApi/#create_token","text":"TokenResponse create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token) Creates a JWT token to call IAP services. This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken, Basic Base64 encoded username:password or Basic with apiKey.","title":"create_token"},{"location":"libconsole/docs/TokensApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters","text":"Name Type Description Notes x_api_key str Api Key can be passed in header to generate a JWT. [optional] client_id str Optionally pass client Id from calling app to set as authorized party on JWT. [optional] api_key str OBSOLETE: api key should now be passed as as an X-API-Key header. [optional] domain str Optionally pass the domain name you are logging into [optional] data str Data is a custom meta data field that will be applied to the session field in the JWT payload. [optional] scopes list[str] Scopes can be passed in during token generation to limit the token to particular scopes. [optional] cwid str Set the current workgroup on the token. Used for aligning resources to a workgroup. [optional] cid str Set the current context on the token. Used for aligning resources to a context. [optional] return_session_token bool By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type","text":"TokenResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details","text":"Status code Description Response headers 201 The Token is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#get_token_details","text":"TokenDetailResponse get_token_details() Get current tokens info require authorization Bearer token Get token details","title":"get_token_details"},{"location":"libconsole/docs/TokensApi/#example_1","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_1","text":"TokenDetailResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_1","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_1","text":"Status code Description Response headers 200 Token details returned successfully - 401 The token provided is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#refresh_token","text":"TokenResponse refresh_token(body=body) Refresh session psToken. This endpoint extends the session for the psToken.","title":"refresh_token"},{"location":"libconsole/docs/TokensApi/#example_2","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_2","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts a psToken in the access_token field in the body of the request. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_2","text":"TokenResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_2","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_2","text":"Status code Description Response headers 201 The Token was refreshed successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The token is no longer able to be refreshed. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#revoke_token","text":"revoke_token(body=body) Revokes an access token. This endpoint revokes the access token that is passed in.","title":"revoke_token"},{"location":"libconsole/docs/TokensApi/#example_3","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_3","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_3","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_3","text":"Status code Description Response headers 204 Succeeded and the token has been revoked. - 400 An invalid or missing input parameter will result in a bad request.\\\" - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsageResponse/","text":"UsageResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[PeriodUsageSummary] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UsageResponse"},{"location":"libconsole/docs/UsageResponse/#usageresponse","text":"","title":"UsageResponse"},{"location":"libconsole/docs/UsageResponse/#properties","text":"Name Type Description Notes items list[PeriodUsageSummary] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/UsagesApi/","text":"libica.openapi.libconsole.UsagesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. get_usage_periods GET /v1/usages/periods Get periods detail info get_usage \u00b6 UsageResponse get_usage(periods=periods) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the ability for the user to get the aggregated usage data Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes periods int [optional] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_usage_details \u00b6 UsageResponse get_usage_details(period_id=period_id) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes period_id int [optional] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_usage_periods \u00b6 UsageResponse get_usage_periods(limit=limit) Get periods detail info This endpoint provides the periods details Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes limit int [optional] [default to 26] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The periods are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.UsagesApi"},{"location":"libconsole/docs/UsagesApi/#libicaopenapilibconsoleusagesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. get_usage_periods GET /v1/usages/periods Get periods detail info","title":"libica.openapi.libconsole.UsagesApi"},{"location":"libconsole/docs/UsagesApi/#get_usage","text":"UsageResponse get_usage(periods=periods) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the ability for the user to get the aggregated usage data","title":"get_usage"},{"location":"libconsole/docs/UsagesApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters","text":"Name Type Description Notes periods int [optional]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsagesApi/#get_usage_details","text":"UsageResponse get_usage_details(period_id=period_id) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage","title":"get_usage_details"},{"location":"libconsole/docs/UsagesApi/#example_1","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters_1","text":"Name Type Description Notes period_id int [optional]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type_1","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization_1","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details_1","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsagesApi/#get_usage_periods","text":"UsageResponse get_usage_periods(limit=limit) Get periods detail info This endpoint provides the periods details","title":"get_usage_periods"},{"location":"libconsole/docs/UsagesApi/#example_2","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters_2","text":"Name Type Description Notes limit int [optional] [default to 26]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type_2","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization_2","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details_2","text":"Status code Description Response headers 200 The periods are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/User/","text":"User \u00b6 Properties \u00b6 Name Type Description Notes full_name str [optional] user_name str [optional] domain Domain [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"User"},{"location":"libconsole/docs/User/#user","text":"","title":"User"},{"location":"libconsole/docs/User/#properties","text":"Name Type Description Notes full_name str [optional] user_name str [optional] domain Domain [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/UserAggregatedUsage/","text":"UserAggregatedUsage \u00b6 Properties \u00b6 Name Type Description Notes user User [optional] i_credit float [optional] usages list[ProductUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UserAggregatedUsage"},{"location":"libconsole/docs/UserAggregatedUsage/#useraggregatedusage","text":"","title":"UserAggregatedUsage"},{"location":"libconsole/docs/UserAggregatedUsage/#properties","text":"Name Type Description Notes user User [optional] i_credit float [optional] usages list[ProductUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/Workgroup/","text":"Workgroup \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] name str [optional] description str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Workgroup"},{"location":"libconsole/docs/Workgroup/#workgroup","text":"","title":"Workgroup"},{"location":"libconsole/docs/Workgroup/#properties","text":"Name Type Description Notes id str [optional] name str [optional] description str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/WorkgroupResponse/","text":"WorkgroupResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[Workgroup] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkgroupResponse"},{"location":"libconsole/docs/WorkgroupResponse/#workgroupresponse","text":"","title":"WorkgroupResponse"},{"location":"libconsole/docs/WorkgroupResponse/#properties","text":"Name Type Description Notes items list[Workgroup] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/WorkgroupsApi/","text":"libica.openapi.libconsole.WorkgroupsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token list_workgroups \u00b6 WorkgroupResponse list_workgroups() Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Get a list of available workgroups Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 WorkgroupResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Workgroups returned successfully - 401 The provided session token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.WorkgroupsApi"},{"location":"libconsole/docs/WorkgroupsApi/#libicaopenapilibconsoleworkgroupsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token","title":"libica.openapi.libconsole.WorkgroupsApi"},{"location":"libconsole/docs/WorkgroupsApi/#list_workgroups","text":"WorkgroupResponse list_workgroups() Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Get a list of available workgroups","title":"list_workgroups"},{"location":"libconsole/docs/WorkgroupsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/WorkgroupsApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/WorkgroupsApi/#return-type","text":"WorkgroupResponse","title":"Return type"},{"location":"libconsole/docs/WorkgroupsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/WorkgroupsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/WorkgroupsApi/#http-response-details","text":"Status code Description Response headers 200 Workgroups returned successfully - 401 The provided session token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/","text":"libica.openapi.libens \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libens package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:27.824713+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libens, you can run the following: from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description SubscriptionsApi create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. SubscriptionsApi disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. SubscriptionsApi get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. SubscriptionsApi list_subscriptions GET /v1/subscriptions Get a list of subscriptions. Documentation For Models \u00b6 CreateSubscriptionRequest DeliveryTarget DeliveryTargetAwsSnsTopic DeliveryTargetAwsSqsQueue DeliveryTargetWorkflowRunLaunch ErrorResponse SortDirection Subscription SubscriptionList SubscriptionListSortFields Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libens"},{"location":"libens/#libicaopenapilibens","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libens package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:27.824713+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libens"},{"location":"libens/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libens/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libens/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libens, you can run the following: from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e )","title":"Getting Started"},{"location":"libens/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description SubscriptionsApi create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. SubscriptionsApi disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. SubscriptionsApi get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. SubscriptionsApi list_subscriptions GET /v1/subscriptions Get a list of subscriptions.","title":"Documentation for API Endpoints"},{"location":"libens/#documentation-for-models","text":"CreateSubscriptionRequest DeliveryTarget DeliveryTargetAwsSnsTopic DeliveryTargetAwsSqsQueue DeliveryTargetWorkflowRunLaunch ErrorResponse SortDirection Subscription SubscriptionList SubscriptionListSortFields","title":"Documentation For Models"},{"location":"libens/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libens/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libens/#author","text":"","title":"Author"},{"location":"libens/docs/CreateSubscriptionRequest/","text":"CreateSubscriptionRequest \u00b6 Properties \u00b6 Name Type Description Notes type str Event type which will be subscribed to actions list[str] Actions which will be subscribed to for the event type [optional] name str Name of the subscription description str Optional description for the subscription [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] delivery_target DeliveryTarget [Back to Model list] [Back to API list] [Back to README]","title":"CreateSubscriptionRequest"},{"location":"libens/docs/CreateSubscriptionRequest/#createsubscriptionrequest","text":"","title":"CreateSubscriptionRequest"},{"location":"libens/docs/CreateSubscriptionRequest/#properties","text":"Name Type Description Notes type str Event type which will be subscribed to actions list[str] Actions which will be subscribed to for the event type [optional] name str Name of the subscription description str Optional description for the subscription [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] delivery_target DeliveryTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTarget/","text":"DeliveryTarget \u00b6 Configuration for the action to perform for events matching this subscription; only one delivery type may be specified Properties \u00b6 Name Type Description Notes aws_sns_topic DeliveryTargetAwsSnsTopic [optional] aws_sqs_queue DeliveryTargetAwsSqsQueue [optional] workflow_run_launch DeliveryTargetWorkflowRunLaunch [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTarget"},{"location":"libens/docs/DeliveryTarget/#deliverytarget","text":"Configuration for the action to perform for events matching this subscription; only one delivery type may be specified","title":"DeliveryTarget"},{"location":"libens/docs/DeliveryTarget/#properties","text":"Name Type Description Notes aws_sns_topic DeliveryTargetAwsSnsTopic [optional] aws_sqs_queue DeliveryTargetAwsSqsQueue [optional] workflow_run_launch DeliveryTargetWorkflowRunLaunch [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/","text":"DeliveryTargetAwsSnsTopic \u00b6 Configuration for an AWS SNS delivery topic Properties \u00b6 Name Type Description Notes topic_arn str ARN for the AWS SNS topic [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetAwsSnsTopic"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/#deliverytargetawssnstopic","text":"Configuration for an AWS SNS delivery topic","title":"DeliveryTargetAwsSnsTopic"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/#properties","text":"Name Type Description Notes topic_arn str ARN for the AWS SNS topic [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/","text":"DeliveryTargetAwsSqsQueue \u00b6 Configuration for an AWS SQS delivery queue Properties \u00b6 Name Type Description Notes queue_url str URL for the AWS SQS queue [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetAwsSqsQueue"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/#deliverytargetawssqsqueue","text":"Configuration for an AWS SQS delivery queue","title":"DeliveryTargetAwsSqsQueue"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/#properties","text":"Name Type Description Notes queue_url str URL for the AWS SQS queue [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/","text":"DeliveryTargetWorkflowRunLaunch \u00b6 Configuration for a delivery via WES workflow run launch Properties \u00b6 Name Type Description Notes id str Id of the workflow to launch version str Version of the workflow to launch, for the given id name str Name for the workflowRun input object Arguments for the workflowRun [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetWorkflowRunLaunch"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/#deliverytargetworkflowrunlaunch","text":"Configuration for a delivery via WES workflow run launch","title":"DeliveryTargetWorkflowRunLaunch"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/#properties","text":"Name Type Description Notes id str Id of the workflow to launch version str Version of the workflow to launch, for the given id name str Name for the workflowRun input object Arguments for the workflowRun [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Details for an error which occurred Properties \u00b6 Name Type Description Notes code str Error code which uniquely identifies the type of error which occurred [optional] message str Description of the error which occurred [optional] details list[object] Additional details for conditions which caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libens/docs/ErrorResponse/#errorresponse","text":"Details for an error which occurred","title":"ErrorResponse"},{"location":"libens/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str Error code which uniquely identifies the type of error which occurred [optional] message str Description of the error which occurred [optional] details list[object] Additional details for conditions which caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SortDirection/","text":"SortDirection \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SortDirection"},{"location":"libens/docs/SortDirection/#sortdirection","text":"","title":"SortDirection"},{"location":"libens/docs/SortDirection/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/Subscription/","text":"Subscription \u00b6 Details for an Event Notification Service subscription Properties \u00b6 Name Type Description Notes id str Unique id of the subscription [optional] urn str URN of the subscription [optional] type str Type of event the subscription matches [optional] actions list[str] Types of actions the subscription matches for the event type [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] name str Name of the subscription [optional] description str Optional description for the subscription [optional] delivery_target DeliveryTarget [optional] match_identities list[str] ACL Identities for events the subscription matches [optional] acl list[str] The list of identities that have access to this subscription [optional] tenant_id str Tenant id of the subscription owner [optional] created_by_user_id str User id for the creator of the subscription [optional] time_created datetime Timestamp when the subscription was created [optional] deleted_by_user_id str Id of the user who deleted the subscription, if applicable [optional] time_deleted datetime Timestamp when the subscription was deleted, if applicable [optional] is_deleted bool Whether or not the subscription has been deleted [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Subscription"},{"location":"libens/docs/Subscription/#subscription","text":"Details for an Event Notification Service subscription","title":"Subscription"},{"location":"libens/docs/Subscription/#properties","text":"Name Type Description Notes id str Unique id of the subscription [optional] urn str URN of the subscription [optional] type str Type of event the subscription matches [optional] actions list[str] Types of actions the subscription matches for the event type [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] name str Name of the subscription [optional] description str Optional description for the subscription [optional] delivery_target DeliveryTarget [optional] match_identities list[str] ACL Identities for events the subscription matches [optional] acl list[str] The list of identities that have access to this subscription [optional] tenant_id str Tenant id of the subscription owner [optional] created_by_user_id str User id for the creator of the subscription [optional] time_created datetime Timestamp when the subscription was created [optional] deleted_by_user_id str Id of the user who deleted the subscription, if applicable [optional] time_deleted datetime Timestamp when the subscription was deleted, if applicable [optional] is_deleted bool Whether or not the subscription has been deleted [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionList/","text":"SubscriptionList \u00b6 Properties \u00b6 Name Type Description Notes items list[Subscription] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] sorted_by SubscriptionListSortFields [optional] sort_direction SortDirection [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SubscriptionList"},{"location":"libens/docs/SubscriptionList/#subscriptionlist","text":"","title":"SubscriptionList"},{"location":"libens/docs/SubscriptionList/#properties","text":"Name Type Description Notes items list[Subscription] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] sorted_by SubscriptionListSortFields [optional] sort_direction SortDirection [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionListSortFields/","text":"SubscriptionListSortFields \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SubscriptionListSortFields"},{"location":"libens/docs/SubscriptionListSortFields/#subscriptionlistsortfields","text":"","title":"SubscriptionListSortFields"},{"location":"libens/docs/SubscriptionListSortFields/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionsApi/","text":"libica.openapi.libens.SubscriptionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. list_subscriptions GET /v1/subscriptions Get a list of subscriptions. create_subscription \u00b6 Subscription create_subscription(body=body) Creates a subscription to an event type and defines how those events get delivered. Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateSubscriptionRequest [optional] Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The subscription is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 409 The given delivery target is not valid or cannot be delivered to. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] disable_subscription \u00b6 Subscription disable_subscription(subscription_id) Given a subscription id, disables the specified subscription. Given a subscription id, disables that subscription with the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to be disabled try : # Given a subscription id, disables the specified subscription. api_response = api_instance . disable_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->disable_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes subscription_id str Id of the subscription to be disabled Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscription for the given ID is disabled successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to disable the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_subscription \u00b6 Subscription get_subscription(subscription_id) Given a subscription id, returns information about that subscription. Given a subscription id, returns information about that subscription accessible by the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to return try : # Given a subscription id, returns information about that subscription. api_response = api_instance . get_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->get_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes subscription_id str Id of the subscription to return Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscription for the given ID is found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_subscriptions \u00b6 SubscriptionList list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token) Get a list of subscriptions. Get a list of subscriptions accessible by the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) event_type = 'event_type_example' # str | Optional event type for filtering returned subscriptions (optional) page_size = 56 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) page_token = 'page_token_example' # str | Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. (optional) try : # Get a list of subscriptions. api_response = api_instance . list_subscriptions ( event_type = event_type , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->list_subscriptions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes event_type str Optional event type for filtering returned subscriptions [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] page_token str Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. [optional] Return type \u00b6 SubscriptionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscriptions found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access subscriptions. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libens.SubscriptionsApi"},{"location":"libens/docs/SubscriptionsApi/#libicaopenapilibenssubscriptionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. list_subscriptions GET /v1/subscriptions Get a list of subscriptions.","title":"libica.openapi.libens.SubscriptionsApi"},{"location":"libens/docs/SubscriptionsApi/#create_subscription","text":"Subscription create_subscription(body=body) Creates a subscription to an event type and defines how those events get delivered. Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow.","title":"create_subscription"},{"location":"libens/docs/SubscriptionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters","text":"Name Type Description Notes body CreateSubscriptionRequest [optional]","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details","text":"Status code Description Response headers 201 The subscription is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 409 The given delivery target is not valid or cannot be delivered to. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#disable_subscription","text":"Subscription disable_subscription(subscription_id) Given a subscription id, disables the specified subscription. Given a subscription id, disables that subscription with the current JWT token\u2019s tenant Id.","title":"disable_subscription"},{"location":"libens/docs/SubscriptionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to be disabled try : # Given a subscription id, disables the specified subscription. api_response = api_instance . disable_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->disable_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_1","text":"Name Type Description Notes subscription_id str Id of the subscription to be disabled","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_1","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Subscription for the given ID is disabled successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to disable the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#get_subscription","text":"Subscription get_subscription(subscription_id) Given a subscription id, returns information about that subscription. Given a subscription id, returns information about that subscription accessible by the current JWT token\u2019s tenant Id.","title":"get_subscription"},{"location":"libens/docs/SubscriptionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to return try : # Given a subscription id, returns information about that subscription. api_response = api_instance . get_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->get_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_2","text":"Name Type Description Notes subscription_id str Id of the subscription to return","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_2","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_2","text":"Status code Description Response headers 200 Subscription for the given ID is found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#list_subscriptions","text":"SubscriptionList list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token) Get a list of subscriptions. Get a list of subscriptions accessible by the current JWT token\u2019s tenant Id.","title":"list_subscriptions"},{"location":"libens/docs/SubscriptionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) event_type = 'event_type_example' # str | Optional event type for filtering returned subscriptions (optional) page_size = 56 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) page_token = 'page_token_example' # str | Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. (optional) try : # Get a list of subscriptions. api_response = api_instance . list_subscriptions ( event_type = event_type , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->list_subscriptions: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_3","text":"Name Type Description Notes event_type str Optional event type for filtering returned subscriptions [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] page_token str Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. [optional]","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_3","text":"SubscriptionList","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Subscriptions found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access subscriptions. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/","text":"libica.openapi.libgds \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libgds package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:19.996256+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libgds, you can run the following: from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description FilesApi archive_file POST /v1/files/{fileId}:archive Archive a file FilesApi complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload FilesApi create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload FilesApi delete_file DELETE /v1/files/{fileId} Permanently delete a file FilesApi get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download FilesApi list_files GET /v1/files Get a list of files FilesApi unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file FilesApi update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload FoldersApi archive_folder POST /v1/folders/{folderId}:archive Archive a folder FoldersApi complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS FoldersApi copy_folder POST /v1/folders/{folderId}:copy Copy a folder FoldersApi create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload FoldersApi delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id FoldersApi get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. FoldersApi get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS FoldersApi get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS FoldersApi list_folders GET /v1/folders Get a list of folders FoldersApi unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder FoldersApi update_folder PATCH /v1/folders/{folderId} Update a folder content or acl VolumeConfigurationsApi create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. VolumeConfigurationsApi delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name VolumeConfigurationsApi get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id VolumeConfigurationsApi list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes VolumeConfigurationsApi validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration VolumesApi create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload VolumesApi delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id VolumesApi get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name VolumesApi list_volumes GET /v1/volumes Get a list of volumes Documentation For Models \u00b6 AWSS3ObjectStoreSetting ArchiveStatuses AwsS3PresignedUrlForUpload AwsS3TemporaryUploadCredentials BulkFileUpdateItem BulkFileUpdateRequest BulkFileUpdateResponse BulkFolderUpdateItem BulkFolderUpdateRequest BulkUpdateFailedItem CompleteSessionRequest CreateFileRequest CreateFolderRequest CreateSessionRequest CreateSessionResponse CreateVolumeConfigurationRequest CreateVolumeRequest CreateVolumeResponse ErrorResponse FileArchiveRequest FileArchiveStorageTier FileLifeCycleSettings FileListResponse FileResponse FileStatus FileUnarchiveRequest FileUploadCompleteRequest FileWriteableResponse FolderArchiveRequest FolderArchiveStorageTier FolderCopyOperationParameters FolderCopyRequest FolderDeleteOperationParameters FolderListResponse FolderResponse FolderUnarchiveRequest FolderUpdateRequest FolderWriteableResponse GracePeriodEndAction JobOperationParameters JobOperationType JobProgressStatus JobResponse JobStatus ObjectStoreAccess ObjectStoreSettings PartEtag PartInfo SessionResponse SessionStatus StorageTier UpdateFileRequest UpdateVolumeRequest VolumeConfigurationListResponse VolumeConfigurationOnlineStatus VolumeConfigurationResponse VolumeLifeCycleSettings VolumeListResponse VolumeResponse Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libgds"},{"location":"libgds/#libicaopenapilibgds","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libgds package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:19.996256+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libgds"},{"location":"libgds/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libgds/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libgds/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libgds, you can run the following: from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e )","title":"Getting Started"},{"location":"libgds/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description FilesApi archive_file POST /v1/files/{fileId}:archive Archive a file FilesApi complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload FilesApi create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload FilesApi delete_file DELETE /v1/files/{fileId} Permanently delete a file FilesApi get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download FilesApi list_files GET /v1/files Get a list of files FilesApi unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file FilesApi update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload FoldersApi archive_folder POST /v1/folders/{folderId}:archive Archive a folder FoldersApi complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS FoldersApi copy_folder POST /v1/folders/{folderId}:copy Copy a folder FoldersApi create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload FoldersApi delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id FoldersApi get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. FoldersApi get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS FoldersApi get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS FoldersApi list_folders GET /v1/folders Get a list of folders FoldersApi unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder FoldersApi update_folder PATCH /v1/folders/{folderId} Update a folder content or acl VolumeConfigurationsApi create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. VolumeConfigurationsApi delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name VolumeConfigurationsApi get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id VolumeConfigurationsApi list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes VolumeConfigurationsApi validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration VolumesApi create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload VolumesApi delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id VolumesApi get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name VolumesApi list_volumes GET /v1/volumes Get a list of volumes","title":"Documentation for API Endpoints"},{"location":"libgds/#documentation-for-models","text":"AWSS3ObjectStoreSetting ArchiveStatuses AwsS3PresignedUrlForUpload AwsS3TemporaryUploadCredentials BulkFileUpdateItem BulkFileUpdateRequest BulkFileUpdateResponse BulkFolderUpdateItem BulkFolderUpdateRequest BulkUpdateFailedItem CompleteSessionRequest CreateFileRequest CreateFolderRequest CreateSessionRequest CreateSessionResponse CreateVolumeConfigurationRequest CreateVolumeRequest CreateVolumeResponse ErrorResponse FileArchiveRequest FileArchiveStorageTier FileLifeCycleSettings FileListResponse FileResponse FileStatus FileUnarchiveRequest FileUploadCompleteRequest FileWriteableResponse FolderArchiveRequest FolderArchiveStorageTier FolderCopyOperationParameters FolderCopyRequest FolderDeleteOperationParameters FolderListResponse FolderResponse FolderUnarchiveRequest FolderUpdateRequest FolderWriteableResponse GracePeriodEndAction JobOperationParameters JobOperationType JobProgressStatus JobResponse JobStatus ObjectStoreAccess ObjectStoreSettings PartEtag PartInfo SessionResponse SessionStatus StorageTier UpdateFileRequest UpdateVolumeRequest VolumeConfigurationListResponse VolumeConfigurationOnlineStatus VolumeConfigurationResponse VolumeLifeCycleSettings VolumeListResponse VolumeResponse","title":"Documentation For Models"},{"location":"libgds/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libgds/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libgds/#author","text":"","title":"Author"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/","text":"AWSS3ObjectStoreSetting \u00b6 Properties \u00b6 Name Type Description Notes bucket_name str The bucket name key_prefix str Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AWSS3ObjectStoreSetting"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/#awss3objectstoresetting","text":"","title":"AWSS3ObjectStoreSetting"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/#properties","text":"Name Type Description Notes bucket_name str The bucket name key_prefix str Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ArchiveStatuses/","text":"ArchiveStatuses \u00b6 The valid Archive Status values for files in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ArchiveStatuses"},{"location":"libgds/docs/ArchiveStatuses/#archivestatuses","text":"The valid Archive Status values for files in GDS","title":"ArchiveStatuses"},{"location":"libgds/docs/ArchiveStatuses/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/","text":"AwsS3PresignedUrlForUpload \u00b6 AwsS3PresignedUrlForUpload Properties \u00b6 Name Type Description Notes single_part_url str A single part presigned url for upload [optional] multipart_template str A url template for multi parts presigned url for upload [optional] multipart_signatures list[PartInfo] Multi parts info that needs to be applied to the MultipartTemplate [optional] multipart_upload_id str Multi part upload id [optional] server_side_encryption_algorithm str The server side encryption method used by S3. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. Possible values: 'AES256' and 'aws:kms'. [optional] server_side_encryption_key str Server-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value This is only used when ServerSideEncryptionAlgorithm is 'aws:kms' [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsS3PresignedUrlForUpload"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/#awss3presignedurlforupload","text":"AwsS3PresignedUrlForUpload","title":"AwsS3PresignedUrlForUpload"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/#properties","text":"Name Type Description Notes single_part_url str A single part presigned url for upload [optional] multipart_template str A url template for multi parts presigned url for upload [optional] multipart_signatures list[PartInfo] Multi parts info that needs to be applied to the MultipartTemplate [optional] multipart_upload_id str Multi part upload id [optional] server_side_encryption_algorithm str The server side encryption method used by S3. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. Possible values: 'AES256' and 'aws:kms'. [optional] server_side_encryption_key str Server-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value This is only used when ServerSideEncryptionAlgorithm is 'aws:kms' [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/","text":"AwsS3TemporaryUploadCredentials \u00b6 AwsS3TemporaryUploadCredentials Properties \u00b6 Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3. This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsS3TemporaryUploadCredentials"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/#awss3temporaryuploadcredentials","text":"AwsS3TemporaryUploadCredentials","title":"AwsS3TemporaryUploadCredentials"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/#properties","text":"Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3. This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateItem/","text":"BulkFileUpdateItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of this file [optional] metadata object Metadata about this file and its contents [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateItem"},{"location":"libgds/docs/BulkFileUpdateItem/#bulkfileupdateitem","text":"","title":"BulkFileUpdateItem"},{"location":"libgds/docs/BulkFileUpdateItem/#properties","text":"Name Type Description Notes id str Id of this file [optional] metadata object Metadata about this file and its contents [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateRequest/","text":"BulkFileUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes items list[BulkFileUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateRequest"},{"location":"libgds/docs/BulkFileUpdateRequest/#bulkfileupdaterequest","text":"","title":"BulkFileUpdateRequest"},{"location":"libgds/docs/BulkFileUpdateRequest/#properties","text":"Name Type Description Notes items list[BulkFileUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateResponse/","text":"BulkFileUpdateResponse \u00b6 Properties \u00b6 Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateResponse"},{"location":"libgds/docs/BulkFileUpdateResponse/#bulkfileupdateresponse","text":"","title":"BulkFileUpdateResponse"},{"location":"libgds/docs/BulkFileUpdateResponse/#properties","text":"Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFolderUpdateItem/","text":"BulkFolderUpdateItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of this folder [optional] metadata object Metadata about this folder and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFolderUpdateItem"},{"location":"libgds/docs/BulkFolderUpdateItem/#bulkfolderupdateitem","text":"","title":"BulkFolderUpdateItem"},{"location":"libgds/docs/BulkFolderUpdateItem/#properties","text":"Name Type Description Notes id str Id of this folder [optional] metadata object Metadata about this folder and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFolderUpdateRequest/","text":"BulkFolderUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes items list[BulkFolderUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFolderUpdateRequest"},{"location":"libgds/docs/BulkFolderUpdateRequest/#bulkfolderupdaterequest","text":"","title":"BulkFolderUpdateRequest"},{"location":"libgds/docs/BulkFolderUpdateRequest/#properties","text":"Name Type Description Notes items list[BulkFolderUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkUpdateFailedItem/","text":"BulkUpdateFailedItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of resource that failed to be updated [optional] error_response ErrorResponse [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkUpdateFailedItem"},{"location":"libgds/docs/BulkUpdateFailedItem/#bulkupdatefaileditem","text":"","title":"BulkUpdateFailedItem"},{"location":"libgds/docs/BulkUpdateFailedItem/#properties","text":"Name Type Description Notes id str Id of resource that failed to be updated [optional] error_response ErrorResponse [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CompleteSessionRequest/","text":"CompleteSessionRequest \u00b6 Properties \u00b6 Name Type Description Notes expected_session_file_count int User-defined count used for reconciling files uploaded when closing the session [Back to Model list] [Back to API list] [Back to README]","title":"CompleteSessionRequest"},{"location":"libgds/docs/CompleteSessionRequest/#completesessionrequest","text":"","title":"CompleteSessionRequest"},{"location":"libgds/docs/CompleteSessionRequest/#properties","text":"Name Type Description Notes expected_session_file_count int User-defined count used for reconciling files uploaded when closing the session [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateFileRequest/","text":"CreateFileRequest \u00b6 CreateFileRequest Model Properties \u00b6 Name Type Description Notes name str Name of the file to be uploaded, case sensitive. volume_id str Volume ID to which the file will be uploaded [optional] folder_path str Optional folder path where the file will be uploaded to [optional] type str Optional file content type, e.g. text/plain, application/json [optional] volume_name str Name of the Volume [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateFileRequest"},{"location":"libgds/docs/CreateFileRequest/#createfilerequest","text":"CreateFileRequest Model","title":"CreateFileRequest"},{"location":"libgds/docs/CreateFileRequest/#properties","text":"Name Type Description Notes name str Name of the file to be uploaded, case sensitive. volume_id str Volume ID to which the file will be uploaded [optional] folder_path str Optional folder path where the file will be uploaded to [optional] type str Optional file content type, e.g. text/plain, application/json [optional] volume_name str Name of the Volume [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateFolderRequest/","text":"CreateFolderRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Folder name, unique to this path, for the folder being created folder_path str Path from the root folder to the location for the folder being created; must start and end with '/' [optional] volume_id str The unique identifier for this Folder's Volume [optional] volume_name str The unique name for the Folder's Volume [optional] metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateFolderRequest"},{"location":"libgds/docs/CreateFolderRequest/#createfolderrequest","text":"","title":"CreateFolderRequest"},{"location":"libgds/docs/CreateFolderRequest/#properties","text":"Name Type Description Notes name str Folder name, unique to this path, for the folder being created folder_path str Path from the root folder to the location for the folder being created; must start and end with '/' [optional] volume_id str The unique identifier for this Folder's Volume [optional] volume_name str The unique name for the Folder's Volume [optional] metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateSessionRequest/","text":"CreateSessionRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this session and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateSessionRequest"},{"location":"libgds/docs/CreateSessionRequest/#createsessionrequest","text":"","title":"CreateSessionRequest"},{"location":"libgds/docs/CreateSessionRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this session and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateSessionResponse/","text":"CreateSessionResponse \u00b6 Properties \u00b6 Name Type Description Notes object_store_access ObjectStoreAccess [optional] id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateSessionResponse"},{"location":"libgds/docs/CreateSessionResponse/#createsessionresponse","text":"","title":"CreateSessionResponse"},{"location":"libgds/docs/CreateSessionResponse/#properties","text":"Name Type Description Notes object_store_access ObjectStoreAccess [optional] id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/","text":"CreateVolumeConfigurationRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume configuration object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeConfigurationRequest"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/#createvolumeconfigurationrequest","text":"","title":"CreateVolumeConfigurationRequest"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/#properties","text":"Name Type Description Notes name str Name for the volume configuration object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeRequest/","text":"CreateVolumeRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume volume_configuration_name str Unique name of the volume configuration to use [optional] root_key_prefix str The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used. If provided, it must start with the VolumeConfiguration's keyprefix and end with a /. To create a volume representing the root of a bucket, use the value '/'. [optional] metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeRequest"},{"location":"libgds/docs/CreateVolumeRequest/#createvolumerequest","text":"","title":"CreateVolumeRequest"},{"location":"libgds/docs/CreateVolumeRequest/#properties","text":"Name Type Description Notes name str Name for the volume volume_configuration_name str Unique name of the volume configuration to use [optional] root_key_prefix str The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used. If provided, it must start with the VolumeConfiguration's keyprefix and end with a /. To create a volume representing the root of a bucket, use the value '/'. [optional] metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeResponse/","text":"CreateVolumeResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] import_session_id str Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom Volume configurations. [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeResponse"},{"location":"libgds/docs/CreateVolumeResponse/#createvolumeresponse","text":"","title":"CreateVolumeResponse"},{"location":"libgds/docs/CreateVolumeResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] import_session_id str Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom Volume configurations. [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str Error code that uniquely identifies the type of error that occurred [optional] message str Description of the error that occurred [optional] details list[object] Additional details for conditions that caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libgds/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libgds/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str Error code that uniquely identifies the type of error that occurred [optional] message str Description of the error that occurred [optional] details list[object] Additional details for conditions that caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileArchiveRequest/","text":"FileArchiveRequest \u00b6 FileArchiveRequest to specify the Storage Tier Properties \u00b6 Name Type Description Notes storage_tier FileArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"FileArchiveRequest"},{"location":"libgds/docs/FileArchiveRequest/#filearchiverequest","text":"FileArchiveRequest to specify the Storage Tier","title":"FileArchiveRequest"},{"location":"libgds/docs/FileArchiveRequest/#properties","text":"Name Type Description Notes storage_tier FileArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileArchiveStorageTier/","text":"FileArchiveStorageTier \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FileArchiveStorageTier"},{"location":"libgds/docs/FileArchiveStorageTier/#filearchivestoragetier","text":"","title":"FileArchiveStorageTier"},{"location":"libgds/docs/FileArchiveStorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileLifeCycleSettings/","text":"FileLifeCycleSettings \u00b6 Properties \u00b6 Name Type Description Notes time_grace_period_ends datetime If set, date when billing for the file will start [optional] time_to_be_archived datetime If set, date when file will be archived [optional] time_to_be_deleted datetime If set, date when file will be deleted [optional] archive_storage_tier FileArchiveStorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileLifeCycleSettings"},{"location":"libgds/docs/FileLifeCycleSettings/#filelifecyclesettings","text":"","title":"FileLifeCycleSettings"},{"location":"libgds/docs/FileLifeCycleSettings/#properties","text":"Name Type Description Notes time_grace_period_ends datetime If set, date when billing for the file will start [optional] time_to_be_archived datetime If set, date when file will be archived [optional] time_to_be_deleted datetime If set, date when file will be deleted [optional] archive_storage_tier FileArchiveStorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileListResponse/","text":"FileListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[FileResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileListResponse"},{"location":"libgds/docs/FileListResponse/#filelistresponse","text":"","title":"FileListResponse"},{"location":"libgds/docs/FileListResponse/#properties","text":"Name Type Description Notes items list[FileResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileResponse/","text":"FileResponse \u00b6 Properties \u00b6 Name Type Description Notes volume_metadata object Metadata about this file's volume [optional] id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] presigned_url str The presigned Url allowing access to this File [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileResponse"},{"location":"libgds/docs/FileResponse/#fileresponse","text":"","title":"FileResponse"},{"location":"libgds/docs/FileResponse/#properties","text":"Name Type Description Notes volume_metadata object Metadata about this file's volume [optional] id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] presigned_url str The presigned Url allowing access to this File [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileStatus/","text":"FileStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FileStatus"},{"location":"libgds/docs/FileStatus/#filestatus","text":"","title":"FileStatus"},{"location":"libgds/docs/FileStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileUnarchiveRequest/","text":"FileUnarchiveRequest \u00b6 FileUnarchiveRequest to specify the RestoreSpeed Properties \u00b6 Name Type Description Notes restore_speed str The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"FileUnarchiveRequest"},{"location":"libgds/docs/FileUnarchiveRequest/#fileunarchiverequest","text":"FileUnarchiveRequest to specify the RestoreSpeed","title":"FileUnarchiveRequest"},{"location":"libgds/docs/FileUnarchiveRequest/#properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileUploadCompleteRequest/","text":"FileUploadCompleteRequest \u00b6 FileUploadCompleteRequest Properties \u00b6 Name Type Description Notes multipart_upload_id str The multipart upload id used by the object store [optional] part_etags list[PartEtag] etags for each uploaded part (optional for files that uses multipart upload) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileUploadCompleteRequest"},{"location":"libgds/docs/FileUploadCompleteRequest/#fileuploadcompleterequest","text":"FileUploadCompleteRequest","title":"FileUploadCompleteRequest"},{"location":"libgds/docs/FileUploadCompleteRequest/#properties","text":"Name Type Description Notes multipart_upload_id str The multipart upload id used by the object store [optional] part_etags list[PartEtag] etags for each uploaded part (optional for files that uses multipart upload) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileWriteableResponse/","text":"FileWriteableResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileWriteableResponse"},{"location":"libgds/docs/FileWriteableResponse/#filewriteableresponse","text":"","title":"FileWriteableResponse"},{"location":"libgds/docs/FileWriteableResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FilesApi/","text":"libica.openapi.libgds.FilesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_file POST /v1/files/{fileId}:archive Archive a file complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload delete_file DELETE /v1/files/{fileId} Permanently delete a file get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download list_files GET /v1/files Get a list of files unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload archive_file \u00b6 FileResponse archive_file(file_id, body) Archive a file Archives a file to a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be archived. body FileArchiveRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_file_upload \u00b6 FileResponse complete_file_upload(file_id, body) Complete a file Upload Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file upload to be completed. body = libica . openapi . libgds . FileUploadCompleteRequest () # FileUploadCompleteRequest | try : # Complete a file Upload api_response = api_instance . complete_file_upload ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->complete_file_upload: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file upload to be completed. body FileUploadCompleteRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_file \u00b6 FileWriteableResponse create_file(body, include=include, upload_part_count=upload_part_count) Create a file entry in GDS and get temporary credentials for upload Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) body = libica . openapi . libgds . CreateFileRequest () # CreateFileRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) try : # Create a file entry in GDS and get temporary credentials for upload api_response = api_instance . create_file ( body , include = include , upload_part_count = upload_part_count ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->create_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateFileRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] Return type \u00b6 FileWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new File. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new File doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_file \u00b6 delete_file(file_id) Permanently delete a file Permanently delete a file entry and its underlying content Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to delete. try : # Permanently delete a file api_instance . delete_file ( file_id ) except ApiException as e : print ( \"Exception when calling FilesApi->delete_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to delete. Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : text/plain, application/json, text/json HTTP response details \u00b6 Status code Description Response headers 204 No Content. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_file \u00b6 FileResponse get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get details about a file, including a pre-signed URL for download Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get details about a file, including a pre-signed URL for download api_response = api_instance . get_file ( file_id , tenant_id = tenant_id , presigned_url_mode = presigned_url_mode , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->get_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_files \u00b6 FileListResponse list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of files Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) is_uploaded = True # bool | Optional field to filter by Uploaded files (optional) archive_status = 'archive_status_example' # str | Optional field that specifies comma-separated Archive Statuses to include in the list (optional) recursive = True # bool | Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of files api_response = api_instance . list_files ( volume_id = volume_id , volume_name = volume_name , path = path , is_uploaded = is_uploaded , archive_status = archive_status , recursive = recursive , presigned_url_mode = presigned_url_mode , include = include , page_size = page_size , page_token = page_token , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->list_files: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] is_uploaded bool Optional field to filter by Uploaded files [optional] archive_status str Optional field that specifies comma-separated Archive Statuses to include in the list [optional] recursive bool Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FileListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unarchive_file \u00b6 FileResponse unarchive_file(file_id, body) Unarchive a file Unarchive a file from a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be unarchived. body = libica . openapi . libgds . FileUnarchiveRequest () # FileUnarchiveRequest | try : # Unarchive a file api_response = api_instance . unarchive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->unarchive_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be unarchived. body FileUnarchiveRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_file \u00b6 FileWriteableResponse update_file(file_id, include=include, upload_part_count=upload_part_count, body=body) Update a file entry in GDS and get temporary credentials for upload Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) body = libica . openapi . libgds . UpdateFileRequest () # UpdateFileRequest | (optional) try : # Update a file entry in GDS and get temporary credentials for upload api_response = api_instance . update_file ( file_id , include = include , upload_part_count = upload_part_count , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->update_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] body UpdateFileRequest [optional] Return type \u00b6 FileWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.FilesApi"},{"location":"libgds/docs/FilesApi/#libicaopenapilibgdsfilesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_file POST /v1/files/{fileId}:archive Archive a file complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload delete_file DELETE /v1/files/{fileId} Permanently delete a file get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download list_files GET /v1/files Get a list of files unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload","title":"libica.openapi.libgds.FilesApi"},{"location":"libgds/docs/FilesApi/#archive_file","text":"FileResponse archive_file(file_id, body) Archive a file Archives a file to a lower storage cost tier.","title":"archive_file"},{"location":"libgds/docs/FilesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to be archived. body FileArchiveRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#complete_file_upload","text":"FileResponse complete_file_upload(file_id, body) Complete a file Upload Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file.","title":"complete_file_upload"},{"location":"libgds/docs/FilesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file upload to be completed. body = libica . openapi . libgds . FileUploadCompleteRequest () # FileUploadCompleteRequest | try : # Complete a file Upload api_response = api_instance . complete_file_upload ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->complete_file_upload: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_1","text":"Name Type Description Notes file_id str Unique identifier for the file upload to be completed. body FileUploadCompleteRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_1","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_1","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_1","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#create_file","text":"FileWriteableResponse create_file(body, include=include, upload_part_count=upload_part_count) Create a file entry in GDS and get temporary credentials for upload Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically.","title":"create_file"},{"location":"libgds/docs/FilesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) body = libica . openapi . libgds . CreateFileRequest () # CreateFileRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) try : # Create a file entry in GDS and get temporary credentials for upload api_response = api_instance . create_file ( body , include = include , upload_part_count = upload_part_count ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->create_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_2","text":"Name Type Description Notes body CreateFileRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_2","text":"FileWriteableResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_2","text":"Status code Description Response headers 201 Created new File. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new File doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#delete_file","text":"delete_file(file_id) Permanently delete a file Permanently delete a file entry and its underlying content","title":"delete_file"},{"location":"libgds/docs/FilesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to delete. try : # Permanently delete a file api_instance . delete_file ( file_id ) except ApiException as e : print ( \"Exception when calling FilesApi->delete_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_3","text":"Name Type Description Notes file_id str Unique identifier for the file to delete.","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : text/plain, application/json, text/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_3","text":"Status code Description Response headers 204 No Content. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#get_file","text":"FileResponse get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get details about a file, including a pre-signed URL for download Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3.","title":"get_file"},{"location":"libgds/docs/FilesApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get details about a file, including a pre-signed URL for download api_response = api_instance . get_file ( file_id , tenant_id = tenant_id , presigned_url_mode = presigned_url_mode , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->get_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_4","text":"Name Type Description Notes file_id str Unique identifier for the file to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_4","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_4","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#list_files","text":"FileListResponse list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of files Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items","title":"list_files"},{"location":"libgds/docs/FilesApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) is_uploaded = True # bool | Optional field to filter by Uploaded files (optional) archive_status = 'archive_status_example' # str | Optional field that specifies comma-separated Archive Statuses to include in the list (optional) recursive = True # bool | Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of files api_response = api_instance . list_files ( volume_id = volume_id , volume_name = volume_name , path = path , is_uploaded = is_uploaded , archive_status = archive_status , recursive = recursive , presigned_url_mode = presigned_url_mode , include = include , page_size = page_size , page_token = page_token , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->list_files: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_5","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] is_uploaded bool Optional field to filter by Uploaded files [optional] archive_status str Optional field that specifies comma-separated Archive Statuses to include in the list [optional] recursive bool Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_5","text":"FileListResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_5","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#unarchive_file","text":"FileResponse unarchive_file(file_id, body) Unarchive a file Unarchive a file from a lower storage cost tier.","title":"unarchive_file"},{"location":"libgds/docs/FilesApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be unarchived. body = libica . openapi . libgds . FileUnarchiveRequest () # FileUnarchiveRequest | try : # Unarchive a file api_response = api_instance . unarchive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->unarchive_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_6","text":"Name Type Description Notes file_id str Unique identifier for the file to be unarchived. body FileUnarchiveRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_6","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_6","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_6","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#update_file","text":"FileWriteableResponse update_file(file_id, include=include, upload_part_count=upload_part_count, body=body) Update a file entry in GDS and get temporary credentials for upload Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content.","title":"update_file"},{"location":"libgds/docs/FilesApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) body = libica . openapi . libgds . UpdateFileRequest () # UpdateFileRequest | (optional) try : # Update a file entry in GDS and get temporary credentials for upload api_response = api_instance . update_file ( file_id , include = include , upload_part_count = upload_part_count , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->update_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_7","text":"Name Type Description Notes file_id str Unique identifier for the file to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] body UpdateFileRequest [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_7","text":"FileWriteableResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_7","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FolderArchiveRequest/","text":"FolderArchiveRequest \u00b6 FolderArchiveRequest to specify the Storage Tier Properties \u00b6 Name Type Description Notes storage_tier FolderArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"FolderArchiveRequest"},{"location":"libgds/docs/FolderArchiveRequest/#folderarchiverequest","text":"FolderArchiveRequest to specify the Storage Tier","title":"FolderArchiveRequest"},{"location":"libgds/docs/FolderArchiveRequest/#properties","text":"Name Type Description Notes storage_tier FolderArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderArchiveStorageTier/","text":"FolderArchiveStorageTier \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FolderArchiveStorageTier"},{"location":"libgds/docs/FolderArchiveStorageTier/#folderarchivestoragetier","text":"","title":"FolderArchiveStorageTier"},{"location":"libgds/docs/FolderArchiveStorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderCopyOperationParameters/","text":"FolderCopyOperationParameters \u00b6 Operation parameters for folder copy operations Properties \u00b6 Name Type Description Notes source_folder_urn str The Urn of the source folder for the copy operation [optional] target_folder_urn str The Urn of the target folder for the copy operation [optional] destination_folder_name str The folder name for the copied folder [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderCopyOperationParameters"},{"location":"libgds/docs/FolderCopyOperationParameters/#foldercopyoperationparameters","text":"Operation parameters for folder copy operations","title":"FolderCopyOperationParameters"},{"location":"libgds/docs/FolderCopyOperationParameters/#properties","text":"Name Type Description Notes source_folder_urn str The Urn of the source folder for the copy operation [optional] target_folder_urn str The Urn of the target folder for the copy operation [optional] destination_folder_name str The folder name for the copied folder [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderCopyRequest/","text":"FolderCopyRequest \u00b6 Properties \u00b6 Name Type Description Notes target_parent_folder_id str The parent folder into which the source folder will be copied. destination_folder_name str A new name for the destination folder. Required if target parent folder is the same as the destination folder. When optional and not provided, the source folder name is used as the destination folder name. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderCopyRequest"},{"location":"libgds/docs/FolderCopyRequest/#foldercopyrequest","text":"","title":"FolderCopyRequest"},{"location":"libgds/docs/FolderCopyRequest/#properties","text":"Name Type Description Notes target_parent_folder_id str The parent folder into which the source folder will be copied. destination_folder_name str A new name for the destination folder. Required if target parent folder is the same as the destination folder. When optional and not provided, the source folder name is used as the destination folder name. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderDeleteOperationParameters/","text":"FolderDeleteOperationParameters \u00b6 Operation parameters for folder delete operations Properties \u00b6 Name Type Description Notes folder_urn str The Urn of the folder for the delete operation [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderDeleteOperationParameters"},{"location":"libgds/docs/FolderDeleteOperationParameters/#folderdeleteoperationparameters","text":"Operation parameters for folder delete operations","title":"FolderDeleteOperationParameters"},{"location":"libgds/docs/FolderDeleteOperationParameters/#properties","text":"Name Type Description Notes folder_urn str The Urn of the folder for the delete operation [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderListResponse/","text":"FolderListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[FolderResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderListResponse"},{"location":"libgds/docs/FolderListResponse/#folderlistresponse","text":"","title":"FolderListResponse"},{"location":"libgds/docs/FolderListResponse/#properties","text":"Name Type Description Notes items list[FolderResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderResponse/","text":"FolderResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderResponse"},{"location":"libgds/docs/FolderResponse/#folderresponse","text":"","title":"FolderResponse"},{"location":"libgds/docs/FolderResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderUnarchiveRequest/","text":"FolderUnarchiveRequest \u00b6 Properties \u00b6 Name Type Description Notes restore_speed str The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"FolderUnarchiveRequest"},{"location":"libgds/docs/FolderUnarchiveRequest/#folderunarchiverequest","text":"","title":"FolderUnarchiveRequest"},{"location":"libgds/docs/FolderUnarchiveRequest/#properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderUpdateRequest/","text":"FolderUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderUpdateRequest"},{"location":"libgds/docs/FolderUpdateRequest/#folderupdaterequest","text":"","title":"FolderUpdateRequest"},{"location":"libgds/docs/FolderUpdateRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderWriteableResponse/","text":"FolderWriteableResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderWriteableResponse"},{"location":"libgds/docs/FolderWriteableResponse/#folderwriteableresponse","text":"","title":"FolderWriteableResponse"},{"location":"libgds/docs/FolderWriteableResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FoldersApi/","text":"libica.openapi.libgds.FoldersApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_folder POST /v1/folders/{folderId}:archive Archive a folder complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS copy_folder POST /v1/folders/{folderId}:copy Copy a folder create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS list_folders GET /v1/folders Get a list of folders unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder update_folder PATCH /v1/folders/{folderId} Update a folder content or acl archive_folder \u00b6 FolderResponse archive_folder(folder_id, body) Archive a folder Archives a folder to a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be archived. body = libica . openapi . libgds . FolderArchiveRequest () # FolderArchiveRequest | try : # Archive a folder api_response = api_instance . archive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->archive_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be archived. body FolderArchiveRequest Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_folder_session \u00b6 SessionResponse complete_folder_session(folder_id, session_id, body) Complete a folder upload in GDS Complete a folder upload in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session body = libica . openapi . libgds . CompleteSessionRequest () # CompleteSessionRequest | The request body try : # Complete a folder upload in GDS api_response = api_instance . complete_folder_session ( folder_id , session_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->complete_folder_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session body CompleteSessionRequest The request body Return type \u00b6 SessionResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Completed upload session. - 202 Upload session in progress. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] copy_folder \u00b6 JobResponse copy_folder(folder_id, body, tenant_id=tenant_id) Copy a folder Copy a folder into a target parent folder Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be copied. body = libica . openapi . libgds . FolderCopyRequest () # FolderCopyRequest | tenant_id = 'tenant_id_example' # str | Optional parameter to copy from a shared folder in another tenant (optional) try : # Copy a folder api_response = api_instance . copy_folder ( folder_id , body , tenant_id = tenant_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->copy_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be copied. body FolderCopyRequest tenant_id str Optional parameter to copy from a shared folder in another tenant [optional] Return type \u00b6 JobResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_folder \u00b6 FolderWriteableResponse create_folder(body, include=include) Create a folder in GDS and receive credentials for upload Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) body = libica . openapi . libgds . CreateFolderRequest () # CreateFolderRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a folder in GDS and receive credentials for upload api_response = api_instance . create_folder ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->create_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateFolderRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] Return type \u00b6 FolderWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Folder. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Folder doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_folder \u00b6 FolderResponse delete_folder(folder_id) Deletes a folder by id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be deleted. try : # Deletes a folder by id api_response = api_instance . delete_folder ( folder_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->delete_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be deleted. Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder \u00b6 FolderResponse get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information about a folder in GDS. Get information for the specified folder ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information about a folder in GDS. api_response = api_instance . get_folder ( folder_id , tenant_id = tenant_id , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder_job \u00b6 JobResponse get_folder_job(folder_id, job_id) Get status of a folder job in GDS Get status of a folder job in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the job. job_id = 'job_id_example' # str | The id of the job try : # Get status of a folder job in GDS api_response = api_instance . get_folder_job ( folder_id , job_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_job: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the job. job_id str The id of the job Return type \u00b6 JobResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returned job. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder_session \u00b6 SessionResponse get_folder_session(folder_id, session_id) Get status of a folder upload in GDS Get status of a folder upload in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session try : # Get status of a folder upload in GDS api_response = api_instance . get_folder_session ( folder_id , session_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session Return type \u00b6 SessionResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Completed upload session. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_folders \u00b6 FolderListResponse list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of folders Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) job_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional) acls = [ 'acls_example' ] # list[str] | Optional field that specifies comma-separated acls to include in the list (optional) recursive = True # bool | Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of folders api_response = api_instance . list_folders ( volume_id = volume_id , volume_name = volume_name , path = path , job_statuses = job_statuses , acls = acls , recursive = recursive , page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->list_folders: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] acls list[str] Optional field that specifies comma-separated acls to include in the list [optional] recursive bool Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FolderListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unarchive_folder \u00b6 FolderResponse unarchive_folder(folder_id, body) Unarchive a folder Unarchive a folder from a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be unarchived. body = libica . openapi . libgds . FolderUnarchiveRequest () # FolderUnarchiveRequest | try : # Unarchive a folder api_response = api_instance . unarchive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->unarchive_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be unarchived. body FolderUnarchiveRequest Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_folder \u00b6 FolderWriteableResponse update_folder(folder_id, include=include, body=body) Update a folder content or acl Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time. Optionally overwrite the acl for this folder if acl is provided in the request. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) body = libica . openapi . libgds . FolderUpdateRequest () # FolderUpdateRequest | (optional) try : # Update a folder content or acl api_response = api_instance . update_folder ( folder_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->update_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] body FolderUpdateRequest [optional] Return type \u00b6 FolderWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.FoldersApi"},{"location":"libgds/docs/FoldersApi/#libicaopenapilibgdsfoldersapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_folder POST /v1/folders/{folderId}:archive Archive a folder complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS copy_folder POST /v1/folders/{folderId}:copy Copy a folder create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS list_folders GET /v1/folders Get a list of folders unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder update_folder PATCH /v1/folders/{folderId} Update a folder content or acl","title":"libica.openapi.libgds.FoldersApi"},{"location":"libgds/docs/FoldersApi/#archive_folder","text":"FolderResponse archive_folder(folder_id, body) Archive a folder Archives a folder to a lower storage cost tier.","title":"archive_folder"},{"location":"libgds/docs/FoldersApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be archived. body = libica . openapi . libgds . FolderArchiveRequest () # FolderArchiveRequest | try : # Archive a folder api_response = api_instance . archive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->archive_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be archived. body FolderArchiveRequest","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details","text":"Status code Description Response headers 202 Accepted. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#complete_folder_session","text":"SessionResponse complete_folder_session(folder_id, session_id, body) Complete a folder upload in GDS Complete a folder upload in GDS.","title":"complete_folder_session"},{"location":"libgds/docs/FoldersApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session body = libica . openapi . libgds . CompleteSessionRequest () # CompleteSessionRequest | The request body try : # Complete a folder upload in GDS api_response = api_instance . complete_folder_session ( folder_id , session_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->complete_folder_session: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_1","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session body CompleteSessionRequest The request body","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_1","text":"SessionResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_1","text":"Status code Description Response headers 200 Completed upload session. - 202 Upload session in progress. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#copy_folder","text":"JobResponse copy_folder(folder_id, body, tenant_id=tenant_id) Copy a folder Copy a folder into a target parent folder","title":"copy_folder"},{"location":"libgds/docs/FoldersApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be copied. body = libica . openapi . libgds . FolderCopyRequest () # FolderCopyRequest | tenant_id = 'tenant_id_example' # str | Optional parameter to copy from a shared folder in another tenant (optional) try : # Copy a folder api_response = api_instance . copy_folder ( folder_id , body , tenant_id = tenant_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->copy_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_2","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be copied. body FolderCopyRequest tenant_id str Optional parameter to copy from a shared folder in another tenant [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_2","text":"JobResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_2","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#create_folder","text":"FolderWriteableResponse create_folder(body, include=include) Create a folder in GDS and receive credentials for upload Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.","title":"create_folder"},{"location":"libgds/docs/FoldersApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) body = libica . openapi . libgds . CreateFolderRequest () # CreateFolderRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a folder in GDS and receive credentials for upload api_response = api_instance . create_folder ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->create_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_3","text":"Name Type Description Notes body CreateFolderRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_3","text":"FolderWriteableResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_3","text":"Status code Description Response headers 201 Created new Folder. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Folder doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#delete_folder","text":"FolderResponse delete_folder(folder_id) Deletes a folder by id","title":"delete_folder"},{"location":"libgds/docs/FoldersApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be deleted. try : # Deletes a folder by id api_response = api_instance . delete_folder ( folder_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->delete_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_4","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be deleted.","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_4","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_4","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder","text":"FolderResponse get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information about a folder in GDS. Get information for the specified folder ID.","title":"get_folder"},{"location":"libgds/docs/FoldersApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information about a folder in GDS. api_response = api_instance . get_folder ( folder_id , tenant_id = tenant_id , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_5","text":"Name Type Description Notes folder_id str Unique identifier for the folder to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_5","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_5","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder_job","text":"JobResponse get_folder_job(folder_id, job_id) Get status of a folder job in GDS Get status of a folder job in GDS.","title":"get_folder_job"},{"location":"libgds/docs/FoldersApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the job. job_id = 'job_id_example' # str | The id of the job try : # Get status of a folder job in GDS api_response = api_instance . get_folder_job ( folder_id , job_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_job: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_6","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the job. job_id str The id of the job","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_6","text":"JobResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_6","text":"Status code Description Response headers 200 Returned job. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder_session","text":"SessionResponse get_folder_session(folder_id, session_id) Get status of a folder upload in GDS Get status of a folder upload in GDS.","title":"get_folder_session"},{"location":"libgds/docs/FoldersApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session try : # Get status of a folder upload in GDS api_response = api_instance . get_folder_session ( folder_id , session_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_session: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_7","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_7","text":"SessionResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_7","text":"Status code Description Response headers 200 Completed upload session. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#list_folders","text":"FolderListResponse list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of folders Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items","title":"list_folders"},{"location":"libgds/docs/FoldersApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) job_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional) acls = [ 'acls_example' ] # list[str] | Optional field that specifies comma-separated acls to include in the list (optional) recursive = True # bool | Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of folders api_response = api_instance . list_folders ( volume_id = volume_id , volume_name = volume_name , path = path , job_statuses = job_statuses , acls = acls , recursive = recursive , page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->list_folders: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_8","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] acls list[str] Optional field that specifies comma-separated acls to include in the list [optional] recursive bool Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_8","text":"FolderListResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_8","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#unarchive_folder","text":"FolderResponse unarchive_folder(folder_id, body) Unarchive a folder Unarchive a folder from a lower storage cost tier.","title":"unarchive_folder"},{"location":"libgds/docs/FoldersApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be unarchived. body = libica . openapi . libgds . FolderUnarchiveRequest () # FolderUnarchiveRequest | try : # Unarchive a folder api_response = api_instance . unarchive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->unarchive_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_9","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be unarchived. body FolderUnarchiveRequest","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_9","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_9","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_9","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#update_folder","text":"FolderWriteableResponse update_folder(folder_id, include=include, body=body) Update a folder content or acl Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time. Optionally overwrite the acl for this folder if acl is provided in the request.","title":"update_folder"},{"location":"libgds/docs/FoldersApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) body = libica . openapi . libgds . FolderUpdateRequest () # FolderUpdateRequest | (optional) try : # Update a folder content or acl api_response = api_instance . update_folder ( folder_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->update_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_10","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] body FolderUpdateRequest [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_10","text":"FolderWriteableResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_10","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_10","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/GracePeriodEndAction/","text":"GracePeriodEndAction \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GracePeriodEndAction"},{"location":"libgds/docs/GracePeriodEndAction/#graceperiodendaction","text":"","title":"GracePeriodEndAction"},{"location":"libgds/docs/GracePeriodEndAction/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobOperationParameters/","text":"JobOperationParameters \u00b6 Container for XXXOperationParameters objects, which have additional details related to the specific job operation type. Only one object will be populated. Properties \u00b6 Name Type Description Notes folder_copy FolderCopyOperationParameters [optional] folder_delete FolderDeleteOperationParameters [optional] [Back to Model list] [Back to API list] [Back to README]","title":"JobOperationParameters"},{"location":"libgds/docs/JobOperationParameters/#joboperationparameters","text":"Container for XXXOperationParameters objects, which have additional details related to the specific job operation type. Only one object will be populated.","title":"JobOperationParameters"},{"location":"libgds/docs/JobOperationParameters/#properties","text":"Name Type Description Notes folder_copy FolderCopyOperationParameters [optional] folder_delete FolderDeleteOperationParameters [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobOperationType/","text":"JobOperationType \u00b6 The valid job operation type values for resources in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobOperationType"},{"location":"libgds/docs/JobOperationType/#joboperationtype","text":"The valid job operation type values for resources in GDS","title":"JobOperationType"},{"location":"libgds/docs/JobOperationType/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobProgressStatus/","text":"JobProgressStatus \u00b6 The valid Job Status values for folders in GDS. Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobProgressStatus"},{"location":"libgds/docs/JobProgressStatus/#jobprogressstatus","text":"The valid Job Status values for folders in GDS.","title":"JobProgressStatus"},{"location":"libgds/docs/JobProgressStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobResponse/","text":"JobResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Job [optional] parent_folder_urn str The Universal Resource Name of the parent folder associated with the Job [optional] operation_type JobOperationType [optional] operation_parameters JobOperationParameters [optional] progress_status JobProgressStatus [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Job [optional] time_modified datetime The date & time this Job was updated, in GDS [optional] time_completed datetime The date & time this Job was completed, in GDS [optional] [Back to Model list] [Back to API list] [Back to README]","title":"JobResponse"},{"location":"libgds/docs/JobResponse/#jobresponse","text":"","title":"JobResponse"},{"location":"libgds/docs/JobResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Job [optional] parent_folder_urn str The Universal Resource Name of the parent folder associated with the Job [optional] operation_type JobOperationType [optional] operation_parameters JobOperationParameters [optional] progress_status JobProgressStatus [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Job [optional] time_modified datetime The date & time this Job was updated, in GDS [optional] time_completed datetime The date & time this Job was completed, in GDS [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobStatus/","text":"JobStatus \u00b6 This enum was originally created to store the type of job on a folder or file entity. The Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType and Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job. Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobStatus"},{"location":"libgds/docs/JobStatus/#jobstatus","text":"This enum was originally created to store the type of job on a folder or file entity. The Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType and Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job.","title":"JobStatus"},{"location":"libgds/docs/JobStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/","text":"ObjectStorageCredentialsResponse \u00b6 The temporaryUploadCredentials/objectStorageCredentialsResponse will be deprecated. Use objectStoreAccess/awsS3TemporaryUploadCredentials instead. Properties \u00b6 Name Type Description Notes access_key str Access key for use with AWS S3 [optional] secret_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] service_url str Service URL for multi-regional support [optional] upload_location str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStorageCredentialsResponse"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/#objectstoragecredentialsresponse","text":"The temporaryUploadCredentials/objectStorageCredentialsResponse will be deprecated. Use objectStoreAccess/awsS3TemporaryUploadCredentials instead.","title":"ObjectStorageCredentialsResponse"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/#properties","text":"Name Type Description Notes access_key str Access key for use with AWS S3 [optional] secret_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] service_url str Service URL for multi-regional support [optional] upload_location str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStoreAccess/","text":"ObjectStoreAccess \u00b6 ObjectStoreAccess to get the temporaryCredentials per provider Properties \u00b6 Name Type Description Notes session_id str [optional] aws_s3_temporary_upload_credentials AwsS3TemporaryUploadCredentials [optional] aws_s3_presigned_url_for_upload AwsS3PresignedUrlForUpload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStoreAccess"},{"location":"libgds/docs/ObjectStoreAccess/#objectstoreaccess","text":"ObjectStoreAccess to get the temporaryCredentials per provider","title":"ObjectStoreAccess"},{"location":"libgds/docs/ObjectStoreAccess/#properties","text":"Name Type Description Notes session_id str [optional] aws_s3_temporary_upload_credentials AwsS3TemporaryUploadCredentials [optional] aws_s3_presigned_url_for_upload AwsS3PresignedUrlForUpload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStoreSettings/","text":"ObjectStoreSettings \u00b6 Properties \u00b6 Name Type Description Notes aws_s3 AWSS3ObjectStoreSetting secret_name str Platform credentials Name Must provide either SecretId or SecretName [optional] secret_id str Platform credentials Id Must provide either SecretId or SecretName [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStoreSettings"},{"location":"libgds/docs/ObjectStoreSettings/#objectstoresettings","text":"","title":"ObjectStoreSettings"},{"location":"libgds/docs/ObjectStoreSettings/#properties","text":"Name Type Description Notes aws_s3 AWSS3ObjectStoreSetting secret_name str Platform credentials Name Must provide either SecretId or SecretName [optional] secret_id str Platform credentials Id Must provide either SecretId or SecretName [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/PartEtag/","text":"PartEtag \u00b6 PartEtag Properties \u00b6 Name Type Description Notes part int Part number [optional] etag str Etag response for the part upload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PartEtag"},{"location":"libgds/docs/PartEtag/#partetag","text":"PartEtag","title":"PartEtag"},{"location":"libgds/docs/PartEtag/#properties","text":"Name Type Description Notes part int Part number [optional] etag str Etag response for the part upload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/PartInfo/","text":"PartInfo \u00b6 PartInfo of multi parts presigned url for upload Properties \u00b6 Name Type Description Notes part int Part number to be applied to {part} in MultipartTemplate [optional] date str Date to be applied to {date} in MultipartTemplate [optional] date_time str DateTime to be applied to {datetime} in MultipartTemplate [optional] signature str Signature to be applied to {signature} in MultipartTemplate [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PartInfo"},{"location":"libgds/docs/PartInfo/#partinfo","text":"PartInfo of multi parts presigned url for upload","title":"PartInfo"},{"location":"libgds/docs/PartInfo/#properties","text":"Name Type Description Notes part int Part number to be applied to {part} in MultipartTemplate [optional] date str Date to be applied to {date} in MultipartTemplate [optional] date_time str DateTime to be applied to {datetime} in MultipartTemplate [optional] signature str Signature to be applied to {signature} in MultipartTemplate [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/SessionResponse/","text":"SessionResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SessionResponse"},{"location":"libgds/docs/SessionResponse/#sessionresponse","text":"","title":"SessionResponse"},{"location":"libgds/docs/SessionResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/SessionStatus/","text":"SessionStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SessionStatus"},{"location":"libgds/docs/SessionStatus/#sessionstatus","text":"","title":"SessionStatus"},{"location":"libgds/docs/SessionStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/StorageTier/","text":"StorageTier \u00b6 StorageTier Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"StorageTier"},{"location":"libgds/docs/StorageTier/#storagetier","text":"StorageTier","title":"StorageTier"},{"location":"libgds/docs/StorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateFileRequest/","text":"UpdateFileRequest \u00b6 Properties \u00b6 Name Type Description Notes type str The new file type (e.g. \\\"text/plain\\\"). [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateFileRequest"},{"location":"libgds/docs/UpdateFileRequest/#updatefilerequest","text":"","title":"UpdateFileRequest"},{"location":"libgds/docs/UpdateFileRequest/#properties","text":"Name Type Description Notes type str The new file type (e.g. \\\"text/plain\\\"). [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/","text":"UpdateVolumeConfigurationRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name of the volume object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"UpdateVolumeConfigurationRequest"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/#updatevolumeconfigurationrequest","text":"","title":"UpdateVolumeConfigurationRequest"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/#properties","text":"Name Type Description Notes name str Name of the volume object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateVolumeRequest/","text":"UpdateVolumeRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateVolumeRequest"},{"location":"libgds/docs/UpdateVolumeRequest/#updatevolumerequest","text":"","title":"UpdateVolumeRequest"},{"location":"libgds/docs/UpdateVolumeRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationListResponse/","text":"VolumeConfigurationListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[VolumeConfigurationResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationListResponse"},{"location":"libgds/docs/VolumeConfigurationListResponse/#volumeconfigurationlistresponse","text":"","title":"VolumeConfigurationListResponse"},{"location":"libgds/docs/VolumeConfigurationListResponse/#properties","text":"Name Type Description Notes items list[VolumeConfigurationResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/","text":"VolumeConfigurationOnlineStatus \u00b6 The valid Online Status values for Volume configurations in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationOnlineStatus"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/#volumeconfigurationonlinestatus","text":"The valid Online Status values for Volume configurations in GDS","title":"VolumeConfigurationOnlineStatus"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationResponse/","text":"VolumeConfigurationResponse \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume configuration [optional] tenant_id str The unique identifier for this Volume Configuration's Tenant [optional] sub_tenant_id str The unique identifier for this Volume Configurations's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume Configuration [optional] online_status VolumeConfigurationOnlineStatus [optional] error_code str Error code returned from the object store [optional] error_message str Error message returned from the object store [optional] time_of_last_error datetime Timestamp of the last observed error. [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] object_store_settings ObjectStoreSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationResponse"},{"location":"libgds/docs/VolumeConfigurationResponse/#volumeconfigurationresponse","text":"","title":"VolumeConfigurationResponse"},{"location":"libgds/docs/VolumeConfigurationResponse/#properties","text":"Name Type Description Notes name str Name for the volume configuration [optional] tenant_id str The unique identifier for this Volume Configuration's Tenant [optional] sub_tenant_id str The unique identifier for this Volume Configurations's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume Configuration [optional] online_status VolumeConfigurationOnlineStatus [optional] error_code str Error code returned from the object store [optional] error_message str Error message returned from the object store [optional] time_of_last_error datetime Timestamp of the last observed error. [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] object_store_settings ObjectStoreSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationsApi/","text":"libica.openapi.libgds.VolumeConfigurationsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration create_volume_configuration \u00b6 VolumeConfigurationResponse create_volume_configuration(body) Create a volume configuration in GDS. Create a volume configuration in GDS. This contains the object store details that will be used to create volumes. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) body = libica . openapi . libgds . CreateVolumeConfigurationRequest () # CreateVolumeConfigurationRequest | try : # Create a volume configuration in GDS. api_response = api_instance . create_volume_configuration ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->create_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateVolumeConfigurationRequest Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Volume Configuration. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume configuration name doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_volume_configuration \u00b6 VolumeResponse delete_volume_configuration(volume_configuration_name) Deletes a volume configuration by Id or name Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the Volume Configuration to be deleted. try : # Deletes a volume configuration by Id or name api_response = api_instance . delete_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->delete_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the Volume Configuration to be deleted. Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_volume_configuration \u00b6 VolumeConfigurationResponse get_volume_configuration(volume_configuration_name) Get information for the specified volume configuration name or Id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to retrieve information for. try : # Get information for the specified volume configuration name or Id api_response = api_instance . get_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->get_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to retrieve information for. Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_volume_configurations \u00b6 VolumeConfigurationListResponse list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include) Get a list of volumes Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) online_status = 'online_status_example' # str | Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) try : # Get a list of volumes api_response = api_instance . list_volume_configurations ( online_status = online_status , page_size = page_size , page_token = page_token , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->list_volume_configurations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes online_status str Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] Return type \u00b6 VolumeConfigurationListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not Found - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] validate_volume_configuration \u00b6 VolumeConfigurationResponse validate_volume_configuration(volume_configuration_name) Validate a volume configuration Validate an existing volume configuration. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to be validated. try : # Validate a volume configuration api_response = api_instance . validate_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->validate_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to be validated. Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.VolumeConfigurationsApi"},{"location":"libgds/docs/VolumeConfigurationsApi/#libicaopenapilibgdsvolumeconfigurationsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration","title":"libica.openapi.libgds.VolumeConfigurationsApi"},{"location":"libgds/docs/VolumeConfigurationsApi/#create_volume_configuration","text":"VolumeConfigurationResponse create_volume_configuration(body) Create a volume configuration in GDS. Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.","title":"create_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) body = libica . openapi . libgds . CreateVolumeConfigurationRequest () # CreateVolumeConfigurationRequest | try : # Create a volume configuration in GDS. api_response = api_instance . create_volume_configuration ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->create_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters","text":"Name Type Description Notes body CreateVolumeConfigurationRequest","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details","text":"Status code Description Response headers 201 Created new Volume Configuration. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume configuration name doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#delete_volume_configuration","text":"VolumeResponse delete_volume_configuration(volume_configuration_name) Deletes a volume configuration by Id or name","title":"delete_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the Volume Configuration to be deleted. try : # Deletes a volume configuration by Id or name api_response = api_instance . delete_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->delete_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_1","text":"Name Type Description Notes volume_configuration_name str Unique name of the Volume Configuration to be deleted.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_1","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_1","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#get_volume_configuration","text":"VolumeConfigurationResponse get_volume_configuration(volume_configuration_name) Get information for the specified volume configuration name or Id","title":"get_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to retrieve information for. try : # Get information for the specified volume configuration name or Id api_response = api_instance . get_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->get_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_2","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to retrieve information for.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_2","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_2","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#list_volume_configurations","text":"VolumeConfigurationListResponse list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include) Get a list of volumes","title":"list_volume_configurations"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) online_status = 'online_status_example' # str | Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) try : # Get a list of volumes api_response = api_instance . list_volume_configurations ( online_status = online_status , page_size = page_size , page_token = page_token , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->list_volume_configurations: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_3","text":"Name Type Description Notes online_status str Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional]","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_3","text":"VolumeConfigurationListResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not Found - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#validate_volume_configuration","text":"VolumeConfigurationResponse validate_volume_configuration(volume_configuration_name) Validate a volume configuration Validate an existing volume configuration.","title":"validate_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to be validated. try : # Validate a volume configuration api_response = api_instance . validate_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->validate_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_4","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to be validated.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_4","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_4","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeLifeCycleSettings/","text":"VolumeLifeCycleSettings \u00b6 Properties \u00b6 Name Type Description Notes grace_period_days int Number of days before the files associated to this volume expires [optional] grace_period_end_action GracePeriodEndAction [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeLifeCycleSettings"},{"location":"libgds/docs/VolumeLifeCycleSettings/#volumelifecyclesettings","text":"","title":"VolumeLifeCycleSettings"},{"location":"libgds/docs/VolumeLifeCycleSettings/#properties","text":"Name Type Description Notes grace_period_days int Number of days before the files associated to this volume expires [optional] grace_period_end_action GracePeriodEndAction [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeListResponse/","text":"VolumeListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[VolumeResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeListResponse"},{"location":"libgds/docs/VolumeListResponse/#volumelistresponse","text":"","title":"VolumeListResponse"},{"location":"libgds/docs/VolumeListResponse/#properties","text":"Name Type Description Notes items list[VolumeResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeResponse/","text":"VolumeResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeResponse"},{"location":"libgds/docs/VolumeResponse/#volumeresponse","text":"","title":"VolumeResponse"},{"location":"libgds/docs/VolumeResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeSettingStatus/","text":"VolumeSettingStatus \u00b6 The valid Online Status values for Volume configurations in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"VolumeSettingStatus"},{"location":"libgds/docs/VolumeSettingStatus/#volumesettingstatus","text":"The valid Online Status values for Volume configurations in GDS","title":"VolumeSettingStatus"},{"location":"libgds/docs/VolumeSettingStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumesApi/","text":"libica.openapi.libgds.VolumesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name list_volumes GET /v1/volumes Get a list of volumes create_volume \u00b6 CreateVolumeResponse create_volume(body, include=include) Create a volume in GDS and receive temporary credentials for upload Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) body = libica . openapi . libgds . CreateVolumeRequest () # CreateVolumeRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a volume in GDS and receive temporary credentials for upload api_response = api_instance . create_volume ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->create_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateVolumeRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] Return type \u00b6 CreateVolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Volume. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_volume \u00b6 VolumeResponse delete_volume(volume_id, purge_object_store_data=purge_object_store_data) Deletes a volume by Id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the Volume to be deleted. purge_object_store_data = True # bool | Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. (optional) try : # Deletes a volume by Id api_response = api_instance . delete_volume ( volume_id , purge_object_store_data = purge_object_store_data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->delete_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id str Unique identifier for the Volume to be deleted. purge_object_store_data bool Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. [optional] Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_volume \u00b6 VolumeResponse get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information for the specified volume ID or volume name Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the volume to retrieve information for. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information for the specified volume ID or volume name api_response = api_instance . get_volume ( volume_id , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->get_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id str Unique identifier for the volume to retrieve information for. tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_volumes \u00b6 VolumeListResponse list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name) Get a list of volumes Get a list of volumes accessible by the current JWT token\u2019s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration (optional) try : # Get a list of volumes api_response = api_instance . list_volumes ( page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , volume_configuration_name = volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->list_volumes: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] volume_configuration_name str Unique name of the volume configuration [optional] Return type \u00b6 VolumeListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.VolumesApi"},{"location":"libgds/docs/VolumesApi/#libicaopenapilibgdsvolumesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name list_volumes GET /v1/volumes Get a list of volumes","title":"libica.openapi.libgds.VolumesApi"},{"location":"libgds/docs/VolumesApi/#create_volume","text":"CreateVolumeResponse create_volume(body, include=include) Create a volume in GDS and receive temporary credentials for upload Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.","title":"create_volume"},{"location":"libgds/docs/VolumesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) body = libica . openapi . libgds . CreateVolumeRequest () # CreateVolumeRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a volume in GDS and receive temporary credentials for upload api_response = api_instance . create_volume ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->create_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters","text":"Name Type Description Notes body CreateVolumeRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type","text":"CreateVolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details","text":"Status code Description Response headers 201 Created new Volume. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#delete_volume","text":"VolumeResponse delete_volume(volume_id, purge_object_store_data=purge_object_store_data) Deletes a volume by Id","title":"delete_volume"},{"location":"libgds/docs/VolumesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the Volume to be deleted. purge_object_store_data = True # bool | Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. (optional) try : # Deletes a volume by Id api_response = api_instance . delete_volume ( volume_id , purge_object_store_data = purge_object_store_data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->delete_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_1","text":"Name Type Description Notes volume_id str Unique identifier for the Volume to be deleted. purge_object_store_data bool Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_1","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_1","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#get_volume","text":"VolumeResponse get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information for the specified volume ID or volume name","title":"get_volume"},{"location":"libgds/docs/VolumesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the volume to retrieve information for. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information for the specified volume ID or volume name api_response = api_instance . get_volume ( volume_id , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->get_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_2","text":"Name Type Description Notes volume_id str Unique identifier for the volume to retrieve information for. tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_2","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_2","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#list_volumes","text":"VolumeListResponse list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name) Get a list of volumes Get a list of volumes accessible by the current JWT token\u2019s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.","title":"list_volumes"},{"location":"libgds/docs/VolumesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration (optional) try : # Get a list of volumes api_response = api_instance . list_volumes ( page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , volume_configuration_name = volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->list_volumes: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_3","text":"Name Type Description Notes page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] volume_configuration_name str Unique name of the volume configuration [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_3","text":"VolumeListResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_3","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/","text":"libica.openapi.libtes \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libtes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:24.243132+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libtes, you can run the following: from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description TaskRunsApi abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run TaskRunsApi create_task_run POST /v1/tasks/runs Create and launch a task run TaskRunsApi get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run TaskRunsApi heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run TaskRunsApi list_task_runs GET /v1/tasks/runs Get a list of task runs TaskVersionsApi create_task_version POST /v1/tasks/{taskId}/versions Create a task version TaskVersionsApi get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version TaskVersionsApi launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version TaskVersionsApi list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions TaskVersionsApi update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties TasksApi create_task POST /v1/tasks Create a Task TasksApi get_task GET /v1/tasks/{taskId} Get the details of a Task TasksApi list_tasks GET /v1/tasks Get a list of tasks TasksApi update_task PATCH /v1/tasks/{taskId} Update an existing task. Documentation For Models \u00b6 ContainerState ContainerStateRunning ContainerStateTerminated ContainerStateWaiting ContainerStatus CreateTaskRequest CreateTaskRunRequest CreateTaskVersionRequest Credentials Environment ErrorResponse Execution HeartbeatTaskRunRequest Image InputMountMappingWithCreds InputStreamSettings LaunchTaskRequest MountMappingWithCreds Resources SystemFiles Task TaskRun TaskRunHeartbeat TaskRunLogs TaskRunSummary TaskRunSummaryPagedItems TaskSummary TaskSummaryPagedItems TaskVersion TaskVersionSummary TaskVersionSummaryPagedItems UpdateTaskRequest UpdateTaskVersionRequest Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libtes"},{"location":"libtes/#libicaopenapilibtes","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libtes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:24.243132+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libtes"},{"location":"libtes/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libtes/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libtes/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libtes, you can run the following: from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e )","title":"Getting Started"},{"location":"libtes/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description TaskRunsApi abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run TaskRunsApi create_task_run POST /v1/tasks/runs Create and launch a task run TaskRunsApi get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run TaskRunsApi heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run TaskRunsApi list_task_runs GET /v1/tasks/runs Get a list of task runs TaskVersionsApi create_task_version POST /v1/tasks/{taskId}/versions Create a task version TaskVersionsApi get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version TaskVersionsApi launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version TaskVersionsApi list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions TaskVersionsApi update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties TasksApi create_task POST /v1/tasks Create a Task TasksApi get_task GET /v1/tasks/{taskId} Get the details of a Task TasksApi list_tasks GET /v1/tasks Get a list of tasks TasksApi update_task PATCH /v1/tasks/{taskId} Update an existing task.","title":"Documentation for API Endpoints"},{"location":"libtes/#documentation-for-models","text":"ContainerState ContainerStateRunning ContainerStateTerminated ContainerStateWaiting ContainerStatus CreateTaskRequest CreateTaskRunRequest CreateTaskVersionRequest Credentials Environment ErrorResponse Execution HeartbeatTaskRunRequest Image InputMountMappingWithCreds InputStreamSettings LaunchTaskRequest MountMappingWithCreds Resources SystemFiles Task TaskRun TaskRunHeartbeat TaskRunLogs TaskRunSummary TaskRunSummaryPagedItems TaskSummary TaskSummaryPagedItems TaskVersion TaskVersionSummary TaskVersionSummaryPagedItems UpdateTaskRequest UpdateTaskVersionRequest","title":"Documentation For Models"},{"location":"libtes/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libtes/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libtes/#author","text":"","title":"Author"},{"location":"libtes/docs/ContainerState/","text":"ContainerState \u00b6 Properties \u00b6 Name Type Description Notes waiting ContainerStateWaiting [optional] running ContainerStateRunning [optional] terminated ContainerStateTerminated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerState"},{"location":"libtes/docs/ContainerState/#containerstate","text":"","title":"ContainerState"},{"location":"libtes/docs/ContainerState/#properties","text":"Name Type Description Notes waiting ContainerStateWaiting [optional] running ContainerStateRunning [optional] terminated ContainerStateTerminated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateRunning/","text":"ContainerStateRunning \u00b6 Properties \u00b6 Name Type Description Notes started_at datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateRunning"},{"location":"libtes/docs/ContainerStateRunning/#containerstaterunning","text":"","title":"ContainerStateRunning"},{"location":"libtes/docs/ContainerStateRunning/#properties","text":"Name Type Description Notes started_at datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateTerminated/","text":"ContainerStateTerminated \u00b6 Properties \u00b6 Name Type Description Notes exit_code int [optional] signal int [optional] reason str [optional] message str [optional] started_at datetime [optional] finished_at datetime [optional] container_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateTerminated"},{"location":"libtes/docs/ContainerStateTerminated/#containerstateterminated","text":"","title":"ContainerStateTerminated"},{"location":"libtes/docs/ContainerStateTerminated/#properties","text":"Name Type Description Notes exit_code int [optional] signal int [optional] reason str [optional] message str [optional] started_at datetime [optional] finished_at datetime [optional] container_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateWaiting/","text":"ContainerStateWaiting \u00b6 Properties \u00b6 Name Type Description Notes reason str [optional] message str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateWaiting"},{"location":"libtes/docs/ContainerStateWaiting/#containerstatewaiting","text":"","title":"ContainerStateWaiting"},{"location":"libtes/docs/ContainerStateWaiting/#properties","text":"Name Type Description Notes reason str [optional] message str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStatus/","text":"ContainerStatus \u00b6 Properties \u00b6 Name Type Description Notes name str [optional] state ContainerState [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStatus"},{"location":"libtes/docs/ContainerStatus/#containerstatus","text":"","title":"ContainerStatus"},{"location":"libtes/docs/ContainerStatus/#properties","text":"Name Type Description Notes name str [optional] state ContainerState [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskRequest/","text":"CreateTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task description str User-defined description of the task [optional] acl list[str] Access Control List [optional] task_versions list[CreateTaskVersionRequest] List of task versions [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskRequest"},{"location":"libtes/docs/CreateTaskRequest/#createtaskrequest","text":"","title":"CreateTaskRequest"},{"location":"libtes/docs/CreateTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task description str User-defined description of the task [optional] acl list[str] Access Control List [optional] task_versions list[CreateTaskVersionRequest] List of task versions [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskRunRequest/","text":"CreateTaskRunRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task run [optional] description str User-defined description of the task run [optional] acl list[str] Access Control List [optional] execution Execution [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskRunRequest"},{"location":"libtes/docs/CreateTaskRunRequest/#createtaskrunrequest","text":"","title":"CreateTaskRunRequest"},{"location":"libtes/docs/CreateTaskRunRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task run [optional] description str User-defined description of the task run [optional] acl list[str] Access Control List [optional] execution Execution [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskVersionRequest/","text":"CreateTaskVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes version str User-defined version of task version description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskVersionRequest"},{"location":"libtes/docs/CreateTaskVersionRequest/#createtaskversionrequest","text":"","title":"CreateTaskVersionRequest"},{"location":"libtes/docs/CreateTaskVersionRequest/#properties","text":"Name Type Description Notes version str User-defined version of task version description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Credentials/","text":"Credentials \u00b6 Properties \u00b6 Name Type Description Notes username str [optional] password str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Credentials"},{"location":"libtes/docs/Credentials/#credentials","text":"","title":"Credentials"},{"location":"libtes/docs/Credentials/#properties","text":"Name Type Description Notes username str [optional] password str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Environment/","text":"Environment \u00b6 Properties \u00b6 Name Type Description Notes variables dict(str, str) [optional] resources Resources [optional] input_stream_settings InputStreamSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Environment"},{"location":"libtes/docs/Environment/#environment","text":"","title":"Environment"},{"location":"libtes/docs/Environment/#properties","text":"Name Type Description Notes variables dict(str, str) [optional] resources Resources [optional] input_stream_settings InputStreamSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libtes/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libtes/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Execution/","text":"Execution \u00b6 Properties \u00b6 Name Type Description Notes image Image [optional] command str [optional] args list[str] Argument to run specified task [optional] inputs list[InputMountMappingWithCreds] Path (Inputs) - Path to mount file at valid Url URL (Inputs) - Url of file mounted at specified path [optional] outputs list[MountMappingWithCreds] Path (Outputs) - Path where files will be output to valid Url URL (Outputs) - Url of folder with files from the path will be uploaded [optional] system_files SystemFiles [optional] environment Environment [optional] working_directory str [optional] retry_limit int [optional] [default to 3] retry_count int [optional] [default to 0] [Back to Model list] [Back to API list] [Back to README]","title":"Execution"},{"location":"libtes/docs/Execution/#execution","text":"","title":"Execution"},{"location":"libtes/docs/Execution/#properties","text":"Name Type Description Notes image Image [optional] command str [optional] args list[str] Argument to run specified task [optional] inputs list[InputMountMappingWithCreds] Path (Inputs) - Path to mount file at valid Url URL (Inputs) - Url of file mounted at specified path [optional] outputs list[MountMappingWithCreds] Path (Outputs) - Path where files will be output to valid Url URL (Outputs) - Url of folder with files from the path will be uploaded [optional] system_files SystemFiles [optional] environment Environment [optional] working_directory str [optional] retry_limit int [optional] [default to 3] retry_count int [optional] [default to 0] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/HeartbeatTaskRunRequest/","text":"HeartbeatTaskRunRequest \u00b6 Properties \u00b6 Name Type Description Notes last_heartbeat bool LastHeartbeat [optional] pod_name str [optional] pod_uid str [optional] pod_hardware_details str [optional] job_retry_count int [optional] nonce str [optional] container_status list[ContainerStatus] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"HeartbeatTaskRunRequest"},{"location":"libtes/docs/HeartbeatTaskRunRequest/#heartbeattaskrunrequest","text":"","title":"HeartbeatTaskRunRequest"},{"location":"libtes/docs/HeartbeatTaskRunRequest/#properties","text":"Name Type Description Notes last_heartbeat bool LastHeartbeat [optional] pod_name str [optional] pod_uid str [optional] pod_hardware_details str [optional] job_retry_count int [optional] nonce str [optional] container_status list[ContainerStatus] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Image/","text":"Image \u00b6 Properties \u00b6 Name Type Description Notes name str Name of url for Docker Image tag str Version of image as defined in repository [optional] digest str Version of image as defined in repository [optional] credentials Credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Image"},{"location":"libtes/docs/Image/#image","text":"","title":"Image"},{"location":"libtes/docs/Image/#properties","text":"Name Type Description Notes name str Name of url for Docker Image tag str Version of image as defined in repository [optional] digest str Version of image as defined in repository [optional] credentials Credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/InputMountMappingWithCreds/","text":"InputMountMappingWithCreds \u00b6 Properties \u00b6 Name Type Description Notes storage_provider str [optional] credentials dict(str, str) [optional] path str [optional] url str [optional] urn str [optional] mode str [optional] type str [optional] [default to 'File'] [Back to Model list] [Back to API list] [Back to README]","title":"InputMountMappingWithCreds"},{"location":"libtes/docs/InputMountMappingWithCreds/#inputmountmappingwithcreds","text":"","title":"InputMountMappingWithCreds"},{"location":"libtes/docs/InputMountMappingWithCreds/#properties","text":"Name Type Description Notes storage_provider str [optional] credentials dict(str, str) [optional] path str [optional] url str [optional] urn str [optional] mode str [optional] type str [optional] [default to 'File'] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/InputStreamSettings/","text":"InputStreamSettings \u00b6 Properties \u00b6 Name Type Description Notes access_pattern str [optional] [default to 'sequential'] cache_size_gb int [optional] [default to 50] block_size_mb float [optional] [default to 32.0] prefetch_blocks int [optional] [default to 32] [Back to Model list] [Back to API list] [Back to README]","title":"InputStreamSettings"},{"location":"libtes/docs/InputStreamSettings/#inputstreamsettings","text":"","title":"InputStreamSettings"},{"location":"libtes/docs/InputStreamSettings/#properties","text":"Name Type Description Notes access_pattern str [optional] [default to 'sequential'] cache_size_gb int [optional] [default to 50] block_size_mb float [optional] [default to 32.0] prefetch_blocks int [optional] [default to 32] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/LaunchTaskRequest/","text":"LaunchTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name for the task run, if not specified version string of task version will be used [optional] description str User-defined description for the task run, if not specified task version description will be used [optional] arguments dict(str, str) Arguments to launch a task run [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LaunchTaskRequest"},{"location":"libtes/docs/LaunchTaskRequest/#launchtaskrequest","text":"","title":"LaunchTaskRequest"},{"location":"libtes/docs/LaunchTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name for the task run, if not specified version string of task version will be used [optional] description str User-defined description for the task run, if not specified task version description will be used [optional] arguments dict(str, str) Arguments to launch a task run [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/MountMappingWithCreds/","text":"MountMappingWithCreds \u00b6 Properties \u00b6 Name Type Description Notes path str [optional] url str [optional] urn str [optional] type str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MountMappingWithCreds"},{"location":"libtes/docs/MountMappingWithCreds/#mountmappingwithcreds","text":"","title":"MountMappingWithCreds"},{"location":"libtes/docs/MountMappingWithCreds/#properties","text":"Name Type Description Notes path str [optional] url str [optional] urn str [optional] type str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Resources/","text":"Resources \u00b6 Properties \u00b6 Name Type Description Notes type str [optional] size str [optional] cpu_cores float [optional] memory_gb float [optional] hardware list[str] [optional] tier str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Resources"},{"location":"libtes/docs/Resources/#resources","text":"","title":"Resources"},{"location":"libtes/docs/Resources/#properties","text":"Name Type Description Notes type str [optional] size str [optional] cpu_cores float [optional] memory_gb float [optional] hardware list[str] [optional] tier str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/SystemFiles/","text":"SystemFiles \u00b6 Properties \u00b6 Name Type Description Notes url str [optional] urn str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemFiles"},{"location":"libtes/docs/SystemFiles/#systemfiles","text":"","title":"SystemFiles"},{"location":"libtes/docs/SystemFiles/#properties","text":"Name Type Description Notes url str [optional] urn str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Task/","text":"Task \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] task_versions list[TaskVersion] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Task"},{"location":"libtes/docs/Task/#task","text":"","title":"Task"},{"location":"libtes/docs/Task/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] task_versions list[TaskVersion] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRun/","text":"TaskRun \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRun"},{"location":"libtes/docs/TaskRun/#taskrun","text":"","title":"TaskRun"},{"location":"libtes/docs/TaskRun/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunDirect/","text":"TaskRunDirect \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] name str [optional] href str Href of the object [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunDirect"},{"location":"libtes/docs/TaskRunDirect/#taskrundirect","text":"","title":"TaskRunDirect"},{"location":"libtes/docs/TaskRunDirect/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] name str [optional] href str Href of the object [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunHeartbeat/","text":"TaskRunHeartbeat \u00b6 Properties \u00b6 Name Type Description Notes jwt str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunHeartbeat"},{"location":"libtes/docs/TaskRunHeartbeat/#taskrunheartbeat","text":"","title":"TaskRunHeartbeat"},{"location":"libtes/docs/TaskRunHeartbeat/#properties","text":"Name Type Description Notes jwt str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunLogs/","text":"TaskRunLogs \u00b6 Properties \u00b6 Name Type Description Notes start_time datetime [optional] end_time datetime [optional] error str [optional] error_details str [optional] stdout str [optional] stderr str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunLogs"},{"location":"libtes/docs/TaskRunLogs/#taskrunlogs","text":"","title":"TaskRunLogs"},{"location":"libtes/docs/TaskRunLogs/#properties","text":"Name Type Description Notes start_time datetime [optional] end_time datetime [optional] error str [optional] error_details str [optional] stdout str [optional] stderr str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunSummary/","text":"TaskRunSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunSummary"},{"location":"libtes/docs/TaskRunSummary/#taskrunsummary","text":"","title":"TaskRunSummary"},{"location":"libtes/docs/TaskRunSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunSummaryPagedItems/","text":"TaskRunSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskRunSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunSummaryPagedItems"},{"location":"libtes/docs/TaskRunSummaryPagedItems/#taskrunsummarypageditems","text":"","title":"TaskRunSummaryPagedItems"},{"location":"libtes/docs/TaskRunSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskRunSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunsApi/","text":"libica.openapi.libtes.TaskRunsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run create_task_run POST /v1/tasks/runs Create and launch a task run get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run list_task_runs GET /v1/tasks/runs Get a list of task runs abort_task_run \u00b6 TaskRunSummary abort_task_run(run_id) Abort a task run Aborts a task run for a given task run ID. The task run is required to have a status of \\\"Pending\\\" or \\\"Running\\\". Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str Return type \u00b6 TaskRunSummary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_task_run \u00b6 TaskRun create_task_run(body=body) Create and launch a task run Creates and launches a task run. Returns the ID and status associated with the new task run. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) body = libica . openapi . libtes . CreateTaskRunRequest () # CreateTaskRunRequest | (optional) try : # Create and launch a task run api_response = api_instance . create_task_run ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->create_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateTaskRunRequest [optional] Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task_run \u00b6 TaskRun get_task_run(run_id) Get the status of a task run Gets the status of a task run for a given task run ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Get the status of a task run api_response = api_instance . get_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->get_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] heartbeat_task_run \u00b6 TaskRunHeartbeat heartbeat_task_run(run_id, body=body) Heartbeat for a task run Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | body = libica . openapi . libtes . HeartbeatTaskRunRequest () # HeartbeatTaskRunRequest | (optional) try : # Heartbeat for a task run api_response = api_instance . heartbeat_task_run ( run_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->heartbeat_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str body HeartbeatTaskRunRequest [optional] Return type \u00b6 TaskRunHeartbeat Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_task_runs \u00b6 TaskRunSummaryPagedItems list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token) Get a list of task runs Get a list of task runs accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) names = 'names_example' # str | (optional) status = 'status_example' # str | (optional) versions = 'versions_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of task runs api_response = api_instance . list_task_runs ( sort = sort , names = names , status = status , versions = versions , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->list_task_runs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] names str [optional] status str [optional] versions str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskRunSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TaskRunsApi"},{"location":"libtes/docs/TaskRunsApi/#libicaopenapilibtestaskrunsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run create_task_run POST /v1/tasks/runs Create and launch a task run get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run list_task_runs GET /v1/tasks/runs Get a list of task runs","title":"libica.openapi.libtes.TaskRunsApi"},{"location":"libtes/docs/TaskRunsApi/#abort_task_run","text":"TaskRunSummary abort_task_run(run_id) Abort a task run Aborts a task run for a given task run ID. The task run is required to have a status of \\\"Pending\\\" or \\\"Running\\\".","title":"abort_task_run"},{"location":"libtes/docs/TaskRunsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters","text":"Name Type Description Notes run_id str","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type","text":"TaskRunSummary","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#create_task_run","text":"TaskRun create_task_run(body=body) Create and launch a task run Creates and launches a task run. Returns the ID and status associated with the new task run.","title":"create_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) body = libica . openapi . libtes . CreateTaskRunRequest () # CreateTaskRunRequest | (optional) try : # Create and launch a task run api_response = api_instance . create_task_run ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->create_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_1","text":"Name Type Description Notes body CreateTaskRunRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_1","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_1","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_1","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#get_task_run","text":"TaskRun get_task_run(run_id) Get the status of a task run Gets the status of a task run for a given task run ID.","title":"get_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Get the status of a task run api_response = api_instance . get_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->get_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_2","text":"Name Type Description Notes run_id str","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_2","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_2","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#heartbeat_task_run","text":"TaskRunHeartbeat heartbeat_task_run(run_id, body=body) Heartbeat for a task run Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.","title":"heartbeat_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | body = libica . openapi . libtes . HeartbeatTaskRunRequest () # HeartbeatTaskRunRequest | (optional) try : # Heartbeat for a task run api_response = api_instance . heartbeat_task_run ( run_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->heartbeat_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_3","text":"Name Type Description Notes run_id str body HeartbeatTaskRunRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_3","text":"TaskRunHeartbeat","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#list_task_runs","text":"TaskRunSummaryPagedItems list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token) Get a list of task runs Get a list of task runs accessible by the current tenant ID.","title":"list_task_runs"},{"location":"libtes/docs/TaskRunsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) names = 'names_example' # str | (optional) status = 'status_example' # str | (optional) versions = 'versions_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of task runs api_response = api_instance . list_task_runs ( sort = sort , names = names , status = status , versions = versions , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->list_task_runs: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_4","text":"Name Type Description Notes sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] names str [optional] status str [optional] versions str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_4","text":"TaskRunSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_4","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskSummary/","text":"TaskSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskSummary"},{"location":"libtes/docs/TaskSummary/#tasksummary","text":"","title":"TaskSummary"},{"location":"libtes/docs/TaskSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskSummaryPagedItems/","text":"TaskSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskSummaryPagedItems"},{"location":"libtes/docs/TaskSummaryPagedItems/#tasksummarypageditems","text":"","title":"TaskSummaryPagedItems"},{"location":"libtes/docs/TaskSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersion/","text":"TaskVersion \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] execution Execution [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersion"},{"location":"libtes/docs/TaskVersion/#taskversion","text":"","title":"TaskVersion"},{"location":"libtes/docs/TaskVersion/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] execution Execution [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionSummary/","text":"TaskVersionSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersionSummary"},{"location":"libtes/docs/TaskVersionSummary/#taskversionsummary","text":"","title":"TaskVersionSummary"},{"location":"libtes/docs/TaskVersionSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/","text":"TaskVersionSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskVersionSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersionSummaryPagedItems"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/#taskversionsummarypageditems","text":"","title":"TaskVersionSummaryPagedItems"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskVersionSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionsApi/","text":"libica.openapi.libtes.TaskVersionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task_version POST /v1/tasks/{taskId}/versions Create a task version get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties create_task_version \u00b6 TaskVersion create_task_version(task_id, body=body) Create a task version Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . CreateTaskVersionRequest () # CreateTaskVersionRequest | (optional) try : # Create a task version api_response = api_instance . create_task_version ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->create_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str body CreateTaskVersionRequest [optional] Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task_version \u00b6 TaskVersion get_task_version(task_id, version_id) Get the details of a task version Gets details of a task version for a given task version ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | try : # Get the details of a task version api_response = api_instance . get_task_version ( task_id , version_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->get_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] launch_task_run \u00b6 TaskRun launch_task_run(task_id, version_id, body=body) Launch a task version Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . LaunchTaskRequest () # LaunchTaskRequest | (optional) try : # Launch a task version api_response = api_instance . launch_task_run ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->launch_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str body LaunchTaskRequest [optional] Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_task_versions \u00b6 TaskVersionSummaryPagedItems list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token) Get a list of versions Gets a list of task versions within the given task accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) versions = 'versions_example' # str | (optional) ids = 'ids_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of versions api_response = api_instance . list_task_versions ( task_id , sort = sort , versions = versions , ids = ids , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->list_task_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] versions str [optional] ids str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskVersionSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_task_version \u00b6 TaskVersion update_task_version(task_id, version_id, body=body) Update task version properties Update details of a task version for a given task version ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . UpdateTaskVersionRequest () # UpdateTaskVersionRequest | (optional) try : # Update task version properties api_response = api_instance . update_task_version ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->update_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str body UpdateTaskVersionRequest [optional] Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TaskVersionsApi"},{"location":"libtes/docs/TaskVersionsApi/#libicaopenapilibtestaskversionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task_version POST /v1/tasks/{taskId}/versions Create a task version get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties","title":"libica.openapi.libtes.TaskVersionsApi"},{"location":"libtes/docs/TaskVersionsApi/#create_task_version","text":"TaskVersion create_task_version(task_id, body=body) Create a task version Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.","title":"create_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . CreateTaskVersionRequest () # CreateTaskVersionRequest | (optional) try : # Create a task version api_response = api_instance . create_task_version ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->create_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters","text":"Name Type Description Notes task_id str body CreateTaskVersionRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#get_task_version","text":"TaskVersion get_task_version(task_id, version_id) Get the details of a task version Gets details of a task version for a given task version ID.","title":"get_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | try : # Get the details of a task version api_response = api_instance . get_task_version ( task_id , version_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->get_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_1","text":"Name Type Description Notes task_id str version_id str","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_1","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#launch_task_run","text":"TaskRun launch_task_run(task_id, version_id, body=body) Launch a task version Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.","title":"launch_task_run"},{"location":"libtes/docs/TaskVersionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . LaunchTaskRequest () # LaunchTaskRequest | (optional) try : # Launch a task version api_response = api_instance . launch_task_run ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->launch_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_2","text":"Name Type Description Notes task_id str version_id str body LaunchTaskRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_2","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_2","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#list_task_versions","text":"TaskVersionSummaryPagedItems list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token) Get a list of versions Gets a list of task versions within the given task accessible by the current tenant ID.","title":"list_task_versions"},{"location":"libtes/docs/TaskVersionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) versions = 'versions_example' # str | (optional) ids = 'ids_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of versions api_response = api_instance . list_task_versions ( task_id , sort = sort , versions = versions , ids = ids , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->list_task_versions: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_3","text":"Name Type Description Notes task_id str sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] versions str [optional] ids str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_3","text":"TaskVersionSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#update_task_version","text":"TaskVersion update_task_version(task_id, version_id, body=body) Update task version properties Update details of a task version for a given task version ID.","title":"update_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . UpdateTaskVersionRequest () # UpdateTaskVersionRequest | (optional) try : # Update task version properties api_response = api_instance . update_task_version ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->update_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_4","text":"Name Type Description Notes task_id str version_id str body UpdateTaskVersionRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_4","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_4","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_4","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/","text":"libica.openapi.libtes.TasksApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task POST /v1/tasks Create a Task get_task GET /v1/tasks/{taskId} Get the details of a Task list_tasks GET /v1/tasks Get a list of tasks update_task PATCH /v1/tasks/{taskId} Update an existing task. create_task \u00b6 Task create_task(body=body) Create a Task Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) body = libica . openapi . libtes . CreateTaskRequest () # CreateTaskRequest | (optional) try : # Create a Task api_response = api_instance . create_task ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->create_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateTaskRequest [optional] Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task \u00b6 TaskSummary get_task(task_id) Get the details of a Task Gets the details of a Task for a given task ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | try : # Get the details of a Task api_response = api_instance . get_task ( task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str Return type \u00b6 TaskSummary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_tasks \u00b6 TaskSummaryPagedItems list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token) Get a list of tasks Gets a list of tasks accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) names = 'names_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) acls = 'acls_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) sort = 'timeCreated asc' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) (default to 'timeCreated asc') page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of tasks api_response = api_instance . list_tasks ( names = names , acls = acls , page_size = page_size , sort = sort , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes names str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] acls str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] [default to 'timeCreated asc'] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_task \u00b6 Task update_task(task_id, body=body) Update an existing task. Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . UpdateTaskRequest () # UpdateTaskRequest | Details of the task to be updated. (optional) try : # Update an existing task. api_response = api_instance . update_task ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->update_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str body UpdateTaskRequest Details of the task to be updated. [optional] Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TasksApi"},{"location":"libtes/docs/TasksApi/#libicaopenapilibtestasksapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task POST /v1/tasks Create a Task get_task GET /v1/tasks/{taskId} Get the details of a Task list_tasks GET /v1/tasks Get a list of tasks update_task PATCH /v1/tasks/{taskId} Update an existing task.","title":"libica.openapi.libtes.TasksApi"},{"location":"libtes/docs/TasksApi/#create_task","text":"Task create_task(body=body) Create a Task Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.","title":"create_task"},{"location":"libtes/docs/TasksApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) body = libica . openapi . libtes . CreateTaskRequest () # CreateTaskRequest | (optional) try : # Create a Task api_response = api_instance . create_task ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->create_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters","text":"Name Type Description Notes body CreateTaskRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type","text":"Task","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#get_task","text":"TaskSummary get_task(task_id) Get the details of a Task Gets the details of a Task for a given task ID.","title":"get_task"},{"location":"libtes/docs/TasksApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | try : # Get the details of a Task api_response = api_instance . get_task ( task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_1","text":"Name Type Description Notes task_id str","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_1","text":"TaskSummary","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_1","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#list_tasks","text":"TaskSummaryPagedItems list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token) Get a list of tasks Gets a list of tasks accessible by the current tenant ID.","title":"list_tasks"},{"location":"libtes/docs/TasksApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) names = 'names_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) acls = 'acls_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) sort = 'timeCreated asc' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) (default to 'timeCreated asc') page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of tasks api_response = api_instance . list_tasks ( names = names , acls = acls , page_size = page_size , sort = sort , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_tasks: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_2","text":"Name Type Description Notes names str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] acls str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] [default to 'timeCreated asc'] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_2","text":"TaskSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_2","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#update_task","text":"Task update_task(task_id, body=body) Update an existing task. Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique.","title":"update_task"},{"location":"libtes/docs/TasksApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . UpdateTaskRequest () # UpdateTaskRequest | Details of the task to be updated. (optional) try : # Update an existing task. api_response = api_instance . update_task ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->update_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_3","text":"Name Type Description Notes task_id str body UpdateTaskRequest Details of the task to be updated. [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_3","text":"Task","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/UpdateTaskRequest/","text":"UpdateTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task [optional] description str User-defined description of the task [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateTaskRequest"},{"location":"libtes/docs/UpdateTaskRequest/#updatetaskrequest","text":"","title":"UpdateTaskRequest"},{"location":"libtes/docs/UpdateTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task [optional] description str User-defined description of the task [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/UpdateTaskVersionRequest/","text":"UpdateTaskVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes version str User-defined version of task version [optional] description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateTaskVersionRequest"},{"location":"libtes/docs/UpdateTaskVersionRequest/#updatetaskversionrequest","text":"","title":"UpdateTaskVersionRequest"},{"location":"libtes/docs/UpdateTaskVersionRequest/#properties","text":"Name Type Description Notes version str User-defined version of task version [optional] description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/","text":"libica.openapi.libwes \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libwes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:15.583343+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libwes, you can run the following: from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description WorkflowRunsApi abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run WorkflowRunsApi get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run WorkflowRunsApi list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events WorkflowRunsApi list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs WorkflowSignalsApi fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal WorkflowSignalsApi get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal WorkflowSignalsApi list_signals GET /v1/workflows/signals Get a list of workflow signals WorkflowSignalsApi succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal WorkflowVersionsApi create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version WorkflowVersionsApi get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version WorkflowVersionsApi launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version WorkflowVersionsApi list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions WorkflowVersionsApi list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions WorkflowVersionsApi update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version WorkflowsApi create_workflow POST /v1/workflows Create a workflow WorkflowsApi get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow WorkflowsApi list_workflows GET /v1/workflows Get a list of workflows WorkflowsApi update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow Documentation For Models \u00b6 AbortWorkflowRunRequest CreateWorkflowRequest CreateWorkflowVersionRequest ErrorResponse FailWorkflowSignalRequest LaunchWorkflowVersionRequest SucceedWorkflowSignalRequest UpdateWorkflowRequest UpdateWorkflowVersionRequest Workflow WorkflowArgument WorkflowCompact WorkflowConnection WorkflowLanguage WorkflowList WorkflowRun WorkflowRunCompact WorkflowRunHistoryEvent WorkflowRunHistoryEventList WorkflowRunList WorkflowSignal WorkflowSignalCompact WorkflowSignalList WorkflowVersion WorkflowVersionCompact WorkflowVersionList Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libwes"},{"location":"libwes/#libicaopenapilibwes","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libwes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:15.583343+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libwes"},{"location":"libwes/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libwes/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libwes/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libwes, you can run the following: from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e )","title":"Getting Started"},{"location":"libwes/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description WorkflowRunsApi abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run WorkflowRunsApi get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run WorkflowRunsApi list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events WorkflowRunsApi list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs WorkflowSignalsApi fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal WorkflowSignalsApi get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal WorkflowSignalsApi list_signals GET /v1/workflows/signals Get a list of workflow signals WorkflowSignalsApi succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal WorkflowVersionsApi create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version WorkflowVersionsApi get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version WorkflowVersionsApi launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version WorkflowVersionsApi list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions WorkflowVersionsApi list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions WorkflowVersionsApi update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version WorkflowsApi create_workflow POST /v1/workflows Create a workflow WorkflowsApi get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow WorkflowsApi list_workflows GET /v1/workflows Get a list of workflows WorkflowsApi update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow","title":"Documentation for API Endpoints"},{"location":"libwes/#documentation-for-models","text":"AbortWorkflowRunRequest CreateWorkflowRequest CreateWorkflowVersionRequest ErrorResponse FailWorkflowSignalRequest LaunchWorkflowVersionRequest SucceedWorkflowSignalRequest UpdateWorkflowRequest UpdateWorkflowVersionRequest Workflow WorkflowArgument WorkflowCompact WorkflowConnection WorkflowLanguage WorkflowList WorkflowRun WorkflowRunCompact WorkflowRunHistoryEvent WorkflowRunHistoryEventList WorkflowRunList WorkflowSignal WorkflowSignalCompact WorkflowSignalList WorkflowVersion WorkflowVersionCompact WorkflowVersionList","title":"Documentation For Models"},{"location":"libwes/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libwes/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libwes/#author","text":"","title":"Author"},{"location":"libwes/docs/AbortWorkflowRunRequest/","text":"AbortWorkflowRunRequest \u00b6 Abort a workflow run Properties \u00b6 Name Type Description Notes error str cause str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AbortWorkflowRunRequest"},{"location":"libwes/docs/AbortWorkflowRunRequest/#abortworkflowrunrequest","text":"Abort a workflow run","title":"AbortWorkflowRunRequest"},{"location":"libwes/docs/AbortWorkflowRunRequest/#properties","text":"Name Type Description Notes error str cause str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/CreateWorkflowRequest/","text":"CreateWorkflowRequest \u00b6 Create a workflow and optional version Properties \u00b6 Name Type Description Notes name str description str [optional] organization str [optional] workflow_version CreateWorkflowVersionRequest [optional] tool_class str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateWorkflowRequest"},{"location":"libwes/docs/CreateWorkflowRequest/#createworkflowrequest","text":"Create a workflow and optional version","title":"CreateWorkflowRequest"},{"location":"libwes/docs/CreateWorkflowRequest/#properties","text":"Name Type Description Notes name str description str [optional] organization str [optional] workflow_version CreateWorkflowVersionRequest [optional] tool_class str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/CreateWorkflowVersionRequest/","text":"CreateWorkflowVersionRequest \u00b6 Create a new workflow version under an existing workflow root Properties \u00b6 Name Type Description Notes version str description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str Published Status of the workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateWorkflowVersionRequest"},{"location":"libwes/docs/CreateWorkflowVersionRequest/#createworkflowversionrequest","text":"Create a new workflow version under an existing workflow root","title":"CreateWorkflowVersionRequest"},{"location":"libwes/docs/CreateWorkflowVersionRequest/#properties","text":"Name Type Description Notes version str description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str Published Status of the workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libwes/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libwes/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/FailWorkflowSignalRequest/","text":"FailWorkflowSignalRequest \u00b6 Fail workflow signal request Properties \u00b6 Name Type Description Notes error str Externally provided Error of a signalling action. cause str Externally provided Cause of a failed signalling action. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FailWorkflowSignalRequest"},{"location":"libwes/docs/FailWorkflowSignalRequest/#failworkflowsignalrequest","text":"Fail workflow signal request","title":"FailWorkflowSignalRequest"},{"location":"libwes/docs/FailWorkflowSignalRequest/#properties","text":"Name Type Description Notes error str Externally provided Error of a signalling action. cause str Externally provided Cause of a failed signalling action. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/","text":"GetWorkflowRunHistoryIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowRunHistoryIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/#getworkflowrunhistoryincludeflags","text":"","title":"GetWorkflowRunHistoryIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/","text":"GetWorkflowRunIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowRunIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/#getworkflowrunincludeflags","text":"","title":"GetWorkflowRunIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/","text":"GetWorkflowSignalsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowSignalsIncludeFlags"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/#getworkflowsignalsincludeflags","text":"","title":"GetWorkflowSignalsIncludeFlags"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/","text":"GetWorkflowsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowsIncludeFlags"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/#getworkflowsincludeflags","text":"","title":"GetWorkflowsIncludeFlags"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/","text":"LaunchWorkflowVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name of the workflow run [optional] input object Input for the launched workflow run. Must resolve to a JSON object. [optional] engine_parameters object Runtime options for launching workflows (currently only used for Airflow and otherwise ignored). Must resolve to a JSON object. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LaunchWorkflowVersionRequest"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/#launchworkflowversionrequest","text":"","title":"LaunchWorkflowVersionRequest"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/#properties","text":"Name Type Description Notes name str Name of the workflow run [optional] input object Input for the launched workflow run. Must resolve to a JSON object. [optional] engine_parameters object Runtime options for launching workflows (currently only used for Airflow and otherwise ignored). Must resolve to a JSON object. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/","text":"ListAllWorkflowsVersionsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListAllWorkflowsVersionsIncludeFlags"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/#listallworkflowsversionsincludeflags","text":"","title":"ListAllWorkflowsVersionsIncludeFlags"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/","text":"ListWorkflowRunsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListWorkflowRunsIncludeFlags"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/#listworkflowrunsincludeflags","text":"","title":"ListWorkflowRunsIncludeFlags"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/","text":"ListWorkflowVersionsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListWorkflowVersionsIncludeFlags"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/#listworkflowversionsincludeflags","text":"","title":"ListWorkflowVersionsIncludeFlags"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/","text":"SucceedWorkflowSignalRequest \u00b6 Properties \u00b6 Name Type Description Notes result object External result of a successful signal. Must resolve to a JSON value. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SucceedWorkflowSignalRequest"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/#succeedworkflowsignalrequest","text":"","title":"SucceedWorkflowSignalRequest"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/#properties","text":"Name Type Description Notes result object External result of a successful signal. Must resolve to a JSON value. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ToolClass/","text":"ToolClass \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ToolClass"},{"location":"libwes/docs/ToolClass/#toolclass","text":"","title":"ToolClass"},{"location":"libwes/docs/ToolClass/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/UpdateWorkflowRequest/","text":"UpdateWorkflowRequest \u00b6 Update an existing workflow Properties \u00b6 Name Type Description Notes name str [optional] description str [optional] organization str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateWorkflowRequest"},{"location":"libwes/docs/UpdateWorkflowRequest/#updateworkflowrequest","text":"Update an existing workflow","title":"UpdateWorkflowRequest"},{"location":"libwes/docs/UpdateWorkflowRequest/#properties","text":"Name Type Description Notes name str [optional] description str [optional] organization str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/","text":"UpdateWorkflowVersionRequest \u00b6 Update a workflow version definition using patch semantics Properties \u00b6 Name Type Description Notes version str [optional] description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str New Status for workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateWorkflowVersionRequest"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/#updateworkflowversionrequest","text":"Update a workflow version definition using patch semantics","title":"UpdateWorkflowVersionRequest"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/#properties","text":"Name Type Description Notes version str [optional] description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str New Status for workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/Workflow/","text":"Workflow \u00b6 Details of a workflow Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Workflow"},{"location":"libwes/docs/Workflow/#workflow","text":"Details of a workflow","title":"Workflow"},{"location":"libwes/docs/Workflow/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowArgument/","text":"WorkflowArgument \u00b6 Argument definition Properties \u00b6 Name Type Description Notes name str Name of the argument key value str A simple string value for the argument. Cannot provide both Value and Json at the same time. [optional] json object A JSON value for the argument. Cannot provide both Value and Json at the same time. [optional] options str Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final Some combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowArgument"},{"location":"libwes/docs/WorkflowArgument/#workflowargument","text":"Argument definition","title":"WorkflowArgument"},{"location":"libwes/docs/WorkflowArgument/#properties","text":"Name Type Description Notes name str Name of the argument key value str A simple string value for the argument. Cannot provide both Value and Json at the same time. [optional] json object A JSON value for the argument. Cannot provide both Value and Json at the same time. [optional] options str Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final Some combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowCompact/","text":"WorkflowCompact \u00b6 Compact details of a workflow Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowCompact"},{"location":"libwes/docs/WorkflowCompact/#workflowcompact","text":"Compact details of a workflow","title":"WorkflowCompact"},{"location":"libwes/docs/WorkflowCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowConnection/","text":"WorkflowConnection \u00b6 Defines a connection that can be used in a workflow definition to perform actions Properties \u00b6 Name Type Description Notes name str type str Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2 [optional] host str For API based connections, the Host part of the API endpoint [optional] host_validation_regex str Regex that hosts associated with this connection must meet (when host override by each run is allowed) [optional] credentials str Credentials associated with the connection. Format depends on type of connection. [optional] options str Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride [optional] auto_disable_url str Relative URL (relative to Host) to call in order to disable the credentials [optional] auto_disable_http_method str Http method to use to disable the credentials. Must be POST, PUT or DELETE [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowConnection"},{"location":"libwes/docs/WorkflowConnection/#workflowconnection","text":"Defines a connection that can be used in a workflow definition to perform actions","title":"WorkflowConnection"},{"location":"libwes/docs/WorkflowConnection/#properties","text":"Name Type Description Notes name str type str Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2 [optional] host str For API based connections, the Host part of the API endpoint [optional] host_validation_regex str Regex that hosts associated with this connection must meet (when host override by each run is allowed) [optional] credentials str Credentials associated with the connection. Format depends on type of connection. [optional] options str Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride [optional] auto_disable_url str Relative URL (relative to Host) to call in order to disable the credentials [optional] auto_disable_http_method str Http method to use to disable the credentials. Must be POST, PUT or DELETE [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowLanguage/","text":"WorkflowLanguage \u00b6 Language details about a workflow version Properties \u00b6 Name Type Description Notes name str The name of the workflow language version str The version of the workflow language, if any [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowLanguage"},{"location":"libwes/docs/WorkflowLanguage/#workflowlanguage","text":"Language details about a workflow version","title":"WorkflowLanguage"},{"location":"libwes/docs/WorkflowLanguage/#properties","text":"Name Type Description Notes name str The name of the workflow language version str The version of the workflow language, if any [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowList/","text":"WorkflowList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowList"},{"location":"libwes/docs/WorkflowList/#workflowlist","text":"","title":"WorkflowList"},{"location":"libwes/docs/WorkflowList/#properties","text":"Name Type Description Notes items list[WorkflowCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRun/","text":"WorkflowRun \u00b6 Details of a workflow run Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] input object Input to workflow run, as JSON [optional] output object Output from workflow run, as JSON [optional] definition str Definition of the workflow version [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRun"},{"location":"libwes/docs/WorkflowRun/#workflowrun","text":"Details of a workflow run","title":"WorkflowRun"},{"location":"libwes/docs/WorkflowRun/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] input object Input to workflow run, as JSON [optional] output object Output from workflow run, as JSON [optional] definition str Definition of the workflow version [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunCompact/","text":"WorkflowRunCompact \u00b6 Compact details of a workflow run Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunCompact"},{"location":"libwes/docs/WorkflowRunCompact/#workflowruncompact","text":"Compact details of a workflow run","title":"WorkflowRunCompact"},{"location":"libwes/docs/WorkflowRunCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunHistoryEvent/","text":"WorkflowRunHistoryEvent \u00b6 Information about a specific event in the workflow run history Properties \u00b6 Name Type Description Notes name str Name of the event, such as the name of the step/task for state-level events and run name for run-level events [optional] event_id int Identifier for the history event, if any [optional] previous_event_id int Identifier for any previous history event (if available) [optional] event_type str Type of history event. The associated details entry will be populated based on the type of event. [optional] timestamp datetime Timestamp for the history event [optional] event_details object Details for history event [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunHistoryEvent"},{"location":"libwes/docs/WorkflowRunHistoryEvent/#workflowrunhistoryevent","text":"Information about a specific event in the workflow run history","title":"WorkflowRunHistoryEvent"},{"location":"libwes/docs/WorkflowRunHistoryEvent/#properties","text":"Name Type Description Notes name str Name of the event, such as the name of the step/task for state-level events and run name for run-level events [optional] event_id int Identifier for the history event, if any [optional] previous_event_id int Identifier for any previous history event (if available) [optional] event_type str Type of history event. The associated details entry will be populated based on the type of event. [optional] timestamp datetime Timestamp for the history event [optional] event_details object Details for history event [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunHistoryEventList/","text":"WorkflowRunHistoryEventList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowRunHistoryEvent] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunHistoryEventList"},{"location":"libwes/docs/WorkflowRunHistoryEventList/#workflowrunhistoryeventlist","text":"","title":"WorkflowRunHistoryEventList"},{"location":"libwes/docs/WorkflowRunHistoryEventList/#properties","text":"Name Type Description Notes items list[WorkflowRunHistoryEvent] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunList/","text":"WorkflowRunList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowRunCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunList"},{"location":"libwes/docs/WorkflowRunList/#workflowrunlist","text":"","title":"WorkflowRunList"},{"location":"libwes/docs/WorkflowRunList/#properties","text":"Name Type Description Notes items list[WorkflowRunCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunStatus/","text":"WorkflowRunStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunStatus"},{"location":"libwes/docs/WorkflowRunStatus/#workflowrunstatus","text":"","title":"WorkflowRunStatus"},{"location":"libwes/docs/WorkflowRunStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunsApi/","text":"libica.openapi.libwes.WorkflowRunsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs abort_workflow_run \u00b6 WorkflowRun abort_workflow_run(run_id, include=include, body=body) Abort a workflow run Aborts the workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] body AbortWorkflowRunRequest [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the aborted workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow_run \u00b6 WorkflowRun get_workflow_run(run_id, include=include) Get the details of a workflow run Gets the details of a workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) try : # Get the details of a workflow run api_response = api_instance . get_workflow_run ( run_id , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->get_workflow_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_run_history \u00b6 WorkflowRunHistoryEventList list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token) Get a list of workflow run history events Gets a list of history events for a workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run sort = 'eventId asc' # str | (optional) (default to 'eventId asc') include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) try : # Get a list of workflow run history events api_response = api_instance . list_workflow_run_history ( run_id , sort = sort , include = include , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_run_history: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run sort str [optional] [default to 'eventId asc'] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] Return type \u00b6 WorkflowRunHistoryEventList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow run history events. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_runs \u00b6 WorkflowRunList list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow runs Gets a list of workflow runs. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) status = [ 'status_example' ] # list[str] | (optional) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow runs api_response = api_instance . list_workflow_runs ( status = status , tenant_id = tenant_id , name = name , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_runs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes status list[str] [optional] tenant_id str ID of the tenant [optional] name str [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowRunList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow runs that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowRunsApi"},{"location":"libwes/docs/WorkflowRunsApi/#libicaopenapilibwesworkflowrunsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs","title":"libica.openapi.libwes.WorkflowRunsApi"},{"location":"libwes/docs/WorkflowRunsApi/#abort_workflow_run","text":"WorkflowRun abort_workflow_run(run_id, include=include, body=body) Abort a workflow run Aborts the workflow run with a given ID.","title":"abort_workflow_run"},{"location":"libwes/docs/WorkflowRunsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] body AbortWorkflowRunRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details","text":"Status code Description Response headers 200 Details of the aborted workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#get_workflow_run","text":"WorkflowRun get_workflow_run(run_id, include=include) Get the details of a workflow run Gets the details of a workflow run with a given ID.","title":"get_workflow_run"},{"location":"libwes/docs/WorkflowRunsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) try : # Get the details of a workflow run api_response = api_instance . get_workflow_run ( run_id , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->get_workflow_run: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_1","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_1","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_run_history","text":"WorkflowRunHistoryEventList list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token) Get a list of workflow run history events Gets a list of history events for a workflow run with a given ID.","title":"list_workflow_run_history"},{"location":"libwes/docs/WorkflowRunsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run sort = 'eventId asc' # str | (optional) (default to 'eventId asc') include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) try : # Get a list of workflow run history events api_response = api_instance . list_workflow_run_history ( run_id , sort = sort , include = include , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_run_history: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_2","text":"Name Type Description Notes run_id str ID of the workflow run sort str [optional] [default to 'eventId asc'] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_2","text":"WorkflowRunHistoryEventList","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflow run history events. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_runs","text":"WorkflowRunList list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow runs Gets a list of workflow runs.","title":"list_workflow_runs"},{"location":"libwes/docs/WorkflowRunsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) status = [ 'status_example' ] # list[str] | (optional) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow runs api_response = api_instance . list_workflow_runs ( status = status , tenant_id = tenant_id , name = name , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_runs: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_3","text":"Name Type Description Notes status list[str] [optional] tenant_id str ID of the tenant [optional] name str [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_3","text":"WorkflowRunList","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_3","text":"Status code Description Response headers 200 Paged list of workflow runs that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignal/","text":"WorkflowSignal \u00b6 Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignal"},{"location":"libwes/docs/WorkflowSignal/#workflowsignal","text":"","title":"WorkflowSignal"},{"location":"libwes/docs/WorkflowSignal/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalCompact/","text":"WorkflowSignalCompact \u00b6 Compact details of a signal Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignalCompact"},{"location":"libwes/docs/WorkflowSignalCompact/#workflowsignalcompact","text":"Compact details of a signal","title":"WorkflowSignalCompact"},{"location":"libwes/docs/WorkflowSignalCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalList/","text":"WorkflowSignalList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowSignalCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignalList"},{"location":"libwes/docs/WorkflowSignalList/#workflowsignallist","text":"","title":"WorkflowSignalList"},{"location":"libwes/docs/WorkflowSignalList/#properties","text":"Name Type Description Notes items list[WorkflowSignalCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalsApi/","text":"libica.openapi.libwes.WorkflowSignalsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal list_signals GET /v1/workflows/signals Get a list of workflow signals succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal fail_signal \u00b6 WorkflowSignal fail_signal(signal_id, body=body) Fail a workflow signal Responds to a pending workflow signal with a failure result. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . FailWorkflowSignalRequest () # FailWorkflowSignalRequest | (optional) try : # Fail a workflow signal api_response = api_instance . fail_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->fail_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal body FailWorkflowSignalRequest [optional] Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns the failed signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_signal \u00b6 WorkflowSignal get_signal(signal_id) Get the details of a workflow signal Gets the details of a workflow signal with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal try : # Get the details of a workflow signal api_response = api_instance . get_signal ( signal_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->get_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_signals \u00b6 WorkflowSignalList list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow signals Gets a list of workflow signals. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow signals api_response = api_instance . list_signals ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->list_signals: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowSignalList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow signals that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] succeed_signal \u00b6 WorkflowSignal succeed_signal(signal_id, body=body) Succeed a workflow signal Responds to a pending workflow signal with a successful result. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . SucceedWorkflowSignalRequest () # SucceedWorkflowSignalRequest | (optional) try : # Succeed a workflow signal api_response = api_instance . succeed_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->succeed_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal body SucceedWorkflowSignalRequest [optional] Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns the succeeded signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowSignalsApi"},{"location":"libwes/docs/WorkflowSignalsApi/#libicaopenapilibwesworkflowsignalsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal list_signals GET /v1/workflows/signals Get a list of workflow signals succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal","title":"libica.openapi.libwes.WorkflowSignalsApi"},{"location":"libwes/docs/WorkflowSignalsApi/#fail_signal","text":"WorkflowSignal fail_signal(signal_id, body=body) Fail a workflow signal Responds to a pending workflow signal with a failure result.","title":"fail_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . FailWorkflowSignalRequest () # FailWorkflowSignalRequest | (optional) try : # Fail a workflow signal api_response = api_instance . fail_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->fail_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters","text":"Name Type Description Notes signal_id str ID of the workflow signal body FailWorkflowSignalRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details","text":"Status code Description Response headers 200 Returns the failed signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#get_signal","text":"WorkflowSignal get_signal(signal_id) Get the details of a workflow signal Gets the details of a workflow signal with a given ID.","title":"get_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal try : # Get the details of a workflow signal api_response = api_instance . get_signal ( signal_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->get_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_1","text":"Name Type Description Notes signal_id str ID of the workflow signal","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_1","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#list_signals","text":"WorkflowSignalList list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow signals Gets a list of workflow signals.","title":"list_signals"},{"location":"libwes/docs/WorkflowSignalsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow signals api_response = api_instance . list_signals ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->list_signals: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_2","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_2","text":"WorkflowSignalList","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflow signals that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#succeed_signal","text":"WorkflowSignal succeed_signal(signal_id, body=body) Succeed a workflow signal Responds to a pending workflow signal with a successful result.","title":"succeed_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . SucceedWorkflowSignalRequest () # SucceedWorkflowSignalRequest | (optional) try : # Succeed a workflow signal api_response = api_instance . succeed_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->succeed_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_3","text":"Name Type Description Notes signal_id str ID of the workflow signal body SucceedWorkflowSignalRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_3","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_3","text":"Status code Description Response headers 200 Returns the succeeded signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersion/","text":"WorkflowVersion \u00b6 Details of a Workflow version definition Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] definition str Definition of the workflow version [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersion"},{"location":"libwes/docs/WorkflowVersion/#workflowversion","text":"Details of a Workflow version definition","title":"WorkflowVersion"},{"location":"libwes/docs/WorkflowVersion/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] definition str Definition of the workflow version [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionCompact/","text":"WorkflowVersionCompact \u00b6 Compact details of a Workflow version definition Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersionCompact"},{"location":"libwes/docs/WorkflowVersionCompact/#workflowversioncompact","text":"Compact details of a Workflow version definition","title":"WorkflowVersionCompact"},{"location":"libwes/docs/WorkflowVersionCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionList/","text":"WorkflowVersionList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowVersionCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersionList"},{"location":"libwes/docs/WorkflowVersionList/#workflowversionlist","text":"","title":"WorkflowVersionList"},{"location":"libwes/docs/WorkflowVersionList/#properties","text":"Name Type Description Notes items list[WorkflowVersionCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionsApi/","text":"libica.openapi.libwes.WorkflowVersionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version create_workflow_version \u00b6 WorkflowVersion create_workflow_version(workflow_id, body=body) Create a new workflow version Creates a new workflow version with a given workflow ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . CreateWorkflowVersionRequest () # CreateWorkflowVersionRequest | (optional) try : # Create a new workflow version api_response = api_instance . create_workflow_version ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->create_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow body CreateWorkflowVersionRequest [optional] Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the created workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow_version \u00b6 WorkflowVersion get_workflow_version(workflow_id, version_name) Get the details of a workflow version Gets the details for a workflow version with a given workflow ID and version name. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version try : # Get the details of a workflow version api_response = api_instance . get_workflow_version ( workflow_id , version_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->get_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] launch_workflow_version \u00b6 WorkflowRun launch_workflow_version(workflow_id, version_name, include=include, body=body) Launch a workflow version Launches a workflow version with a given workflow ID and version name. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . LaunchWorkflowVersionRequest () # LaunchWorkflowVersionRequest | (optional) try : # Launch a workflow version api_response = api_instance . launch_workflow_version ( workflow_id , version_name , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->launch_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version include list[str] Comma-separated list of properties to include in the response [optional] body LaunchWorkflowVersionRequest [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_all_workflow_versions \u00b6 WorkflowVersionList list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of all workflow versions Gets a list of workflow versions across all workflows. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of all workflow versions api_response = api_instance . list_all_workflow_versions ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_all_workflow_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowVersionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow versions across all workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_versions \u00b6 WorkflowVersionList list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow versions Gets a list of workflow versions with a given workflow ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow versions api_response = api_instance . list_workflow_versions ( workflow_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_workflow_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowVersionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow versions that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_workflow_version \u00b6 WorkflowVersion update_workflow_version(workflow_id, version_name, body=body) Update an existing workflow version Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version body = libica . openapi . libwes . UpdateWorkflowVersionRequest () # UpdateWorkflowVersionRequest | (optional) try : # Update an existing workflow version api_response = api_instance . update_workflow_version ( workflow_id , version_name , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->update_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version body UpdateWorkflowVersionRequest [optional] Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowVersionsApi"},{"location":"libwes/docs/WorkflowVersionsApi/#libicaopenapilibwesworkflowversionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version","title":"libica.openapi.libwes.WorkflowVersionsApi"},{"location":"libwes/docs/WorkflowVersionsApi/#create_workflow_version","text":"WorkflowVersion create_workflow_version(workflow_id, body=body) Create a new workflow version Creates a new workflow version with a given workflow ID.","title":"create_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . CreateWorkflowVersionRequest () # CreateWorkflowVersionRequest | (optional) try : # Create a new workflow version api_response = api_instance . create_workflow_version ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->create_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters","text":"Name Type Description Notes workflow_id str ID of the workflow body CreateWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details","text":"Status code Description Response headers 201 Details of the created workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#get_workflow_version","text":"WorkflowVersion get_workflow_version(workflow_id, version_name) Get the details of a workflow version Gets the details for a workflow version with a given workflow ID and version name.","title":"get_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version try : # Get the details of a workflow version api_response = api_instance . get_workflow_version ( workflow_id , version_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->get_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_1","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_1","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#launch_workflow_version","text":"WorkflowRun launch_workflow_version(workflow_id, version_name, include=include, body=body) Launch a workflow version Launches a workflow version with a given workflow ID and version name.","title":"launch_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . LaunchWorkflowVersionRequest () # LaunchWorkflowVersionRequest | (optional) try : # Launch a workflow version api_response = api_instance . launch_workflow_version ( workflow_id , version_name , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->launch_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_2","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version include list[str] Comma-separated list of properties to include in the response [optional] body LaunchWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_2","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_2","text":"Status code Description Response headers 201 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#list_all_workflow_versions","text":"WorkflowVersionList list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of all workflow versions Gets a list of workflow versions across all workflows.","title":"list_all_workflow_versions"},{"location":"libwes/docs/WorkflowVersionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of all workflow versions api_response = api_instance . list_all_workflow_versions ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_all_workflow_versions: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_3","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_3","text":"WorkflowVersionList","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Paged list of workflow versions across all workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#list_workflow_versions","text":"WorkflowVersionList list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow versions Gets a list of workflow versions with a given workflow ID.","title":"list_workflow_versions"},{"location":"libwes/docs/WorkflowVersionsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow versions api_response = api_instance . list_workflow_versions ( workflow_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_workflow_versions: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_4","text":"Name Type Description Notes workflow_id str ID of the workflow include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_4","text":"WorkflowVersionList","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_4","text":"Status code Description Response headers 200 Paged list of workflow versions that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#update_workflow_version","text":"WorkflowVersion update_workflow_version(workflow_id, version_name, body=body) Update an existing workflow version Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call.","title":"update_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version body = libica . openapi . libwes . UpdateWorkflowVersionRequest () # UpdateWorkflowVersionRequest | (optional) try : # Update an existing workflow version api_response = api_instance . update_workflow_version ( workflow_id , version_name , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->update_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_5","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version body UpdateWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_5","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_5","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_5","text":"Status code Description Response headers 200 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/","text":"libica.openapi.libwes.WorkflowsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow POST /v1/workflows Create a workflow get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow list_workflows GET /v1/workflows Get a list of workflows update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow create_workflow \u00b6 Workflow create_workflow(body=body) Create a workflow Creates a new workflow and version (if provided). Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) body = libica . openapi . libwes . CreateWorkflowRequest () # CreateWorkflowRequest | (optional) try : # Create a workflow api_response = api_instance . create_workflow ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->create_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateWorkflowRequest [optional] Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the newly created workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow \u00b6 Workflow get_workflow(workflow_id) Get the details of a workflow Gets the details of a workflow with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow try : # Get the details of a workflow api_response = api_instance . get_workflow ( workflow_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->get_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflows \u00b6 WorkflowList list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflows Gets a list of workflows. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) categories = [ 'categories_example' ] # list[str] | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflows api_response = api_instance . list_workflows ( tenant_id = tenant_id , name = name , categories = categories , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->list_workflows: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] name str [optional] categories list[str] [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_workflow \u00b6 Workflow update_workflow(workflow_id, body=body) Update an existing workflow Updates the workflow with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . UpdateWorkflowRequest () # UpdateWorkflowRequest | (optional) try : # Update an existing workflow api_response = api_instance . update_workflow ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->update_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow body UpdateWorkflowRequest [optional] Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns updated workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowsApi"},{"location":"libwes/docs/WorkflowsApi/#libicaopenapilibwesworkflowsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow POST /v1/workflows Create a workflow get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow list_workflows GET /v1/workflows Get a list of workflows update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow","title":"libica.openapi.libwes.WorkflowsApi"},{"location":"libwes/docs/WorkflowsApi/#create_workflow","text":"Workflow create_workflow(body=body) Create a workflow Creates a new workflow and version (if provided).","title":"create_workflow"},{"location":"libwes/docs/WorkflowsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) body = libica . openapi . libwes . CreateWorkflowRequest () # CreateWorkflowRequest | (optional) try : # Create a workflow api_response = api_instance . create_workflow ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->create_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters","text":"Name Type Description Notes body CreateWorkflowRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details","text":"Status code Description Response headers 201 Details of the newly created workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#get_workflow","text":"Workflow get_workflow(workflow_id) Get the details of a workflow Gets the details of a workflow with a given ID.","title":"get_workflow"},{"location":"libwes/docs/WorkflowsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow try : # Get the details of a workflow api_response = api_instance . get_workflow ( workflow_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->get_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_1","text":"Name Type Description Notes workflow_id str ID of the workflow","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_1","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#list_workflows","text":"WorkflowList list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflows Gets a list of workflows.","title":"list_workflows"},{"location":"libwes/docs/WorkflowsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) categories = [ 'categories_example' ] # list[str] | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflows api_response = api_instance . list_workflows ( tenant_id = tenant_id , name = name , categories = categories , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->list_workflows: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_2","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] name str [optional] categories list[str] [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_2","text":"WorkflowList","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#update_workflow","text":"Workflow update_workflow(workflow_id, body=body) Update an existing workflow Updates the workflow with a given ID.","title":"update_workflow"},{"location":"libwes/docs/WorkflowsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . UpdateWorkflowRequest () # UpdateWorkflowRequest | (optional) try : # Update an existing workflow api_response = api_instance . update_workflow ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->update_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_3","text":"Name Type Description Notes workflow_id str ID of the workflow body UpdateWorkflowRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_3","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_3","text":"Status code Description Response headers 200 Returns updated workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"}]}