{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to libica.openapi documentation \u00b6 Python SDK for Illumina Connected Analytics (ICA) -- https://umccr-illumina.github.io/libica/ Tested for Python 3.6, 3.7, 3.8, 3.9 Test Coverage PyDoc Wiki SDK for ICA v1 \u00b6 libwes libtes libgds libens libconsole SDK for ICA v2 \u00b6 v2 License \u00b6 MIT License and DISCLAIMER","title":"Welcome to libica.openapi documentation"},{"location":"#welcome-to-libicaopenapi-documentation","text":"Python SDK for Illumina Connected Analytics (ICA) -- https://umccr-illumina.github.io/libica/ Tested for Python 3.6, 3.7, 3.8, 3.9 Test Coverage PyDoc Wiki","title":"Welcome to libica.openapi documentation"},{"location":"#sdk-for-ica-v1","text":"libwes libtes libgds libens libconsole","title":"SDK for ICA v1"},{"location":"#sdk-for-ica-v2","text":"v2","title":"SDK for ICA v2"},{"location":"#license","text":"MIT License and DISCLAIMER","title":"License"},{"location":"libconsole/","text":"libica.openapi.libconsole \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libconsole package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:30.963558+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libconsole, you can run the following: from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description AccountsApi get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token HealthApi service_health GET /v1/health Returns the health status for all services. ProjectsApi list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. RegionsApi list_regions GET /v1/regions Get a list of available regions TokensApi create_token POST /v1/tokens Creates a JWT token to call IAP services. TokensApi get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token TokensApi refresh_token POST /v1/tokens:refresh Refresh session psToken. TokensApi revoke_token DELETE /v1/tokens Revokes an access token. UsagesApi get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_periods GET /v1/usages/periods Get periods detail info WorkgroupsApi list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Documentation For Models \u00b6 AccessTokenRequest AccountResponse Domain ErrorResponse HealthCheckStatuses PeriodUsageSummary ProductUsage Project ProjectPagedItems Region ServiceHealthResponse SystemHealthResponse TokenDetailResponse TokenResponse UsageResponse User UserAggregatedUsage Workgroup WorkgroupResponse Documentation For Authorization \u00b6 Basic \u00b6 Type : HTTP basic authentication Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libconsole"},{"location":"libconsole/#libicaopenapilibconsole","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libconsole package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:30.963558+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libconsole"},{"location":"libconsole/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libconsole/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libconsole/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libconsole, you can run the following: from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e )","title":"Getting Started"},{"location":"libconsole/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description AccountsApi get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token HealthApi service_health GET /v1/health Returns the health status for all services. ProjectsApi list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. RegionsApi list_regions GET /v1/regions Get a list of available regions TokensApi create_token POST /v1/tokens Creates a JWT token to call IAP services. TokensApi get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token TokensApi refresh_token POST /v1/tokens:refresh Refresh session psToken. TokensApi revoke_token DELETE /v1/tokens Revokes an access token. UsagesApi get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. UsagesApi get_usage_periods GET /v1/usages/periods Get periods detail info WorkgroupsApi list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token","title":"Documentation for API Endpoints"},{"location":"libconsole/#documentation-for-models","text":"AccessTokenRequest AccountResponse Domain ErrorResponse HealthCheckStatuses PeriodUsageSummary ProductUsage Project ProjectPagedItems Region ServiceHealthResponse SystemHealthResponse TokenDetailResponse TokenResponse UsageResponse User UserAggregatedUsage Workgroup WorkgroupResponse","title":"Documentation For Models"},{"location":"libconsole/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libconsole/#basic","text":"Type : HTTP basic authentication","title":"Basic"},{"location":"libconsole/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libconsole/#author","text":"","title":"Author"},{"location":"libconsole/docs/AccessTokenRequest/","text":"AccessTokenRequest \u00b6 Access token passed into an api request Properties \u00b6 Name Type Description Notes access_token str This is either a psToken or a JWT token depending on the context of the call. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AccessTokenRequest"},{"location":"libconsole/docs/AccessTokenRequest/#accesstokenrequest","text":"Access token passed into an api request","title":"AccessTokenRequest"},{"location":"libconsole/docs/AccessTokenRequest/#properties","text":"Name Type Description Notes access_token str This is either a psToken or a JWT token depending on the context of the call. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/AccountResponse/","text":"AccountResponse \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] type str [optional] name str [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AccountResponse"},{"location":"libconsole/docs/AccountResponse/#accountresponse","text":"","title":"AccountResponse"},{"location":"libconsole/docs/AccountResponse/#properties","text":"Name Type Description Notes id str [optional] type str [optional] name str [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/AccountsApi/","text":"libica.openapi.libconsole.AccountsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token get_account \u00b6 AccountResponse get_account(account_id) Get requested account id info require authorization Bearer token Get requested account id info Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes account_id str Return type \u00b6 AccountResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The account information returned successfully - 401 The provided token is unauthorized. - 403 You do not have permission to access this resource. - 404 The resource was not found at the given path. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.AccountsApi"},{"location":"libconsole/docs/AccountsApi/#libicaopenapilibconsoleaccountsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token","title":"libica.openapi.libconsole.AccountsApi"},{"location":"libconsole/docs/AccountsApi/#get_account","text":"AccountResponse get_account(account_id) Get requested account id info require authorization Bearer token Get requested account id info","title":"get_account"},{"location":"libconsole/docs/AccountsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . AccountsApi ( api_client ) account_id = 'account_id_example' # str | try : # Get requested account id info require authorization Bearer token api_response = api_instance . get_account ( account_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling AccountsApi->get_account: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/AccountsApi/#parameters","text":"Name Type Description Notes account_id str","title":"Parameters"},{"location":"libconsole/docs/AccountsApi/#return-type","text":"AccountResponse","title":"Return type"},{"location":"libconsole/docs/AccountsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/AccountsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/AccountsApi/#http-response-details","text":"Status code Description Response headers 200 The account information returned successfully - 401 The provided token is unauthorized. - 403 You do not have permission to access this resource. - 404 The resource was not found at the given path. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/Domain/","text":"Domain \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Domain"},{"location":"libconsole/docs/Domain/#domain","text":"","title":"Domain"},{"location":"libconsole/docs/Domain/#properties","text":"Name Type Description Notes id str [optional] name str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libconsole/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libconsole/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/HealthApi/","text":"libica.openapi.libconsole.HealthApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description service_health GET /v1/health Returns the health status for all services. service_health \u00b6 SystemHealthResponse service_health() Returns the health status for all services. Returns the health status for all services. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 SystemHealthResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Health check succeeded - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.HealthApi"},{"location":"libconsole/docs/HealthApi/#libicaopenapilibconsolehealthapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description service_health GET /v1/health Returns the health status for all services.","title":"libica.openapi.libconsole.HealthApi"},{"location":"libconsole/docs/HealthApi/#service_health","text":"SystemHealthResponse service_health() Returns the health status for all services. Returns the health status for all services.","title":"service_health"},{"location":"libconsole/docs/HealthApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . HealthApi ( api_client ) try : # Returns the health status for all services. api_response = api_instance . service_health () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling HealthApi->service_health: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/HealthApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/HealthApi/#return-type","text":"SystemHealthResponse","title":"Return type"},{"location":"libconsole/docs/HealthApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/HealthApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/HealthApi/#http-response-details","text":"Status code Description Response headers 200 Health check succeeded - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/HealthCheckStatuses/","text":"HealthCheckStatuses \u00b6 Health status Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"HealthCheckStatuses"},{"location":"libconsole/docs/HealthCheckStatuses/#healthcheckstatuses","text":"Health status","title":"HealthCheckStatuses"},{"location":"libconsole/docs/HealthCheckStatuses/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/PeriodUsageSummary/","text":"PeriodUsageSummary \u00b6 Properties \u00b6 Name Type Description Notes start datetime [optional] end datetime [optional] i_credit int [optional] total_usages list[ProductUsage] [optional] user_aggregated_usages list[UserAggregatedUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PeriodUsageSummary"},{"location":"libconsole/docs/PeriodUsageSummary/#periodusagesummary","text":"","title":"PeriodUsageSummary"},{"location":"libconsole/docs/PeriodUsageSummary/#properties","text":"Name Type Description Notes start datetime [optional] end datetime [optional] i_credit int [optional] total_usages list[ProductUsage] [optional] user_aggregated_usages list[UserAggregatedUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProductUsage/","text":"ProductUsage \u00b6 Properties \u00b6 Name Type Description Notes type str amount float unit str i_credit float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProductUsage"},{"location":"libconsole/docs/ProductUsage/#productusage","text":"","title":"ProductUsage"},{"location":"libconsole/docs/ProductUsage/#properties","text":"Name Type Description Notes type str amount float unit str i_credit float [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/Project/","text":"Project \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] urn str [optional] name str [optional] owner str [optional] time_created datetime [optional] time_modified datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Project"},{"location":"libconsole/docs/Project/#project","text":"","title":"Project"},{"location":"libconsole/docs/Project/#properties","text":"Name Type Description Notes id str [optional] urn str [optional] name str [optional] owner str [optional] time_created datetime [optional] time_modified datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProjectPagedItems/","text":"ProjectPagedItems \u00b6 Paged list response Properties \u00b6 Name Type Description Notes items list[Project] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPagedItems"},{"location":"libconsole/docs/ProjectPagedItems/#projectpageditems","text":"Paged list response","title":"ProjectPagedItems"},{"location":"libconsole/docs/ProjectPagedItems/#properties","text":"Name Type Description Notes items list[Project] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/ProjectsApi/","text":"libica.openapi.libconsole.ProjectsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. list_projects \u00b6 ProjectPagedItems list_projects(page_token=page_token) Get a list of available projects. Requires user authorization Bearer token. Get a list of available projects Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes page_token str [optional] Return type \u00b6 ProjectPagedItems Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Projects returned successfully - 400 The provided page token is invalid. - 401 The provided access token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.ProjectsApi"},{"location":"libconsole/docs/ProjectsApi/#libicaopenapilibconsoleprojectsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token.","title":"libica.openapi.libconsole.ProjectsApi"},{"location":"libconsole/docs/ProjectsApi/#list_projects","text":"ProjectPagedItems list_projects(page_token=page_token) Get a list of available projects. Requires user authorization Bearer token. Get a list of available projects","title":"list_projects"},{"location":"libconsole/docs/ProjectsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . ProjectsApi ( api_client ) page_token = 'page_token_example' # str | (optional) try : # Get a list of available projects. Requires user authorization Bearer token. api_response = api_instance . list_projects ( page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling ProjectsApi->list_projects: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/ProjectsApi/#parameters","text":"Name Type Description Notes page_token str [optional]","title":"Parameters"},{"location":"libconsole/docs/ProjectsApi/#return-type","text":"ProjectPagedItems","title":"Return type"},{"location":"libconsole/docs/ProjectsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/ProjectsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/ProjectsApi/#http-response-details","text":"Status code Description Response headers 200 Projects returned successfully - 400 The provided page token is invalid. - 401 The provided access token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/Region/","text":"Region \u00b6 Resource representing environment details Properties \u00b6 Name Type Description Notes name str Name of the environment [optional] display_name str Display name for the environment [optional] base_url str BaseUrl for the environment [optional] is_enabled bool True if the environment is enabled [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Region"},{"location":"libconsole/docs/Region/#region","text":"Resource representing environment details","title":"Region"},{"location":"libconsole/docs/Region/#properties","text":"Name Type Description Notes name str Name of the environment [optional] display_name str Display name for the environment [optional] base_url str BaseUrl for the environment [optional] is_enabled bool True if the environment is enabled [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/RegionsApi/","text":"libica.openapi.libconsole.RegionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_regions GET /v1/regions Get a list of available regions list_regions \u00b6 list[Region] list_regions(instrument_type=instrument_type, version=version) Get a list of available regions Get a list of available regions Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes instrument_type str Instrument type [optional] version str Instrument version [optional] Return type \u00b6 list[Region] Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Regions found and returned successfully. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.RegionsApi"},{"location":"libconsole/docs/RegionsApi/#libicaopenapilibconsoleregionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_regions GET /v1/regions Get a list of available regions","title":"libica.openapi.libconsole.RegionsApi"},{"location":"libconsole/docs/RegionsApi/#list_regions","text":"list[Region] list_regions(instrument_type=instrument_type, version=version) Get a list of available regions Get a list of available regions","title":"list_regions"},{"location":"libconsole/docs/RegionsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . RegionsApi ( api_client ) instrument_type = 'instrument_type_example' # str | Instrument type (optional) version = 'version_example' # str | Instrument version (optional) try : # Get a list of available regions api_response = api_instance . list_regions ( instrument_type = instrument_type , version = version ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling RegionsApi->list_regions: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/RegionsApi/#parameters","text":"Name Type Description Notes instrument_type str Instrument type [optional] version str Instrument version [optional]","title":"Parameters"},{"location":"libconsole/docs/RegionsApi/#return-type","text":"list[Region]","title":"Return type"},{"location":"libconsole/docs/RegionsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/RegionsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/RegionsApi/#http-response-details","text":"Status code Description Response headers 200 Regions found and returned successfully. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/ServiceHealthResponse/","text":"ServiceHealthResponse \u00b6 Describes the individual health of all services in the platform Properties \u00b6 Name Type Description Notes name str Name of the service [optional] status HealthCheckStatuses [optional] version str Current version for the deployed service [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ServiceHealthResponse"},{"location":"libconsole/docs/ServiceHealthResponse/#servicehealthresponse","text":"Describes the individual health of all services in the platform","title":"ServiceHealthResponse"},{"location":"libconsole/docs/ServiceHealthResponse/#properties","text":"Name Type Description Notes name str Name of the service [optional] status HealthCheckStatuses [optional] version str Current version for the deployed service [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/SystemHealthResponse/","text":"SystemHealthResponse \u00b6 The overall health of the platform Properties \u00b6 Name Type Description Notes status HealthCheckStatuses [optional] details list[ServiceHealthResponse] Service health details [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemHealthResponse"},{"location":"libconsole/docs/SystemHealthResponse/#systemhealthresponse","text":"The overall health of the platform","title":"SystemHealthResponse"},{"location":"libconsole/docs/SystemHealthResponse/#properties","text":"Name Type Description Notes status HealthCheckStatuses [optional] details list[ServiceHealthResponse] Service health details [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokenDetailResponse/","text":"TokenDetailResponse \u00b6 Properties \u00b6 Name Type Description Notes uid str [optional] name str [optional] username str [optional] current_workgroup Workgroup [optional] tid str [optional] acls list[str] [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TokenDetailResponse"},{"location":"libconsole/docs/TokenDetailResponse/#tokendetailresponse","text":"","title":"TokenDetailResponse"},{"location":"libconsole/docs/TokenDetailResponse/#properties","text":"Name Type Description Notes uid str [optional] name str [optional] username str [optional] current_workgroup Workgroup [optional] tid str [optional] acls list[str] [optional] domain Domain [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokenResponse/","text":"TokenResponse \u00b6 Response payload for token create Properties \u00b6 Name Type Description Notes access_token str The returned token is either a psToken or a JWT token depending on the context of the call. [optional] token_type str The type of token requested. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TokenResponse"},{"location":"libconsole/docs/TokenResponse/#tokenresponse","text":"Response payload for token create","title":"TokenResponse"},{"location":"libconsole/docs/TokenResponse/#properties","text":"Name Type Description Notes access_token str The returned token is either a psToken or a JWT token depending on the context of the call. [optional] token_type str The type of token requested. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/TokensApi/","text":"libica.openapi.libconsole.TokensApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_token POST /v1/tokens Creates a JWT token to call IAP services. get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token refresh_token POST /v1/tokens:refresh Refresh session psToken. revoke_token DELETE /v1/tokens Revokes an access token. create_token \u00b6 TokenResponse create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token) Creates a JWT token to call IAP services. This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken, Basic Base64 encoded username:password or Basic with apiKey. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes x_api_key str Api Key can be passed in header to generate a JWT. [optional] client_id str Optionally pass client Id from calling app to set as authorized party on JWT. [optional] api_key str OBSOLETE: api key should now be passed as as an X-API-Key header. [optional] domain str Optionally pass the domain name you are logging into [optional] data str Data is a custom meta data field that will be applied to the session field in the JWT payload. [optional] scopes list[str] Scopes can be passed in during token generation to limit the token to particular scopes. [optional] cwid str Set the current workgroup on the token. Used for aligning resources to a workgroup. [optional] cid str Set the current context on the token. Used for aligning resources to a context. [optional] return_session_token bool By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. [optional] Return type \u00b6 TokenResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The Token is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_token_details \u00b6 TokenDetailResponse get_token_details() Get current tokens info require authorization Bearer token Get token details Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 TokenDetailResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Token details returned successfully - 401 The token provided is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] refresh_token \u00b6 TokenResponse refresh_token(body=body) Refresh session psToken. This endpoint extends the session for the psToken. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body AccessTokenRequest Access token request accepts a psToken in the access_token field in the body of the request. [optional] Return type \u00b6 TokenResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The Token was refreshed successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The token is no longer able to be refreshed. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] revoke_token \u00b6 revoke_token(body=body) Revokes an access token. This endpoint revokes the access token that is passed in. Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body AccessTokenRequest Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. [optional] Return type \u00b6 void (empty response body) Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 204 Succeeded and the token has been revoked. - 400 An invalid or missing input parameter will result in a bad request.\\\" - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.TokensApi"},{"location":"libconsole/docs/TokensApi/#libicaopenapilibconsoletokensapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_token POST /v1/tokens Creates a JWT token to call IAP services. get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token refresh_token POST /v1/tokens:refresh Refresh session psToken. revoke_token DELETE /v1/tokens Revokes an access token.","title":"libica.openapi.libconsole.TokensApi"},{"location":"libconsole/docs/TokensApi/#create_token","text":"TokenResponse create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token) Creates a JWT token to call IAP services. This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken, Basic Base64 encoded username:password or Basic with apiKey.","title":"create_token"},{"location":"libconsole/docs/TokensApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional) client_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional) api_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional) domain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional) data = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional) scopes = [ 'scopes_example' ] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional) cwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional) cid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional) return_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional) try : # Creates a JWT token to call IAP services. api_response = api_instance . create_token ( x_api_key = x_api_key , client_id = client_id , api_key = api_key , domain = domain , data = data , scopes = scopes , cwid = cwid , cid = cid , return_session_token = return_session_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->create_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters","text":"Name Type Description Notes x_api_key str Api Key can be passed in header to generate a JWT. [optional] client_id str Optionally pass client Id from calling app to set as authorized party on JWT. [optional] api_key str OBSOLETE: api key should now be passed as as an X-API-Key header. [optional] domain str Optionally pass the domain name you are logging into [optional] data str Data is a custom meta data field that will be applied to the session field in the JWT payload. [optional] scopes list[str] Scopes can be passed in during token generation to limit the token to particular scopes. [optional] cwid str Set the current workgroup on the token. Used for aligning resources to a workgroup. [optional] cid str Set the current context on the token. Used for aligning resources to a context. [optional] return_session_token bool By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type","text":"TokenResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details","text":"Status code Description Response headers 201 The Token is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#get_token_details","text":"TokenDetailResponse get_token_details() Get current tokens info require authorization Bearer token Get token details","title":"get_token_details"},{"location":"libconsole/docs/TokensApi/#example_1","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) try : # Get current tokens info require authorization Bearer token api_response = api_instance . get_token_details () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->get_token_details: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_1","text":"TokenDetailResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_1","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_1","text":"Status code Description Response headers 200 Token details returned successfully - 401 The token provided is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#refresh_token","text":"TokenResponse refresh_token(body=body) Refresh session psToken. This endpoint extends the session for the psToken.","title":"refresh_token"},{"location":"libconsole/docs/TokensApi/#example_2","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional) try : # Refresh session psToken. api_response = api_instance . refresh_token ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TokensApi->refresh_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_2","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts a psToken in the access_token field in the body of the request. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_2","text":"TokenResponse","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_2","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_2","text":"Status code Description Response headers 201 The Token was refreshed successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The token is no longer able to be refreshed. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/TokensApi/#revoke_token","text":"revoke_token(body=body) Revokes an access token. This endpoint revokes the access token that is passed in.","title":"revoke_token"},{"location":"libconsole/docs/TokensApi/#example_3","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . TokensApi ( api_client ) body = libica . openapi . libconsole . AccessTokenRequest () # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional) try : # Revokes an access token. api_instance . revoke_token ( body = body ) except ApiException as e : print ( \"Exception when calling TokensApi->revoke_token: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/TokensApi/#parameters_3","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. [optional]","title":"Parameters"},{"location":"libconsole/docs/TokensApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"libconsole/docs/TokensApi/#authorization_3","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/TokensApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/TokensApi/#http-response-details_3","text":"Status code Description Response headers 204 Succeeded and the token has been revoked. - 400 An invalid or missing input parameter will result in a bad request.\\\" - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsageResponse/","text":"UsageResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[PeriodUsageSummary] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UsageResponse"},{"location":"libconsole/docs/UsageResponse/#usageresponse","text":"","title":"UsageResponse"},{"location":"libconsole/docs/UsageResponse/#properties","text":"Name Type Description Notes items list[PeriodUsageSummary] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/UsagesApi/","text":"libica.openapi.libconsole.UsagesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. get_usage_periods GET /v1/usages/periods Get periods detail info get_usage \u00b6 UsageResponse get_usage(periods=periods) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the ability for the user to get the aggregated usage data Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes periods int [optional] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_usage_details \u00b6 UsageResponse get_usage_details(period_id=period_id) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes period_id int [optional] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_usage_periods \u00b6 UsageResponse get_usage_periods(limit=limit) Get periods detail info This endpoint provides the periods details Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes limit int [optional] [default to 26] Return type \u00b6 UsageResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 The periods are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.UsagesApi"},{"location":"libconsole/docs/UsagesApi/#libicaopenapilibconsoleusagesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description get_usage GET /v1/usages Get current tenant's usage detail by period. Default returns current period usage data. get_usage_details GET /v1/usages/details Get current tenant's usage detail by period. Default returns current period usage data. get_usage_periods GET /v1/usages/periods Get periods detail info","title":"libica.openapi.libconsole.UsagesApi"},{"location":"libconsole/docs/UsagesApi/#get_usage","text":"UsageResponse get_usage(periods=periods) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the ability for the user to get the aggregated usage data","title":"get_usage"},{"location":"libconsole/docs/UsagesApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) periods = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage ( periods = periods ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters","text":"Name Type Description Notes periods int [optional]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsagesApi/#get_usage_details","text":"UsageResponse get_usage_details(period_id=period_id) Get current tenant's usage detail by period. Default returns current period usage data. This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage","title":"get_usage_details"},{"location":"libconsole/docs/UsagesApi/#example_1","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) period_id = 56 # int | (optional) try : # Get current tenant's usage detail by period. Default returns current period usage data. api_response = api_instance . get_usage_details ( period_id = period_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_details: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters_1","text":"Name Type Description Notes period_id int [optional]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type_1","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization_1","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details_1","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/UsagesApi/#get_usage_periods","text":"UsageResponse get_usage_periods(limit=limit) Get periods detail info This endpoint provides the periods details","title":"get_usage_periods"},{"location":"libconsole/docs/UsagesApi/#example_2","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . UsagesApi ( api_client ) limit = 26 # int | (optional) (default to 26) try : # Get periods detail info api_response = api_instance . get_usage_periods ( limit = limit ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling UsagesApi->get_usage_periods: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/UsagesApi/#parameters_2","text":"Name Type Description Notes limit int [optional] [default to 26]","title":"Parameters"},{"location":"libconsole/docs/UsagesApi/#return-type_2","text":"UsageResponse","title":"Return type"},{"location":"libconsole/docs/UsagesApi/#authorization_2","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/UsagesApi/#http-response-details_2","text":"Status code Description Response headers 200 The periods are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libconsole/docs/User/","text":"User \u00b6 Properties \u00b6 Name Type Description Notes full_name str [optional] user_name str [optional] domain Domain [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"User"},{"location":"libconsole/docs/User/#user","text":"","title":"User"},{"location":"libconsole/docs/User/#properties","text":"Name Type Description Notes full_name str [optional] user_name str [optional] domain Domain [optional] type str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/UserAggregatedUsage/","text":"UserAggregatedUsage \u00b6 Properties \u00b6 Name Type Description Notes user User [optional] i_credit float [optional] usages list[ProductUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UserAggregatedUsage"},{"location":"libconsole/docs/UserAggregatedUsage/#useraggregatedusage","text":"","title":"UserAggregatedUsage"},{"location":"libconsole/docs/UserAggregatedUsage/#properties","text":"Name Type Description Notes user User [optional] i_credit float [optional] usages list[ProductUsage] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/Workgroup/","text":"Workgroup \u00b6 Properties \u00b6 Name Type Description Notes id str [optional] name str [optional] description str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Workgroup"},{"location":"libconsole/docs/Workgroup/#workgroup","text":"","title":"Workgroup"},{"location":"libconsole/docs/Workgroup/#properties","text":"Name Type Description Notes id str [optional] name str [optional] description str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/WorkgroupResponse/","text":"WorkgroupResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[Workgroup] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkgroupResponse"},{"location":"libconsole/docs/WorkgroupResponse/#workgroupresponse","text":"","title":"WorkgroupResponse"},{"location":"libconsole/docs/WorkgroupResponse/#properties","text":"Name Type Description Notes items list[Workgroup] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libconsole/docs/WorkgroupsApi/","text":"libica.openapi.libconsole.WorkgroupsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token list_workgroups \u00b6 WorkgroupResponse list_workgroups() Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Get a list of available workgroups Example \u00b6 Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 WorkgroupResponse Authorization \u00b6 Basic , Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Workgroups returned successfully - 401 The provided session token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libconsole.WorkgroupsApi"},{"location":"libconsole/docs/WorkgroupsApi/#libicaopenapilibconsoleworkgroupsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token","title":"libica.openapi.libconsole.WorkgroupsApi"},{"location":"libconsole/docs/WorkgroupsApi/#list_workgroups","text":"WorkgroupResponse list_workgroups() Get a list of available workgroups. Requires session token (psToken) authorization Bearer token Get a list of available workgroups","title":"list_workgroups"},{"location":"libconsole/docs/WorkgroupsApi/#example","text":"Basic Authentication (Basic): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e ) Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libconsole from libica.openapi.libconsole.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure HTTP basic authorization: Basic configuration = libica . openapi . libconsole . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Configure API key authorization: Bearer configuration = libica . openapi . libconsole . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libconsole . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libconsole . WorkgroupsApi ( api_client ) try : # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token api_response = api_instance . list_workgroups () pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkgroupsApi->list_workgroups: %s \\n \" % e )","title":"Example"},{"location":"libconsole/docs/WorkgroupsApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"libconsole/docs/WorkgroupsApi/#return-type","text":"WorkgroupResponse","title":"Return type"},{"location":"libconsole/docs/WorkgroupsApi/#authorization","text":"Basic , Bearer","title":"Authorization"},{"location":"libconsole/docs/WorkgroupsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libconsole/docs/WorkgroupsApi/#http-response-details","text":"Status code Description Response headers 200 Workgroups returned successfully - 401 The provided session token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/","text":"libica.openapi.libens \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libens package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:27.824713+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libens, you can run the following: from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description SubscriptionsApi create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. SubscriptionsApi disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. SubscriptionsApi get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. SubscriptionsApi list_subscriptions GET /v1/subscriptions Get a list of subscriptions. Documentation For Models \u00b6 CreateSubscriptionRequest DeliveryTarget DeliveryTargetAwsSnsTopic DeliveryTargetAwsSqsQueue DeliveryTargetWorkflowRunLaunch ErrorResponse SortDirection Subscription SubscriptionList SubscriptionListSortFields Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libens"},{"location":"libens/#libicaopenapilibens","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libens package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:27.824713+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libens"},{"location":"libens/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libens/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libens/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libens, you can run the following: from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e )","title":"Getting Started"},{"location":"libens/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description SubscriptionsApi create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. SubscriptionsApi disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. SubscriptionsApi get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. SubscriptionsApi list_subscriptions GET /v1/subscriptions Get a list of subscriptions.","title":"Documentation for API Endpoints"},{"location":"libens/#documentation-for-models","text":"CreateSubscriptionRequest DeliveryTarget DeliveryTargetAwsSnsTopic DeliveryTargetAwsSqsQueue DeliveryTargetWorkflowRunLaunch ErrorResponse SortDirection Subscription SubscriptionList SubscriptionListSortFields","title":"Documentation For Models"},{"location":"libens/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libens/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libens/#author","text":"","title":"Author"},{"location":"libens/docs/CreateSubscriptionRequest/","text":"CreateSubscriptionRequest \u00b6 Properties \u00b6 Name Type Description Notes type str Event type which will be subscribed to actions list[str] Actions which will be subscribed to for the event type [optional] name str Name of the subscription description str Optional description for the subscription [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] delivery_target DeliveryTarget [Back to Model list] [Back to API list] [Back to README]","title":"CreateSubscriptionRequest"},{"location":"libens/docs/CreateSubscriptionRequest/#createsubscriptionrequest","text":"","title":"CreateSubscriptionRequest"},{"location":"libens/docs/CreateSubscriptionRequest/#properties","text":"Name Type Description Notes type str Event type which will be subscribed to actions list[str] Actions which will be subscribed to for the event type [optional] name str Name of the subscription description str Optional description for the subscription [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] delivery_target DeliveryTarget [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTarget/","text":"DeliveryTarget \u00b6 Configuration for the action to perform for events matching this subscription; only one delivery type may be specified Properties \u00b6 Name Type Description Notes aws_sns_topic DeliveryTargetAwsSnsTopic [optional] aws_sqs_queue DeliveryTargetAwsSqsQueue [optional] workflow_run_launch DeliveryTargetWorkflowRunLaunch [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTarget"},{"location":"libens/docs/DeliveryTarget/#deliverytarget","text":"Configuration for the action to perform for events matching this subscription; only one delivery type may be specified","title":"DeliveryTarget"},{"location":"libens/docs/DeliveryTarget/#properties","text":"Name Type Description Notes aws_sns_topic DeliveryTargetAwsSnsTopic [optional] aws_sqs_queue DeliveryTargetAwsSqsQueue [optional] workflow_run_launch DeliveryTargetWorkflowRunLaunch [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/","text":"DeliveryTargetAwsSnsTopic \u00b6 Configuration for an AWS SNS delivery topic Properties \u00b6 Name Type Description Notes topic_arn str ARN for the AWS SNS topic [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetAwsSnsTopic"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/#deliverytargetawssnstopic","text":"Configuration for an AWS SNS delivery topic","title":"DeliveryTargetAwsSnsTopic"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/#properties","text":"Name Type Description Notes topic_arn str ARN for the AWS SNS topic [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/","text":"DeliveryTargetAwsSqsQueue \u00b6 Configuration for an AWS SQS delivery queue Properties \u00b6 Name Type Description Notes queue_url str URL for the AWS SQS queue [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetAwsSqsQueue"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/#deliverytargetawssqsqueue","text":"Configuration for an AWS SQS delivery queue","title":"DeliveryTargetAwsSqsQueue"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/#properties","text":"Name Type Description Notes queue_url str URL for the AWS SQS queue [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/","text":"DeliveryTargetWorkflowRunLaunch \u00b6 Configuration for a delivery via WES workflow run launch Properties \u00b6 Name Type Description Notes id str Id of the workflow to launch version str Version of the workflow to launch, for the given id name str Name for the workflowRun input object Arguments for the workflowRun [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DeliveryTargetWorkflowRunLaunch"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/#deliverytargetworkflowrunlaunch","text":"Configuration for a delivery via WES workflow run launch","title":"DeliveryTargetWorkflowRunLaunch"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/#properties","text":"Name Type Description Notes id str Id of the workflow to launch version str Version of the workflow to launch, for the given id name str Name for the workflowRun input object Arguments for the workflowRun [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Details for an error which occurred Properties \u00b6 Name Type Description Notes code str Error code which uniquely identifies the type of error which occurred [optional] message str Description of the error which occurred [optional] details list[object] Additional details for conditions which caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libens/docs/ErrorResponse/#errorresponse","text":"Details for an error which occurred","title":"ErrorResponse"},{"location":"libens/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str Error code which uniquely identifies the type of error which occurred [optional] message str Description of the error which occurred [optional] details list[object] Additional details for conditions which caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SortDirection/","text":"SortDirection \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SortDirection"},{"location":"libens/docs/SortDirection/#sortdirection","text":"","title":"SortDirection"},{"location":"libens/docs/SortDirection/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/Subscription/","text":"Subscription \u00b6 Details for an Event Notification Service subscription Properties \u00b6 Name Type Description Notes id str Unique id of the subscription [optional] urn str URN of the subscription [optional] type str Type of event the subscription matches [optional] actions list[str] Types of actions the subscription matches for the event type [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] name str Name of the subscription [optional] description str Optional description for the subscription [optional] delivery_target DeliveryTarget [optional] match_identities list[str] ACL Identities for events the subscription matches [optional] acl list[str] The list of identities that have access to this subscription [optional] tenant_id str Tenant id of the subscription owner [optional] created_by_user_id str User id for the creator of the subscription [optional] time_created datetime Timestamp when the subscription was created [optional] deleted_by_user_id str Id of the user who deleted the subscription, if applicable [optional] time_deleted datetime Timestamp when the subscription was deleted, if applicable [optional] is_deleted bool Whether or not the subscription has been deleted [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Subscription"},{"location":"libens/docs/Subscription/#subscription","text":"Details for an Event Notification Service subscription","title":"Subscription"},{"location":"libens/docs/Subscription/#properties","text":"Name Type Description Notes id str Unique id of the subscription [optional] urn str URN of the subscription [optional] type str Type of event the subscription matches [optional] actions list[str] Types of actions the subscription matches for the event type [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] name str Name of the subscription [optional] description str Optional description for the subscription [optional] delivery_target DeliveryTarget [optional] match_identities list[str] ACL Identities for events the subscription matches [optional] acl list[str] The list of identities that have access to this subscription [optional] tenant_id str Tenant id of the subscription owner [optional] created_by_user_id str User id for the creator of the subscription [optional] time_created datetime Timestamp when the subscription was created [optional] deleted_by_user_id str Id of the user who deleted the subscription, if applicable [optional] time_deleted datetime Timestamp when the subscription was deleted, if applicable [optional] is_deleted bool Whether or not the subscription has been deleted [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionList/","text":"SubscriptionList \u00b6 Properties \u00b6 Name Type Description Notes items list[Subscription] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] sorted_by SubscriptionListSortFields [optional] sort_direction SortDirection [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SubscriptionList"},{"location":"libens/docs/SubscriptionList/#subscriptionlist","text":"","title":"SubscriptionList"},{"location":"libens/docs/SubscriptionList/#properties","text":"Name Type Description Notes items list[Subscription] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] sorted_by SubscriptionListSortFields [optional] sort_direction SortDirection [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionListSortFields/","text":"SubscriptionListSortFields \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SubscriptionListSortFields"},{"location":"libens/docs/SubscriptionListSortFields/#subscriptionlistsortfields","text":"","title":"SubscriptionListSortFields"},{"location":"libens/docs/SubscriptionListSortFields/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libens/docs/SubscriptionsApi/","text":"libica.openapi.libens.SubscriptionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. list_subscriptions GET /v1/subscriptions Get a list of subscriptions. create_subscription \u00b6 Subscription create_subscription(body=body) Creates a subscription to an event type and defines how those events get delivered. Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateSubscriptionRequest [optional] Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 The subscription is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 409 The given delivery target is not valid or cannot be delivered to. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] disable_subscription \u00b6 Subscription disable_subscription(subscription_id) Given a subscription id, disables the specified subscription. Given a subscription id, disables that subscription with the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to be disabled try : # Given a subscription id, disables the specified subscription. api_response = api_instance . disable_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->disable_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes subscription_id str Id of the subscription to be disabled Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscription for the given ID is disabled successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to disable the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_subscription \u00b6 Subscription get_subscription(subscription_id) Given a subscription id, returns information about that subscription. Given a subscription id, returns information about that subscription accessible by the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to return try : # Given a subscription id, returns information about that subscription. api_response = api_instance . get_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->get_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes subscription_id str Id of the subscription to return Return type \u00b6 Subscription Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscription for the given ID is found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_subscriptions \u00b6 SubscriptionList list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token) Get a list of subscriptions. Get a list of subscriptions accessible by the current JWT token\u2019s tenant Id. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) event_type = 'event_type_example' # str | Optional event type for filtering returned subscriptions (optional) page_size = 56 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) page_token = 'page_token_example' # str | Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. (optional) try : # Get a list of subscriptions. api_response = api_instance . list_subscriptions ( event_type = event_type , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->list_subscriptions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes event_type str Optional event type for filtering returned subscriptions [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] page_token str Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. [optional] Return type \u00b6 SubscriptionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Subscriptions found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access subscriptions. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libens.SubscriptionsApi"},{"location":"libens/docs/SubscriptionsApi/#libicaopenapilibenssubscriptionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. list_subscriptions GET /v1/subscriptions Get a list of subscriptions.","title":"libica.openapi.libens.SubscriptionsApi"},{"location":"libens/docs/SubscriptionsApi/#create_subscription","text":"Subscription create_subscription(body=body) Creates a subscription to an event type and defines how those events get delivered. Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow.","title":"create_subscription"},{"location":"libens/docs/SubscriptionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) body = libica . openapi . libens . CreateSubscriptionRequest () # CreateSubscriptionRequest | (optional) try : # Creates a subscription to an event type and defines how those events get delivered. api_response = api_instance . create_subscription ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->create_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters","text":"Name Type Description Notes body CreateSubscriptionRequest [optional]","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details","text":"Status code Description Response headers 201 The subscription is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 409 The given delivery target is not valid or cannot be delivered to. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#disable_subscription","text":"Subscription disable_subscription(subscription_id) Given a subscription id, disables the specified subscription. Given a subscription id, disables that subscription with the current JWT token\u2019s tenant Id.","title":"disable_subscription"},{"location":"libens/docs/SubscriptionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to be disabled try : # Given a subscription id, disables the specified subscription. api_response = api_instance . disable_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->disable_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_1","text":"Name Type Description Notes subscription_id str Id of the subscription to be disabled","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_1","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Subscription for the given ID is disabled successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to disable the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#get_subscription","text":"Subscription get_subscription(subscription_id) Given a subscription id, returns information about that subscription. Given a subscription id, returns information about that subscription accessible by the current JWT token\u2019s tenant Id.","title":"get_subscription"},{"location":"libens/docs/SubscriptionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) subscription_id = 'subscription_id_example' # str | Id of the subscription to return try : # Given a subscription id, returns information about that subscription. api_response = api_instance . get_subscription ( subscription_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->get_subscription: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_2","text":"Name Type Description Notes subscription_id str Id of the subscription to return","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_2","text":"Subscription","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_2","text":"Status code Description Response headers 200 Subscription for the given ID is found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libens/docs/SubscriptionsApi/#list_subscriptions","text":"SubscriptionList list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token) Get a list of subscriptions. Get a list of subscriptions accessible by the current JWT token\u2019s tenant Id.","title":"list_subscriptions"},{"location":"libens/docs/SubscriptionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libens from libica.openapi.libens.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libens . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libens . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libens . SubscriptionsApi ( api_client ) event_type = 'event_type_example' # str | Optional event type for filtering returned subscriptions (optional) page_size = 56 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) page_token = 'page_token_example' # str | Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. (optional) try : # Get a list of subscriptions. api_response = api_instance . list_subscriptions ( event_type = event_type , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling SubscriptionsApi->list_subscriptions: %s \\n \" % e )","title":"Example"},{"location":"libens/docs/SubscriptionsApi/#parameters_3","text":"Name Type Description Notes event_type str Optional event type for filtering returned subscriptions [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] page_token str Utilized for navigation after initial listing. Valid values include those of firstPageToken, nextPageToken, and previousPageToken in the list response. When there are no more pages, the nextPageToken will be null. [optional]","title":"Parameters"},{"location":"libens/docs/SubscriptionsApi/#return-type_3","text":"SubscriptionList","title":"Return type"},{"location":"libens/docs/SubscriptionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Subscriptions found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access subscriptions. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/","text":"libica.openapi.libgds \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libgds package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:19.996256+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libgds, you can run the following: from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description FilesApi archive_file POST /v1/files/{fileId}:archive Archive a file FilesApi complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload FilesApi create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload FilesApi delete_file DELETE /v1/files/{fileId} Permanently delete a file FilesApi get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download FilesApi list_files GET /v1/files Get a list of files FilesApi unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file FilesApi update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload FoldersApi archive_folder POST /v1/folders/{folderId}:archive Archive a folder FoldersApi complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS FoldersApi copy_folder POST /v1/folders/{folderId}:copy Copy a folder FoldersApi create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload FoldersApi delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id FoldersApi get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. FoldersApi get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS FoldersApi get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS FoldersApi list_folders GET /v1/folders Get a list of folders FoldersApi unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder FoldersApi update_folder PATCH /v1/folders/{folderId} Update a folder content or acl VolumeConfigurationsApi create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. VolumeConfigurationsApi delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name VolumeConfigurationsApi get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id VolumeConfigurationsApi list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes VolumeConfigurationsApi validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration VolumesApi create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload VolumesApi delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id VolumesApi get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name VolumesApi list_volumes GET /v1/volumes Get a list of volumes Documentation For Models \u00b6 AWSS3ObjectStoreSetting ArchiveStatuses AwsS3PresignedUrlForUpload AwsS3TemporaryUploadCredentials BulkFileUpdateItem BulkFileUpdateRequest BulkFileUpdateResponse BulkFolderUpdateItem BulkFolderUpdateRequest BulkUpdateFailedItem CompleteSessionRequest CreateFileRequest CreateFolderRequest CreateSessionRequest CreateSessionResponse CreateVolumeConfigurationRequest CreateVolumeRequest CreateVolumeResponse ErrorResponse FileArchiveRequest FileArchiveStorageTier FileLifeCycleSettings FileListResponse FileResponse FileStatus FileUnarchiveRequest FileUploadCompleteRequest FileWriteableResponse FolderArchiveRequest FolderArchiveStorageTier FolderCopyOperationParameters FolderCopyRequest FolderDeleteOperationParameters FolderListResponse FolderResponse FolderUnarchiveRequest FolderUpdateRequest FolderWriteableResponse GracePeriodEndAction JobOperationParameters JobOperationType JobProgressStatus JobResponse JobStatus ObjectStoreAccess ObjectStoreSettings PartEtag PartInfo SessionResponse SessionStatus StorageTier UpdateFileRequest UpdateVolumeRequest VolumeConfigurationListResponse VolumeConfigurationOnlineStatus VolumeConfigurationResponse VolumeLifeCycleSettings VolumeListResponse VolumeResponse Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libgds"},{"location":"libgds/#libicaopenapilibgds","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libgds package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:19.996256+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libgds"},{"location":"libgds/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libgds/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libgds/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libgds, you can run the following: from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e )","title":"Getting Started"},{"location":"libgds/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description FilesApi archive_file POST /v1/files/{fileId}:archive Archive a file FilesApi complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload FilesApi create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload FilesApi delete_file DELETE /v1/files/{fileId} Permanently delete a file FilesApi get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download FilesApi list_files GET /v1/files Get a list of files FilesApi unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file FilesApi update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload FoldersApi archive_folder POST /v1/folders/{folderId}:archive Archive a folder FoldersApi complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS FoldersApi copy_folder POST /v1/folders/{folderId}:copy Copy a folder FoldersApi create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload FoldersApi delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id FoldersApi get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. FoldersApi get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS FoldersApi get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS FoldersApi list_folders GET /v1/folders Get a list of folders FoldersApi unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder FoldersApi update_folder PATCH /v1/folders/{folderId} Update a folder content or acl VolumeConfigurationsApi create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. VolumeConfigurationsApi delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name VolumeConfigurationsApi get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id VolumeConfigurationsApi list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes VolumeConfigurationsApi validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration VolumesApi create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload VolumesApi delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id VolumesApi get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name VolumesApi list_volumes GET /v1/volumes Get a list of volumes","title":"Documentation for API Endpoints"},{"location":"libgds/#documentation-for-models","text":"AWSS3ObjectStoreSetting ArchiveStatuses AwsS3PresignedUrlForUpload AwsS3TemporaryUploadCredentials BulkFileUpdateItem BulkFileUpdateRequest BulkFileUpdateResponse BulkFolderUpdateItem BulkFolderUpdateRequest BulkUpdateFailedItem CompleteSessionRequest CreateFileRequest CreateFolderRequest CreateSessionRequest CreateSessionResponse CreateVolumeConfigurationRequest CreateVolumeRequest CreateVolumeResponse ErrorResponse FileArchiveRequest FileArchiveStorageTier FileLifeCycleSettings FileListResponse FileResponse FileStatus FileUnarchiveRequest FileUploadCompleteRequest FileWriteableResponse FolderArchiveRequest FolderArchiveStorageTier FolderCopyOperationParameters FolderCopyRequest FolderDeleteOperationParameters FolderListResponse FolderResponse FolderUnarchiveRequest FolderUpdateRequest FolderWriteableResponse GracePeriodEndAction JobOperationParameters JobOperationType JobProgressStatus JobResponse JobStatus ObjectStoreAccess ObjectStoreSettings PartEtag PartInfo SessionResponse SessionStatus StorageTier UpdateFileRequest UpdateVolumeRequest VolumeConfigurationListResponse VolumeConfigurationOnlineStatus VolumeConfigurationResponse VolumeLifeCycleSettings VolumeListResponse VolumeResponse","title":"Documentation For Models"},{"location":"libgds/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libgds/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libgds/#author","text":"","title":"Author"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/","text":"AWSS3ObjectStoreSetting \u00b6 Properties \u00b6 Name Type Description Notes bucket_name str The bucket name key_prefix str Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AWSS3ObjectStoreSetting"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/#awss3objectstoresetting","text":"","title":"AWSS3ObjectStoreSetting"},{"location":"libgds/docs/AWSS3ObjectStoreSetting/#properties","text":"Name Type Description Notes bucket_name str The bucket name key_prefix str Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ArchiveStatuses/","text":"ArchiveStatuses \u00b6 The valid Archive Status values for files in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ArchiveStatuses"},{"location":"libgds/docs/ArchiveStatuses/#archivestatuses","text":"The valid Archive Status values for files in GDS","title":"ArchiveStatuses"},{"location":"libgds/docs/ArchiveStatuses/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/","text":"AwsS3PresignedUrlForUpload \u00b6 AwsS3PresignedUrlForUpload Properties \u00b6 Name Type Description Notes single_part_url str A single part presigned url for upload [optional] multipart_template str A url template for multi parts presigned url for upload [optional] multipart_signatures list[PartInfo] Multi parts info that needs to be applied to the MultipartTemplate [optional] multipart_upload_id str Multi part upload id [optional] server_side_encryption_algorithm str The server side encryption method used by S3. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. Possible values: 'AES256' and 'aws:kms'. [optional] server_side_encryption_key str Server-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value This is only used when ServerSideEncryptionAlgorithm is 'aws:kms' [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsS3PresignedUrlForUpload"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/#awss3presignedurlforupload","text":"AwsS3PresignedUrlForUpload","title":"AwsS3PresignedUrlForUpload"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/#properties","text":"Name Type Description Notes single_part_url str A single part presigned url for upload [optional] multipart_template str A url template for multi parts presigned url for upload [optional] multipart_signatures list[PartInfo] Multi parts info that needs to be applied to the MultipartTemplate [optional] multipart_upload_id str Multi part upload id [optional] server_side_encryption_algorithm str The server side encryption method used by S3. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. Possible values: 'AES256' and 'aws:kms'. [optional] server_side_encryption_key str Server-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value This is only used when ServerSideEncryptionAlgorithm is 'aws:kms' [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/","text":"AwsS3TemporaryUploadCredentials \u00b6 AwsS3TemporaryUploadCredentials Properties \u00b6 Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3. This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsS3TemporaryUploadCredentials"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/#awss3temporaryuploadcredentials","text":"AwsS3TemporaryUploadCredentials","title":"AwsS3TemporaryUploadCredentials"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/#properties","text":"Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3. This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value Value will be ignored if encryption is \\\"AES256\\\" [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateItem/","text":"BulkFileUpdateItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of this file [optional] metadata object Metadata about this file and its contents [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateItem"},{"location":"libgds/docs/BulkFileUpdateItem/#bulkfileupdateitem","text":"","title":"BulkFileUpdateItem"},{"location":"libgds/docs/BulkFileUpdateItem/#properties","text":"Name Type Description Notes id str Id of this file [optional] metadata object Metadata about this file and its contents [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateRequest/","text":"BulkFileUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes items list[BulkFileUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateRequest"},{"location":"libgds/docs/BulkFileUpdateRequest/#bulkfileupdaterequest","text":"","title":"BulkFileUpdateRequest"},{"location":"libgds/docs/BulkFileUpdateRequest/#properties","text":"Name Type Description Notes items list[BulkFileUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFileUpdateResponse/","text":"BulkFileUpdateResponse \u00b6 Properties \u00b6 Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFileUpdateResponse"},{"location":"libgds/docs/BulkFileUpdateResponse/#bulkfileupdateresponse","text":"","title":"BulkFileUpdateResponse"},{"location":"libgds/docs/BulkFileUpdateResponse/#properties","text":"Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFolderUpdateItem/","text":"BulkFolderUpdateItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of this folder [optional] metadata object Metadata about this folder and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFolderUpdateItem"},{"location":"libgds/docs/BulkFolderUpdateItem/#bulkfolderupdateitem","text":"","title":"BulkFolderUpdateItem"},{"location":"libgds/docs/BulkFolderUpdateItem/#properties","text":"Name Type Description Notes id str Id of this folder [optional] metadata object Metadata about this folder and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkFolderUpdateRequest/","text":"BulkFolderUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes items list[BulkFolderUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkFolderUpdateRequest"},{"location":"libgds/docs/BulkFolderUpdateRequest/#bulkfolderupdaterequest","text":"","title":"BulkFolderUpdateRequest"},{"location":"libgds/docs/BulkFolderUpdateRequest/#properties","text":"Name Type Description Notes items list[BulkFolderUpdateItem] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/BulkUpdateFailedItem/","text":"BulkUpdateFailedItem \u00b6 Properties \u00b6 Name Type Description Notes id str Id of resource that failed to be updated [optional] error_response ErrorResponse [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BulkUpdateFailedItem"},{"location":"libgds/docs/BulkUpdateFailedItem/#bulkupdatefaileditem","text":"","title":"BulkUpdateFailedItem"},{"location":"libgds/docs/BulkUpdateFailedItem/#properties","text":"Name Type Description Notes id str Id of resource that failed to be updated [optional] error_response ErrorResponse [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CompleteSessionRequest/","text":"CompleteSessionRequest \u00b6 Properties \u00b6 Name Type Description Notes expected_session_file_count int User-defined count used for reconciling files uploaded when closing the session [Back to Model list] [Back to API list] [Back to README]","title":"CompleteSessionRequest"},{"location":"libgds/docs/CompleteSessionRequest/#completesessionrequest","text":"","title":"CompleteSessionRequest"},{"location":"libgds/docs/CompleteSessionRequest/#properties","text":"Name Type Description Notes expected_session_file_count int User-defined count used for reconciling files uploaded when closing the session [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateFileRequest/","text":"CreateFileRequest \u00b6 CreateFileRequest Model Properties \u00b6 Name Type Description Notes name str Name of the file to be uploaded, case sensitive. volume_id str Volume ID to which the file will be uploaded [optional] folder_path str Optional folder path where the file will be uploaded to [optional] type str Optional file content type, e.g. text/plain, application/json [optional] volume_name str Name of the Volume [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateFileRequest"},{"location":"libgds/docs/CreateFileRequest/#createfilerequest","text":"CreateFileRequest Model","title":"CreateFileRequest"},{"location":"libgds/docs/CreateFileRequest/#properties","text":"Name Type Description Notes name str Name of the file to be uploaded, case sensitive. volume_id str Volume ID to which the file will be uploaded [optional] folder_path str Optional folder path where the file will be uploaded to [optional] type str Optional file content type, e.g. text/plain, application/json [optional] volume_name str Name of the Volume [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateFolderRequest/","text":"CreateFolderRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Folder name, unique to this path, for the folder being created folder_path str Path from the root folder to the location for the folder being created; must start and end with '/' [optional] volume_id str The unique identifier for this Folder's Volume [optional] volume_name str The unique name for the Folder's Volume [optional] metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateFolderRequest"},{"location":"libgds/docs/CreateFolderRequest/#createfolderrequest","text":"","title":"CreateFolderRequest"},{"location":"libgds/docs/CreateFolderRequest/#properties","text":"Name Type Description Notes name str Folder name, unique to this path, for the folder being created folder_path str Path from the root folder to the location for the folder being created; must start and end with '/' [optional] volume_id str The unique identifier for this Folder's Volume [optional] volume_name str The unique name for the Folder's Volume [optional] metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateSessionRequest/","text":"CreateSessionRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this session and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateSessionRequest"},{"location":"libgds/docs/CreateSessionRequest/#createsessionrequest","text":"","title":"CreateSessionRequest"},{"location":"libgds/docs/CreateSessionRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this session and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateSessionResponse/","text":"CreateSessionResponse \u00b6 Properties \u00b6 Name Type Description Notes object_store_access ObjectStoreAccess [optional] id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateSessionResponse"},{"location":"libgds/docs/CreateSessionResponse/#createsessionresponse","text":"","title":"CreateSessionResponse"},{"location":"libgds/docs/CreateSessionResponse/#properties","text":"Name Type Description Notes object_store_access ObjectStoreAccess [optional] id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/","text":"CreateVolumeConfigurationRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume configuration object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeConfigurationRequest"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/#createvolumeconfigurationrequest","text":"","title":"CreateVolumeConfigurationRequest"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/#properties","text":"Name Type Description Notes name str Name for the volume configuration object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeRequest/","text":"CreateVolumeRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume volume_configuration_name str Unique name of the volume configuration to use [optional] root_key_prefix str The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used. If provided, it must start with the VolumeConfiguration's keyprefix and end with a /. To create a volume representing the root of a bucket, use the value '/'. [optional] metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeRequest"},{"location":"libgds/docs/CreateVolumeRequest/#createvolumerequest","text":"","title":"CreateVolumeRequest"},{"location":"libgds/docs/CreateVolumeRequest/#properties","text":"Name Type Description Notes name str Name for the volume volume_configuration_name str Unique name of the volume configuration to use [optional] root_key_prefix str The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used. If provided, it must start with the VolumeConfiguration's keyprefix and end with a /. To create a volume representing the root of a bucket, use the value '/'. [optional] metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/CreateVolumeResponse/","text":"CreateVolumeResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] import_session_id str Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom Volume configurations. [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateVolumeResponse"},{"location":"libgds/docs/CreateVolumeResponse/#createvolumeresponse","text":"","title":"CreateVolumeResponse"},{"location":"libgds/docs/CreateVolumeResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] import_session_id str Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom Volume configurations. [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str Error code that uniquely identifies the type of error that occurred [optional] message str Description of the error that occurred [optional] details list[object] Additional details for conditions that caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libgds/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libgds/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str Error code that uniquely identifies the type of error that occurred [optional] message str Description of the error that occurred [optional] details list[object] Additional details for conditions that caused the error [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileArchiveRequest/","text":"FileArchiveRequest \u00b6 FileArchiveRequest to specify the Storage Tier Properties \u00b6 Name Type Description Notes storage_tier FileArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"FileArchiveRequest"},{"location":"libgds/docs/FileArchiveRequest/#filearchiverequest","text":"FileArchiveRequest to specify the Storage Tier","title":"FileArchiveRequest"},{"location":"libgds/docs/FileArchiveRequest/#properties","text":"Name Type Description Notes storage_tier FileArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileArchiveStorageTier/","text":"FileArchiveStorageTier \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FileArchiveStorageTier"},{"location":"libgds/docs/FileArchiveStorageTier/#filearchivestoragetier","text":"","title":"FileArchiveStorageTier"},{"location":"libgds/docs/FileArchiveStorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileLifeCycleSettings/","text":"FileLifeCycleSettings \u00b6 Properties \u00b6 Name Type Description Notes time_grace_period_ends datetime If set, date when billing for the file will start [optional] time_to_be_archived datetime If set, date when file will be archived [optional] time_to_be_deleted datetime If set, date when file will be deleted [optional] archive_storage_tier FileArchiveStorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileLifeCycleSettings"},{"location":"libgds/docs/FileLifeCycleSettings/#filelifecyclesettings","text":"","title":"FileLifeCycleSettings"},{"location":"libgds/docs/FileLifeCycleSettings/#properties","text":"Name Type Description Notes time_grace_period_ends datetime If set, date when billing for the file will start [optional] time_to_be_archived datetime If set, date when file will be archived [optional] time_to_be_deleted datetime If set, date when file will be deleted [optional] archive_storage_tier FileArchiveStorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileListResponse/","text":"FileListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[FileResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileListResponse"},{"location":"libgds/docs/FileListResponse/#filelistresponse","text":"","title":"FileListResponse"},{"location":"libgds/docs/FileListResponse/#properties","text":"Name Type Description Notes items list[FileResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileResponse/","text":"FileResponse \u00b6 Properties \u00b6 Name Type Description Notes volume_metadata object Metadata about this file's volume [optional] id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] presigned_url str The presigned Url allowing access to this File [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileResponse"},{"location":"libgds/docs/FileResponse/#fileresponse","text":"","title":"FileResponse"},{"location":"libgds/docs/FileResponse/#properties","text":"Name Type Description Notes volume_metadata object Metadata about this file's volume [optional] id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] presigned_url str The presigned Url allowing access to this File [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileStatus/","text":"FileStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FileStatus"},{"location":"libgds/docs/FileStatus/#filestatus","text":"","title":"FileStatus"},{"location":"libgds/docs/FileStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileUnarchiveRequest/","text":"FileUnarchiveRequest \u00b6 FileUnarchiveRequest to specify the RestoreSpeed Properties \u00b6 Name Type Description Notes restore_speed str The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"FileUnarchiveRequest"},{"location":"libgds/docs/FileUnarchiveRequest/#fileunarchiverequest","text":"FileUnarchiveRequest to specify the RestoreSpeed","title":"FileUnarchiveRequest"},{"location":"libgds/docs/FileUnarchiveRequest/#properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileUploadCompleteRequest/","text":"FileUploadCompleteRequest \u00b6 FileUploadCompleteRequest Properties \u00b6 Name Type Description Notes multipart_upload_id str The multipart upload id used by the object store [optional] part_etags list[PartEtag] etags for each uploaded part (optional for files that uses multipart upload) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileUploadCompleteRequest"},{"location":"libgds/docs/FileUploadCompleteRequest/#fileuploadcompleterequest","text":"FileUploadCompleteRequest","title":"FileUploadCompleteRequest"},{"location":"libgds/docs/FileUploadCompleteRequest/#properties","text":"Name Type Description Notes multipart_upload_id str The multipart upload id used by the object store [optional] part_etags list[PartEtag] etags for each uploaded part (optional for files that uses multipart upload) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FileWriteableResponse/","text":"FileWriteableResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FileWriteableResponse"},{"location":"libgds/docs/FileWriteableResponse/#filewriteableresponse","text":"","title":"FileWriteableResponse"},{"location":"libgds/docs/FileWriteableResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date & time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date & time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date & time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FilesApi/","text":"libica.openapi.libgds.FilesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_file POST /v1/files/{fileId}:archive Archive a file complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload delete_file DELETE /v1/files/{fileId} Permanently delete a file get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download list_files GET /v1/files Get a list of files unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload archive_file \u00b6 FileResponse archive_file(file_id, body) Archive a file Archives a file to a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be archived. body FileArchiveRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_file_upload \u00b6 FileResponse complete_file_upload(file_id, body) Complete a file Upload Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file upload to be completed. body = libica . openapi . libgds . FileUploadCompleteRequest () # FileUploadCompleteRequest | try : # Complete a file Upload api_response = api_instance . complete_file_upload ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->complete_file_upload: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file upload to be completed. body FileUploadCompleteRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_file \u00b6 FileWriteableResponse create_file(body, include=include, upload_part_count=upload_part_count) Create a file entry in GDS and get temporary credentials for upload Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) body = libica . openapi . libgds . CreateFileRequest () # CreateFileRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) try : # Create a file entry in GDS and get temporary credentials for upload api_response = api_instance . create_file ( body , include = include , upload_part_count = upload_part_count ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->create_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateFileRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] Return type \u00b6 FileWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new File. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new File doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_file \u00b6 delete_file(file_id) Permanently delete a file Permanently delete a file entry and its underlying content Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to delete. try : # Permanently delete a file api_instance . delete_file ( file_id ) except ApiException as e : print ( \"Exception when calling FilesApi->delete_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to delete. Return type \u00b6 void (empty response body) Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : text/plain, application/json, text/json HTTP response details \u00b6 Status code Description Response headers 204 No Content. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_file \u00b6 FileResponse get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get details about a file, including a pre-signed URL for download Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get details about a file, including a pre-signed URL for download api_response = api_instance . get_file ( file_id , tenant_id = tenant_id , presigned_url_mode = presigned_url_mode , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->get_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_files \u00b6 FileListResponse list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of files Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) is_uploaded = True # bool | Optional field to filter by Uploaded files (optional) archive_status = 'archive_status_example' # str | Optional field that specifies comma-separated Archive Statuses to include in the list (optional) recursive = True # bool | Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of files api_response = api_instance . list_files ( volume_id = volume_id , volume_name = volume_name , path = path , is_uploaded = is_uploaded , archive_status = archive_status , recursive = recursive , presigned_url_mode = presigned_url_mode , include = include , page_size = page_size , page_token = page_token , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->list_files: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] is_uploaded bool Optional field to filter by Uploaded files [optional] archive_status str Optional field that specifies comma-separated Archive Statuses to include in the list [optional] recursive bool Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FileListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unarchive_file \u00b6 FileResponse unarchive_file(file_id, body) Unarchive a file Unarchive a file from a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be unarchived. body = libica . openapi . libgds . FileUnarchiveRequest () # FileUnarchiveRequest | try : # Unarchive a file api_response = api_instance . unarchive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->unarchive_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be unarchived. body FileUnarchiveRequest Return type \u00b6 FileResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_file \u00b6 FileWriteableResponse update_file(file_id, include=include, upload_part_count=upload_part_count, body=body) Update a file entry in GDS and get temporary credentials for upload Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) body = libica . openapi . libgds . UpdateFileRequest () # UpdateFileRequest | (optional) try : # Update a file entry in GDS and get temporary credentials for upload api_response = api_instance . update_file ( file_id , include = include , upload_part_count = upload_part_count , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->update_file: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes file_id str Unique identifier for the file to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] body UpdateFileRequest [optional] Return type \u00b6 FileWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.FilesApi"},{"location":"libgds/docs/FilesApi/#libicaopenapilibgdsfilesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_file POST /v1/files/{fileId}:archive Archive a file complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload delete_file DELETE /v1/files/{fileId} Permanently delete a file get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download list_files GET /v1/files Get a list of files unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload","title":"libica.openapi.libgds.FilesApi"},{"location":"libgds/docs/FilesApi/#archive_file","text":"FileResponse archive_file(file_id, body) Archive a file Archives a file to a lower storage cost tier.","title":"archive_file"},{"location":"libgds/docs/FilesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be archived. body = libica . openapi . libgds . FileArchiveRequest () # FileArchiveRequest | try : # Archive a file api_response = api_instance . archive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->archive_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to be archived. body FileArchiveRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#complete_file_upload","text":"FileResponse complete_file_upload(file_id, body) Complete a file Upload Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file.","title":"complete_file_upload"},{"location":"libgds/docs/FilesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file upload to be completed. body = libica . openapi . libgds . FileUploadCompleteRequest () # FileUploadCompleteRequest | try : # Complete a file Upload api_response = api_instance . complete_file_upload ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->complete_file_upload: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_1","text":"Name Type Description Notes file_id str Unique identifier for the file upload to be completed. body FileUploadCompleteRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_1","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_1","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_1","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#create_file","text":"FileWriteableResponse create_file(body, include=include, upload_part_count=upload_part_count) Create a file entry in GDS and get temporary credentials for upload Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically.","title":"create_file"},{"location":"libgds/docs/FilesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) body = libica . openapi . libgds . CreateFileRequest () # CreateFileRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) try : # Create a file entry in GDS and get temporary credentials for upload api_response = api_instance . create_file ( body , include = include , upload_part_count = upload_part_count ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->create_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_2","text":"Name Type Description Notes body CreateFileRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_2","text":"FileWriteableResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_2","text":"Status code Description Response headers 201 Created new File. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new File doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#delete_file","text":"delete_file(file_id) Permanently delete a file Permanently delete a file entry and its underlying content","title":"delete_file"},{"location":"libgds/docs/FilesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to delete. try : # Permanently delete a file api_instance . delete_file ( file_id ) except ApiException as e : print ( \"Exception when calling FilesApi->delete_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_3","text":"Name Type Description Notes file_id str Unique identifier for the file to delete.","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : text/plain, application/json, text/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_3","text":"Status code Description Response headers 204 No Content. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#get_file","text":"FileResponse get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get details about a file, including a pre-signed URL for download Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3.","title":"get_file"},{"location":"libgds/docs/FilesApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get details about a file, including a pre-signed URL for download api_response = api_instance . get_file ( file_id , tenant_id = tenant_id , presigned_url_mode = presigned_url_mode , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->get_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_4","text":"Name Type Description Notes file_id str Unique identifier for the file to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_4","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_4","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#list_files","text":"FileListResponse list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of files Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items","title":"list_files"},{"location":"libgds/docs/FilesApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) is_uploaded = True # bool | Optional field to filter by Uploaded files (optional) archive_status = 'archive_status_example' # str | Optional field that specifies comma-separated Archive Statuses to include in the list (optional) recursive = True # bool | Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) presigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of files api_response = api_instance . list_files ( volume_id = volume_id , volume_name = volume_name , path = path , is_uploaded = is_uploaded , archive_status = archive_status , recursive = recursive , presigned_url_mode = presigned_url_mode , include = include , page_size = page_size , page_token = page_token , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->list_files: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_5","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] is_uploaded bool Optional field to filter by Uploaded files [optional] archive_status str Optional field that specifies comma-separated Archive Statuses to include in the list [optional] recursive bool Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior. Possible values: Attachment, Inline, Browser [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, PresignedUrl, InheritedAcl [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_5","text":"FileListResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_5","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#unarchive_file","text":"FileResponse unarchive_file(file_id, body) Unarchive a file Unarchive a file from a lower storage cost tier.","title":"unarchive_file"},{"location":"libgds/docs/FilesApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be unarchived. body = libica . openapi . libgds . FileUnarchiveRequest () # FileUnarchiveRequest | try : # Unarchive a file api_response = api_instance . unarchive_file ( file_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->unarchive_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_6","text":"Name Type Description Notes file_id str Unique identifier for the file to be unarchived. body FileUnarchiveRequest","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_6","text":"FileResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_6","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_6","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FilesApi/#update_file","text":"FileWriteableResponse update_file(file_id, include=include, upload_part_count=upload_part_count, body=body) Update a file entry in GDS and get temporary credentials for upload Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content.","title":"update_file"},{"location":"libgds/docs/FilesApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FilesApi ( api_client ) file_id = 'file_id_example' # str | Unique identifier for the file to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) upload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional) body = libica . openapi . libgds . UpdateFileRequest () # UpdateFileRequest | (optional) try : # Update a file entry in GDS and get temporary credentials for upload api_response = api_instance . update_file ( file_id , include = include , upload_part_count = upload_part_count , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FilesApi->update_file: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FilesApi/#parameters_7","text":"Name Type Description Notes file_id str Unique identifier for the file to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] body UpdateFileRequest [optional]","title":"Parameters"},{"location":"libgds/docs/FilesApi/#return-type_7","text":"FileWriteableResponse","title":"Return type"},{"location":"libgds/docs/FilesApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FilesApi/#http-request-headers_7","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FilesApi/#http-response-details_7","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FolderArchiveRequest/","text":"FolderArchiveRequest \u00b6 FolderArchiveRequest to specify the Storage Tier Properties \u00b6 Name Type Description Notes storage_tier FolderArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"FolderArchiveRequest"},{"location":"libgds/docs/FolderArchiveRequest/#folderarchiverequest","text":"FolderArchiveRequest to specify the Storage Tier","title":"FolderArchiveRequest"},{"location":"libgds/docs/FolderArchiveRequest/#properties","text":"Name Type Description Notes storage_tier FolderArchiveStorageTier [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderArchiveStorageTier/","text":"FolderArchiveStorageTier \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"FolderArchiveStorageTier"},{"location":"libgds/docs/FolderArchiveStorageTier/#folderarchivestoragetier","text":"","title":"FolderArchiveStorageTier"},{"location":"libgds/docs/FolderArchiveStorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderCopyOperationParameters/","text":"FolderCopyOperationParameters \u00b6 Operation parameters for folder copy operations Properties \u00b6 Name Type Description Notes source_folder_urn str The Urn of the source folder for the copy operation [optional] target_folder_urn str The Urn of the target folder for the copy operation [optional] destination_folder_name str The folder name for the copied folder [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderCopyOperationParameters"},{"location":"libgds/docs/FolderCopyOperationParameters/#foldercopyoperationparameters","text":"Operation parameters for folder copy operations","title":"FolderCopyOperationParameters"},{"location":"libgds/docs/FolderCopyOperationParameters/#properties","text":"Name Type Description Notes source_folder_urn str The Urn of the source folder for the copy operation [optional] target_folder_urn str The Urn of the target folder for the copy operation [optional] destination_folder_name str The folder name for the copied folder [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderCopyRequest/","text":"FolderCopyRequest \u00b6 Properties \u00b6 Name Type Description Notes target_parent_folder_id str The parent folder into which the source folder will be copied. destination_folder_name str A new name for the destination folder. Required if target parent folder is the same as the destination folder. When optional and not provided, the source folder name is used as the destination folder name. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderCopyRequest"},{"location":"libgds/docs/FolderCopyRequest/#foldercopyrequest","text":"","title":"FolderCopyRequest"},{"location":"libgds/docs/FolderCopyRequest/#properties","text":"Name Type Description Notes target_parent_folder_id str The parent folder into which the source folder will be copied. destination_folder_name str A new name for the destination folder. Required if target parent folder is the same as the destination folder. When optional and not provided, the source folder name is used as the destination folder name. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderDeleteOperationParameters/","text":"FolderDeleteOperationParameters \u00b6 Operation parameters for folder delete operations Properties \u00b6 Name Type Description Notes folder_urn str The Urn of the folder for the delete operation [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderDeleteOperationParameters"},{"location":"libgds/docs/FolderDeleteOperationParameters/#folderdeleteoperationparameters","text":"Operation parameters for folder delete operations","title":"FolderDeleteOperationParameters"},{"location":"libgds/docs/FolderDeleteOperationParameters/#properties","text":"Name Type Description Notes folder_urn str The Urn of the folder for the delete operation [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderListResponse/","text":"FolderListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[FolderResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderListResponse"},{"location":"libgds/docs/FolderListResponse/#folderlistresponse","text":"","title":"FolderListResponse"},{"location":"libgds/docs/FolderListResponse/#properties","text":"Name Type Description Notes items list[FolderResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderResponse/","text":"FolderResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderResponse"},{"location":"libgds/docs/FolderResponse/#folderresponse","text":"","title":"FolderResponse"},{"location":"libgds/docs/FolderResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderUnarchiveRequest/","text":"FolderUnarchiveRequest \u00b6 Properties \u00b6 Name Type Description Notes restore_speed str The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"FolderUnarchiveRequest"},{"location":"libgds/docs/FolderUnarchiveRequest/#folderunarchiverequest","text":"","title":"FolderUnarchiveRequest"},{"location":"libgds/docs/FolderUnarchiveRequest/#properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard. [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderUpdateRequest/","text":"FolderUpdateRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderUpdateRequest"},{"location":"libgds/docs/FolderUpdateRequest/#folderupdaterequest","text":"","title":"FolderUpdateRequest"},{"location":"libgds/docs/FolderUpdateRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FolderWriteableResponse/","text":"FolderWriteableResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderWriteableResponse"},{"location":"libgds/docs/FolderWriteableResponse/#folderwriteableresponse","text":"","title":"FolderWriteableResponse"},{"location":"libgds/docs/FolderWriteableResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date & time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] object_store_access ObjectStoreAccess [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/FoldersApi/","text":"libica.openapi.libgds.FoldersApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_folder POST /v1/folders/{folderId}:archive Archive a folder complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS copy_folder POST /v1/folders/{folderId}:copy Copy a folder create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS list_folders GET /v1/folders Get a list of folders unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder update_folder PATCH /v1/folders/{folderId} Update a folder content or acl archive_folder \u00b6 FolderResponse archive_folder(folder_id, body) Archive a folder Archives a folder to a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be archived. body = libica . openapi . libgds . FolderArchiveRequest () # FolderArchiveRequest | try : # Archive a folder api_response = api_instance . archive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->archive_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be archived. body FolderArchiveRequest Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_folder_session \u00b6 SessionResponse complete_folder_session(folder_id, session_id, body) Complete a folder upload in GDS Complete a folder upload in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session body = libica . openapi . libgds . CompleteSessionRequest () # CompleteSessionRequest | The request body try : # Complete a folder upload in GDS api_response = api_instance . complete_folder_session ( folder_id , session_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->complete_folder_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session body CompleteSessionRequest The request body Return type \u00b6 SessionResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Completed upload session. - 202 Upload session in progress. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] copy_folder \u00b6 JobResponse copy_folder(folder_id, body, tenant_id=tenant_id) Copy a folder Copy a folder into a target parent folder Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be copied. body = libica . openapi . libgds . FolderCopyRequest () # FolderCopyRequest | tenant_id = 'tenant_id_example' # str | Optional parameter to copy from a shared folder in another tenant (optional) try : # Copy a folder api_response = api_instance . copy_folder ( folder_id , body , tenant_id = tenant_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->copy_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be copied. body FolderCopyRequest tenant_id str Optional parameter to copy from a shared folder in another tenant [optional] Return type \u00b6 JobResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_folder \u00b6 FolderWriteableResponse create_folder(body, include=include) Create a folder in GDS and receive credentials for upload Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) body = libica . openapi . libgds . CreateFolderRequest () # CreateFolderRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a folder in GDS and receive credentials for upload api_response = api_instance . create_folder ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->create_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateFolderRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] Return type \u00b6 FolderWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Folder. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Folder doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_folder \u00b6 FolderResponse delete_folder(folder_id) Deletes a folder by id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be deleted. try : # Deletes a folder by id api_response = api_instance . delete_folder ( folder_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->delete_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be deleted. Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder \u00b6 FolderResponse get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information about a folder in GDS. Get information for the specified folder ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information about a folder in GDS. api_response = api_instance . get_folder ( folder_id , tenant_id = tenant_id , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder_job \u00b6 JobResponse get_folder_job(folder_id, job_id) Get status of a folder job in GDS Get status of a folder job in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the job. job_id = 'job_id_example' # str | The id of the job try : # Get status of a folder job in GDS api_response = api_instance . get_folder_job ( folder_id , job_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_job: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the job. job_id str The id of the job Return type \u00b6 JobResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returned job. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder_session \u00b6 SessionResponse get_folder_session(folder_id, session_id) Get status of a folder upload in GDS Get status of a folder upload in GDS. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session try : # Get status of a folder upload in GDS api_response = api_instance . get_folder_session ( folder_id , session_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session Return type \u00b6 SessionResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Completed upload session. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_folders \u00b6 FolderListResponse list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of folders Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) job_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional) acls = [ 'acls_example' ] # list[str] | Optional field that specifies comma-separated acls to include in the list (optional) recursive = True # bool | Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of folders api_response = api_instance . list_folders ( volume_id = volume_id , volume_name = volume_name , path = path , job_statuses = job_statuses , acls = acls , recursive = recursive , page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->list_folders: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] acls list[str] Optional field that specifies comma-separated acls to include in the list [optional] recursive bool Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 FolderListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unarchive_folder \u00b6 FolderResponse unarchive_folder(folder_id, body) Unarchive a folder Unarchive a folder from a lower storage cost tier. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be unarchived. body = libica . openapi . libgds . FolderUnarchiveRequest () # FolderUnarchiveRequest | try : # Unarchive a folder api_response = api_instance . unarchive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->unarchive_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be unarchived. body FolderUnarchiveRequest Return type \u00b6 FolderResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_folder \u00b6 FolderWriteableResponse update_folder(folder_id, include=include, body=body) Update a folder content or acl Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time. Optionally overwrite the acl for this folder if acl is provided in the request. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) body = libica . openapi . libgds . FolderUpdateRequest () # FolderUpdateRequest | (optional) try : # Update a folder content or acl api_response = api_instance . update_folder ( folder_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->update_folder: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes folder_id str Unique identifier for the folder to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] body FolderUpdateRequest [optional] Return type \u00b6 FolderWriteableResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.FoldersApi"},{"location":"libgds/docs/FoldersApi/#libicaopenapilibgdsfoldersapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description archive_folder POST /v1/folders/{folderId}:archive Archive a folder complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS copy_folder POST /v1/folders/{folderId}:copy Copy a folder create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS list_folders GET /v1/folders Get a list of folders unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder update_folder PATCH /v1/folders/{folderId} Update a folder content or acl","title":"libica.openapi.libgds.FoldersApi"},{"location":"libgds/docs/FoldersApi/#archive_folder","text":"FolderResponse archive_folder(folder_id, body) Archive a folder Archives a folder to a lower storage cost tier.","title":"archive_folder"},{"location":"libgds/docs/FoldersApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be archived. body = libica . openapi . libgds . FolderArchiveRequest () # FolderArchiveRequest | try : # Archive a folder api_response = api_instance . archive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->archive_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be archived. body FolderArchiveRequest","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details","text":"Status code Description Response headers 202 Accepted. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#complete_folder_session","text":"SessionResponse complete_folder_session(folder_id, session_id, body) Complete a folder upload in GDS Complete a folder upload in GDS.","title":"complete_folder_session"},{"location":"libgds/docs/FoldersApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session body = libica . openapi . libgds . CompleteSessionRequest () # CompleteSessionRequest | The request body try : # Complete a folder upload in GDS api_response = api_instance . complete_folder_session ( folder_id , session_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->complete_folder_session: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_1","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session body CompleteSessionRequest The request body","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_1","text":"SessionResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_1","text":"Status code Description Response headers 200 Completed upload session. - 202 Upload session in progress. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#copy_folder","text":"JobResponse copy_folder(folder_id, body, tenant_id=tenant_id) Copy a folder Copy a folder into a target parent folder","title":"copy_folder"},{"location":"libgds/docs/FoldersApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be copied. body = libica . openapi . libgds . FolderCopyRequest () # FolderCopyRequest | tenant_id = 'tenant_id_example' # str | Optional parameter to copy from a shared folder in another tenant (optional) try : # Copy a folder api_response = api_instance . copy_folder ( folder_id , body , tenant_id = tenant_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->copy_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_2","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be copied. body FolderCopyRequest tenant_id str Optional parameter to copy from a shared folder in another tenant [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_2","text":"JobResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_2","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#create_folder","text":"FolderWriteableResponse create_folder(body, include=include) Create a folder in GDS and receive credentials for upload Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.","title":"create_folder"},{"location":"libgds/docs/FoldersApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) body = libica . openapi . libgds . CreateFolderRequest () # CreateFolderRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a folder in GDS and receive credentials for upload api_response = api_instance . create_folder ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->create_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_3","text":"Name Type Description Notes body CreateFolderRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_3","text":"FolderWriteableResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_3","text":"Status code Description Response headers 201 Created new Folder. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Folder doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#delete_folder","text":"FolderResponse delete_folder(folder_id) Deletes a folder by id","title":"delete_folder"},{"location":"libgds/docs/FoldersApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be deleted. try : # Deletes a folder by id api_response = api_instance . delete_folder ( folder_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->delete_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_4","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be deleted.","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_4","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_4","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder","text":"FolderResponse get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information about a folder in GDS. Get information for the specified folder ID.","title":"get_folder"},{"location":"libgds/docs/FoldersApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to retrieve. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) include_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information about a folder in GDS. api_response = api_instance . get_folder ( folder_id , tenant_id = tenant_id , include_volume_metadata = include_volume_metadata , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_5","text":"Name Type Description Notes folder_id str Unique identifier for the folder to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_5","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_5","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder_job","text":"JobResponse get_folder_job(folder_id, job_id) Get status of a folder job in GDS Get status of a folder job in GDS.","title":"get_folder_job"},{"location":"libgds/docs/FoldersApi/#example_6","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the job. job_id = 'job_id_example' # str | The id of the job try : # Get status of a folder job in GDS api_response = api_instance . get_folder_job ( folder_id , job_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_job: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_6","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the job. job_id str The id of the job","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_6","text":"JobResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_6","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_6","text":"Status code Description Response headers 200 Returned job. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#get_folder_session","text":"SessionResponse get_folder_session(folder_id, session_id) Get status of a folder upload in GDS Get status of a folder upload in GDS.","title":"get_folder_session"},{"location":"libgds/docs/FoldersApi/#example_7","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session. session_id = 'session_id_example' # str | The id of the upload session try : # Get status of a folder upload in GDS api_response = api_instance . get_folder_session ( folder_id , session_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->get_folder_session: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_7","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_7","text":"SessionResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_7","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_7","text":"Status code Description Response headers 200 Completed upload session. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#list_folders","text":"FolderListResponse list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get a list of folders Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items","title":"list_folders"},{"location":"libgds/docs/FoldersApi/#example_8","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) volume_id = [ 'volume_id_example' ] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional) volume_name = [ 'volume_name_example' ] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional) path = [ 'path_example' ] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional) job_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional) acls = [ 'acls_example' ] # list[str] | Optional field that specifies comma-separated acls to include in the list (optional) recursive = True # bool | Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get a list of folders api_response = api_instance . list_folders ( volume_id = volume_id , volume_name = volume_name , path = path , job_statuses = job_statuses , acls = acls , recursive = recursive , page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->list_folders: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_8","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] acls list[str] Optional field that specifies comma-separated acls to include in the list [optional] recursive bool Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_8","text":"FolderListResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_8","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_8","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#unarchive_folder","text":"FolderResponse unarchive_folder(folder_id, body) Unarchive a folder Unarchive a folder from a lower storage cost tier.","title":"unarchive_folder"},{"location":"libgds/docs/FoldersApi/#example_9","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be unarchived. body = libica . openapi . libgds . FolderUnarchiveRequest () # FolderUnarchiveRequest | try : # Unarchive a folder api_response = api_instance . unarchive_folder ( folder_id , body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->unarchive_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_9","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be unarchived. body FolderUnarchiveRequest","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_9","text":"FolderResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_9","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_9","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_9","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/FoldersApi/#update_folder","text":"FolderWriteableResponse update_folder(folder_id, include=include, body=body) Update a folder content or acl Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time. Optionally overwrite the acl for this folder if acl is provided in the request.","title":"update_folder"},{"location":"libgds/docs/FoldersApi/#example_10","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . FoldersApi ( api_client ) folder_id = 'folder_id_example' # str | Unique identifier for the folder to be updated. include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) body = libica . openapi . libgds . FolderUpdateRequest () # FolderUpdateRequest | (optional) try : # Update a folder content or acl api_response = api_instance . update_folder ( folder_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling FoldersApi->update_folder: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/FoldersApi/#parameters_10","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be updated. include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] body FolderUpdateRequest [optional]","title":"Parameters"},{"location":"libgds/docs/FoldersApi/#return-type_10","text":"FolderWriteableResponse","title":"Return type"},{"location":"libgds/docs/FoldersApi/#authorization_10","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/FoldersApi/#http-request-headers_10","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/FoldersApi/#http-response-details_10","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/GracePeriodEndAction/","text":"GracePeriodEndAction \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GracePeriodEndAction"},{"location":"libgds/docs/GracePeriodEndAction/#graceperiodendaction","text":"","title":"GracePeriodEndAction"},{"location":"libgds/docs/GracePeriodEndAction/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobOperationParameters/","text":"JobOperationParameters \u00b6 Container for XXXOperationParameters objects, which have additional details related to the specific job operation type. Only one object will be populated. Properties \u00b6 Name Type Description Notes folder_copy FolderCopyOperationParameters [optional] folder_delete FolderDeleteOperationParameters [optional] [Back to Model list] [Back to API list] [Back to README]","title":"JobOperationParameters"},{"location":"libgds/docs/JobOperationParameters/#joboperationparameters","text":"Container for XXXOperationParameters objects, which have additional details related to the specific job operation type. Only one object will be populated.","title":"JobOperationParameters"},{"location":"libgds/docs/JobOperationParameters/#properties","text":"Name Type Description Notes folder_copy FolderCopyOperationParameters [optional] folder_delete FolderDeleteOperationParameters [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobOperationType/","text":"JobOperationType \u00b6 The valid job operation type values for resources in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobOperationType"},{"location":"libgds/docs/JobOperationType/#joboperationtype","text":"The valid job operation type values for resources in GDS","title":"JobOperationType"},{"location":"libgds/docs/JobOperationType/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobProgressStatus/","text":"JobProgressStatus \u00b6 The valid Job Status values for folders in GDS. Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobProgressStatus"},{"location":"libgds/docs/JobProgressStatus/#jobprogressstatus","text":"The valid Job Status values for folders in GDS.","title":"JobProgressStatus"},{"location":"libgds/docs/JobProgressStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobResponse/","text":"JobResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Job [optional] parent_folder_urn str The Universal Resource Name of the parent folder associated with the Job [optional] operation_type JobOperationType [optional] operation_parameters JobOperationParameters [optional] progress_status JobProgressStatus [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Job [optional] time_modified datetime The date & time this Job was updated, in GDS [optional] time_completed datetime The date & time this Job was completed, in GDS [optional] [Back to Model list] [Back to API list] [Back to README]","title":"JobResponse"},{"location":"libgds/docs/JobResponse/#jobresponse","text":"","title":"JobResponse"},{"location":"libgds/docs/JobResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Job [optional] parent_folder_urn str The Universal Resource Name of the parent folder associated with the Job [optional] operation_type JobOperationType [optional] operation_parameters JobOperationParameters [optional] progress_status JobProgressStatus [optional] time_created datetime The date & time this Folder was created, in GDS [optional] created_by str The creator of this Job [optional] time_modified datetime The date & time this Job was updated, in GDS [optional] time_completed datetime The date & time this Job was completed, in GDS [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/JobStatus/","text":"JobStatus \u00b6 This enum was originally created to store the type of job on a folder or file entity. The Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType and Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job. Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"JobStatus"},{"location":"libgds/docs/JobStatus/#jobstatus","text":"This enum was originally created to store the type of job on a folder or file entity. The Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType and Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job.","title":"JobStatus"},{"location":"libgds/docs/JobStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/","text":"ObjectStorageCredentialsResponse \u00b6 The temporaryUploadCredentials/objectStorageCredentialsResponse will be deprecated. Use objectStoreAccess/awsS3TemporaryUploadCredentials instead. Properties \u00b6 Name Type Description Notes access_key str Access key for use with AWS S3 [optional] secret_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] service_url str Service URL for multi-regional support [optional] upload_location str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStorageCredentialsResponse"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/#objectstoragecredentialsresponse","text":"The temporaryUploadCredentials/objectStorageCredentialsResponse will be deprecated. Use objectStoreAccess/awsS3TemporaryUploadCredentials instead.","title":"ObjectStorageCredentialsResponse"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/#properties","text":"Name Type Description Notes access_key str Access key for use with AWS S3 [optional] secret_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] service_url str Service URL for multi-regional support [optional] upload_location str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStoreAccess/","text":"ObjectStoreAccess \u00b6 ObjectStoreAccess to get the temporaryCredentials per provider Properties \u00b6 Name Type Description Notes session_id str [optional] aws_s3_temporary_upload_credentials AwsS3TemporaryUploadCredentials [optional] aws_s3_presigned_url_for_upload AwsS3PresignedUrlForUpload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStoreAccess"},{"location":"libgds/docs/ObjectStoreAccess/#objectstoreaccess","text":"ObjectStoreAccess to get the temporaryCredentials per provider","title":"ObjectStoreAccess"},{"location":"libgds/docs/ObjectStoreAccess/#properties","text":"Name Type Description Notes session_id str [optional] aws_s3_temporary_upload_credentials AwsS3TemporaryUploadCredentials [optional] aws_s3_presigned_url_for_upload AwsS3PresignedUrlForUpload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/ObjectStoreSettings/","text":"ObjectStoreSettings \u00b6 Properties \u00b6 Name Type Description Notes aws_s3 AWSS3ObjectStoreSetting secret_name str Platform credentials Name Must provide either SecretId or SecretName [optional] secret_id str Platform credentials Id Must provide either SecretId or SecretName [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ObjectStoreSettings"},{"location":"libgds/docs/ObjectStoreSettings/#objectstoresettings","text":"","title":"ObjectStoreSettings"},{"location":"libgds/docs/ObjectStoreSettings/#properties","text":"Name Type Description Notes aws_s3 AWSS3ObjectStoreSetting secret_name str Platform credentials Name Must provide either SecretId or SecretName [optional] secret_id str Platform credentials Id Must provide either SecretId or SecretName [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/PartEtag/","text":"PartEtag \u00b6 PartEtag Properties \u00b6 Name Type Description Notes part int Part number [optional] etag str Etag response for the part upload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PartEtag"},{"location":"libgds/docs/PartEtag/#partetag","text":"PartEtag","title":"PartEtag"},{"location":"libgds/docs/PartEtag/#properties","text":"Name Type Description Notes part int Part number [optional] etag str Etag response for the part upload [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/PartInfo/","text":"PartInfo \u00b6 PartInfo of multi parts presigned url for upload Properties \u00b6 Name Type Description Notes part int Part number to be applied to {part} in MultipartTemplate [optional] date str Date to be applied to {date} in MultipartTemplate [optional] date_time str DateTime to be applied to {datetime} in MultipartTemplate [optional] signature str Signature to be applied to {signature} in MultipartTemplate [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PartInfo"},{"location":"libgds/docs/PartInfo/#partinfo","text":"PartInfo of multi parts presigned url for upload","title":"PartInfo"},{"location":"libgds/docs/PartInfo/#properties","text":"Name Type Description Notes part int Part number to be applied to {part} in MultipartTemplate [optional] date str Date to be applied to {date} in MultipartTemplate [optional] date_time str DateTime to be applied to {datetime} in MultipartTemplate [optional] signature str Signature to be applied to {signature} in MultipartTemplate [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/SessionResponse/","text":"SessionResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SessionResponse"},{"location":"libgds/docs/SessionResponse/#sessionresponse","text":"","title":"SessionResponse"},{"location":"libgds/docs/SessionResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date & time this Session was created, in GDS [optional] time_credentials_expire datetime The date & time this upload session expires [optional] time_closed datetime The date & time this Session was closed, in GDS [optional] time_completed datetime The date & time this Session was completed, in GDS [optional] metadata object [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/SessionStatus/","text":"SessionStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"SessionStatus"},{"location":"libgds/docs/SessionStatus/#sessionstatus","text":"","title":"SessionStatus"},{"location":"libgds/docs/SessionStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/StorageTier/","text":"StorageTier \u00b6 StorageTier Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"StorageTier"},{"location":"libgds/docs/StorageTier/#storagetier","text":"StorageTier","title":"StorageTier"},{"location":"libgds/docs/StorageTier/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateFileRequest/","text":"UpdateFileRequest \u00b6 Properties \u00b6 Name Type Description Notes type str The new file type (e.g. \\\"text/plain\\\"). [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateFileRequest"},{"location":"libgds/docs/UpdateFileRequest/#updatefilerequest","text":"","title":"UpdateFileRequest"},{"location":"libgds/docs/UpdateFileRequest/#properties","text":"Name Type Description Notes type str The new file type (e.g. \\\"text/plain\\\"). [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] metadata object Metadata about this file and its contents [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/","text":"UpdateVolumeConfigurationRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name of the volume object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"UpdateVolumeConfigurationRequest"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/#updatevolumeconfigurationrequest","text":"","title":"UpdateVolumeConfigurationRequest"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/#properties","text":"Name Type Description Notes name str Name of the volume object_store_settings ObjectStoreSettings [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/UpdateVolumeRequest/","text":"UpdateVolumeRequest \u00b6 Properties \u00b6 Name Type Description Notes metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateVolumeRequest"},{"location":"libgds/docs/UpdateVolumeRequest/#updatevolumerequest","text":"","title":"UpdateVolumeRequest"},{"location":"libgds/docs/UpdateVolumeRequest/#properties","text":"Name Type Description Notes metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationListResponse/","text":"VolumeConfigurationListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[VolumeConfigurationResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationListResponse"},{"location":"libgds/docs/VolumeConfigurationListResponse/#volumeconfigurationlistresponse","text":"","title":"VolumeConfigurationListResponse"},{"location":"libgds/docs/VolumeConfigurationListResponse/#properties","text":"Name Type Description Notes items list[VolumeConfigurationResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/","text":"VolumeConfigurationOnlineStatus \u00b6 The valid Online Status values for Volume configurations in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationOnlineStatus"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/#volumeconfigurationonlinestatus","text":"The valid Online Status values for Volume configurations in GDS","title":"VolumeConfigurationOnlineStatus"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationResponse/","text":"VolumeConfigurationResponse \u00b6 Properties \u00b6 Name Type Description Notes name str Name for the volume configuration [optional] tenant_id str The unique identifier for this Volume Configuration's Tenant [optional] sub_tenant_id str The unique identifier for this Volume Configurations's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume Configuration [optional] online_status VolumeConfigurationOnlineStatus [optional] error_code str Error code returned from the object store [optional] error_message str Error message returned from the object store [optional] time_of_last_error datetime Timestamp of the last observed error. [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] object_store_settings ObjectStoreSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeConfigurationResponse"},{"location":"libgds/docs/VolumeConfigurationResponse/#volumeconfigurationresponse","text":"","title":"VolumeConfigurationResponse"},{"location":"libgds/docs/VolumeConfigurationResponse/#properties","text":"Name Type Description Notes name str Name for the volume configuration [optional] tenant_id str The unique identifier for this Volume Configuration's Tenant [optional] sub_tenant_id str The unique identifier for this Volume Configurations's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume Configuration [optional] online_status VolumeConfigurationOnlineStatus [optional] error_code str Error code returned from the object store [optional] error_message str Error message returned from the object store [optional] time_of_last_error datetime Timestamp of the last observed error. [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] object_store_settings ObjectStoreSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeConfigurationsApi/","text":"libica.openapi.libgds.VolumeConfigurationsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration create_volume_configuration \u00b6 VolumeConfigurationResponse create_volume_configuration(body) Create a volume configuration in GDS. Create a volume configuration in GDS. This contains the object store details that will be used to create volumes. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) body = libica . openapi . libgds . CreateVolumeConfigurationRequest () # CreateVolumeConfigurationRequest | try : # Create a volume configuration in GDS. api_response = api_instance . create_volume_configuration ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->create_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateVolumeConfigurationRequest Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Volume Configuration. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume configuration name doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_volume_configuration \u00b6 VolumeResponse delete_volume_configuration(volume_configuration_name) Deletes a volume configuration by Id or name Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the Volume Configuration to be deleted. try : # Deletes a volume configuration by Id or name api_response = api_instance . delete_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->delete_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the Volume Configuration to be deleted. Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_volume_configuration \u00b6 VolumeConfigurationResponse get_volume_configuration(volume_configuration_name) Get information for the specified volume configuration name or Id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to retrieve information for. try : # Get information for the specified volume configuration name or Id api_response = api_instance . get_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->get_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to retrieve information for. Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_volume_configurations \u00b6 VolumeConfigurationListResponse list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include) Get a list of volumes Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) online_status = 'online_status_example' # str | Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) try : # Get a list of volumes api_response = api_instance . list_volume_configurations ( online_status = online_status , page_size = page_size , page_token = page_token , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->list_volume_configurations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes online_status str Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] Return type \u00b6 VolumeConfigurationListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not Found - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] validate_volume_configuration \u00b6 VolumeConfigurationResponse validate_volume_configuration(volume_configuration_name) Validate a volume configuration Validate an existing volume configuration. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to be validated. try : # Validate a volume configuration api_response = api_instance . validate_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->validate_volume_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to be validated. Return type \u00b6 VolumeConfigurationResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.VolumeConfigurationsApi"},{"location":"libgds/docs/VolumeConfigurationsApi/#libicaopenapilibgdsvolumeconfigurationsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration","title":"libica.openapi.libgds.VolumeConfigurationsApi"},{"location":"libgds/docs/VolumeConfigurationsApi/#create_volume_configuration","text":"VolumeConfigurationResponse create_volume_configuration(body) Create a volume configuration in GDS. Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.","title":"create_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) body = libica . openapi . libgds . CreateVolumeConfigurationRequest () # CreateVolumeConfigurationRequest | try : # Create a volume configuration in GDS. api_response = api_instance . create_volume_configuration ( body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->create_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters","text":"Name Type Description Notes body CreateVolumeConfigurationRequest","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details","text":"Status code Description Response headers 201 Created new Volume Configuration. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume configuration name doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#delete_volume_configuration","text":"VolumeResponse delete_volume_configuration(volume_configuration_name) Deletes a volume configuration by Id or name","title":"delete_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the Volume Configuration to be deleted. try : # Deletes a volume configuration by Id or name api_response = api_instance . delete_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->delete_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_1","text":"Name Type Description Notes volume_configuration_name str Unique name of the Volume Configuration to be deleted.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_1","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_1","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#get_volume_configuration","text":"VolumeConfigurationResponse get_volume_configuration(volume_configuration_name) Get information for the specified volume configuration name or Id","title":"get_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to retrieve information for. try : # Get information for the specified volume configuration name or Id api_response = api_instance . get_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->get_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_2","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to retrieve information for.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_2","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_2","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#list_volume_configurations","text":"VolumeConfigurationListResponse list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include) Get a list of volumes","title":"list_volume_configurations"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) online_status = 'online_status_example' # str | Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. (optional) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) try : # Get a list of volumes api_response = api_instance . list_volume_configurations ( online_status = online_status , page_size = page_size , page_token = page_token , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->list_volume_configurations: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_3","text":"Name Type Description Notes online_status str Optional field that specifies the Online Status for Volume configurations included in the list. If provided, the value must be Initializing, Ok, or Error. [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional]","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_3","text":"VolumeConfigurationListResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not Found - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeConfigurationsApi/#validate_volume_configuration","text":"VolumeConfigurationResponse validate_volume_configuration(volume_configuration_name) Validate a volume configuration Validate an existing volume configuration.","title":"validate_volume_configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumeConfigurationsApi ( api_client ) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to be validated. try : # Validate a volume configuration api_response = api_instance . validate_volume_configuration ( volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumeConfigurationsApi->validate_volume_configuration: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_4","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to be validated.","title":"Parameters"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_4","text":"VolumeConfigurationResponse","title":"Return type"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_4","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumeLifeCycleSettings/","text":"VolumeLifeCycleSettings \u00b6 Properties \u00b6 Name Type Description Notes grace_period_days int Number of days before the files associated to this volume expires [optional] grace_period_end_action GracePeriodEndAction [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeLifeCycleSettings"},{"location":"libgds/docs/VolumeLifeCycleSettings/#volumelifecyclesettings","text":"","title":"VolumeLifeCycleSettings"},{"location":"libgds/docs/VolumeLifeCycleSettings/#properties","text":"Name Type Description Notes grace_period_days int Number of days before the files associated to this volume expires [optional] grace_period_end_action GracePeriodEndAction [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeListResponse/","text":"VolumeListResponse \u00b6 Properties \u00b6 Name Type Description Notes items list[VolumeResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeListResponse"},{"location":"libgds/docs/VolumeListResponse/#volumelistresponse","text":"","title":"VolumeListResponse"},{"location":"libgds/docs/VolumeListResponse/#properties","text":"Name Type Description Notes items list[VolumeResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeResponse/","text":"VolumeResponse \u00b6 Properties \u00b6 Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"VolumeResponse"},{"location":"libgds/docs/VolumeResponse/#volumeresponse","text":"","title":"VolumeResponse"},{"location":"libgds/docs/VolumeResponse/#properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume. This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date & time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date & time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumeSettingStatus/","text":"VolumeSettingStatus \u00b6 The valid Online Status values for Volume configurations in GDS Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"VolumeSettingStatus"},{"location":"libgds/docs/VolumeSettingStatus/#volumesettingstatus","text":"The valid Online Status values for Volume configurations in GDS","title":"VolumeSettingStatus"},{"location":"libgds/docs/VolumeSettingStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libgds/docs/VolumesApi/","text":"libica.openapi.libgds.VolumesApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name list_volumes GET /v1/volumes Get a list of volumes create_volume \u00b6 CreateVolumeResponse create_volume(body, include=include) Create a volume in GDS and receive temporary credentials for upload Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) body = libica . openapi . libgds . CreateVolumeRequest () # CreateVolumeRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a volume in GDS and receive temporary credentials for upload api_response = api_instance . create_volume ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->create_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateVolumeRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional] Return type \u00b6 CreateVolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Created new Volume. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_volume \u00b6 VolumeResponse delete_volume(volume_id, purge_object_store_data=purge_object_store_data) Deletes a volume by Id Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the Volume to be deleted. purge_object_store_data = True # bool | Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. (optional) try : # Deletes a volume by Id api_response = api_instance . delete_volume ( volume_id , purge_object_store_data = purge_object_store_data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->delete_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id str Unique identifier for the Volume to be deleted. purge_object_store_data bool Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. [optional] Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_volume \u00b6 VolumeResponse get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information for the specified volume ID or volume name Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the volume to retrieve information for. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information for the specified volume ID or volume name api_response = api_instance . get_volume ( volume_id , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->get_volume: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes volume_id str Unique identifier for the volume to retrieve information for. tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] Return type \u00b6 VolumeResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_volumes \u00b6 VolumeListResponse list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name) Get a list of volumes Get a list of volumes accessible by the current JWT token\u2019s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration (optional) try : # Get a list of volumes api_response = api_instance . list_volumes ( page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , volume_configuration_name = volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->list_volumes: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] volume_configuration_name str Unique name of the volume configuration [optional] Return type \u00b6 VolumeListResponse Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libgds.VolumesApi"},{"location":"libgds/docs/VolumesApi/#libicaopenapilibgdsvolumesapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name list_volumes GET /v1/volumes Get a list of volumes","title":"libica.openapi.libgds.VolumesApi"},{"location":"libgds/docs/VolumesApi/#create_volume","text":"CreateVolumeResponse create_volume(body, include=include) Create a volume in GDS and receive temporary credentials for upload Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.","title":"create_volume"},{"location":"libgds/docs/VolumesApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) body = libica . openapi . libgds . CreateVolumeRequest () # CreateVolumeRequest | include = 'include_example' # str | Optionally include additional fields in the response. Possible values: ObjectStoreAccess (optional) try : # Create a volume in GDS and receive temporary credentials for upload api_response = api_instance . create_volume ( body , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->create_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters","text":"Name Type Description Notes body CreateVolumeRequest include str Optionally include additional fields in the response. Possible values: ObjectStoreAccess [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type","text":"CreateVolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details","text":"Status code Description Response headers 201 Created new Volume. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#delete_volume","text":"VolumeResponse delete_volume(volume_id, purge_object_store_data=purge_object_store_data) Deletes a volume by Id","title":"delete_volume"},{"location":"libgds/docs/VolumesApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the Volume to be deleted. purge_object_store_data = True # bool | Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. (optional) try : # Deletes a volume by Id api_response = api_instance . delete_volume ( volume_id , purge_object_store_data = purge_object_store_data ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->delete_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_1","text":"Name Type Description Notes volume_id str Unique identifier for the Volume to be deleted. purge_object_store_data bool Optional and for BYOB only. If true, the volume's data in object storage will be erased. This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_1","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_1","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#get_volume","text":"VolumeResponse get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude) Get information for the specified volume ID or volume name","title":"get_volume"},{"location":"libgds/docs/VolumesApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) volume_id = 'volume_id_example' # str | Unique identifier for the volume to retrieve information for. tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) metadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional) metadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional) try : # Get information for the specified volume ID or volume name api_response = api_instance . get_volume ( volume_id , tenant_id = tenant_id , metadata_include = metadata_include , metadata_exclude = metadata_exclude ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->get_volume: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_2","text":"Name Type Description Notes volume_id str Unique identifier for the volume to retrieve information for. tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_2","text":"VolumeResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_2","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libgds/docs/VolumesApi/#list_volumes","text":"VolumeListResponse list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name) Get a list of volumes Get a list of volumes accessible by the current JWT token\u2019s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.","title":"list_volumes"},{"location":"libgds/docs/VolumesApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libgds from libica.openapi.libgds.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libgds . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libgds . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libgds . VolumesApi ( api_client ) page_size = 56 # int | START_DESC END_DESC (optional) page_token = 'page_token_example' # str | START_DESC END_DESC (optional) include = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl (optional) tenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional) volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration (optional) try : # Get a list of volumes api_response = api_instance . list_volumes ( page_size = page_size , page_token = page_token , include = include , tenant_id = tenant_id , volume_configuration_name = volume_configuration_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling VolumesApi->list_volumes: %s \\n \" % e )","title":"Example"},{"location":"libgds/docs/VolumesApi/#parameters_3","text":"Name Type Description Notes page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation. Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] volume_configuration_name str Unique name of the volume configuration [optional]","title":"Parameters"},{"location":"libgds/docs/VolumesApi/#return-type_3","text":"VolumeListResponse","title":"Return type"},{"location":"libgds/docs/VolumesApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libgds/docs/VolumesApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libgds/docs/VolumesApi/#http-response-details_3","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/","text":"libica.openapi.libtes \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libtes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:24.243132+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libtes, you can run the following: from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description TaskRunsApi abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run TaskRunsApi create_task_run POST /v1/tasks/runs Create and launch a task run TaskRunsApi get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run TaskRunsApi heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run TaskRunsApi list_task_runs GET /v1/tasks/runs Get a list of task runs TaskVersionsApi create_task_version POST /v1/tasks/{taskId}/versions Create a task version TaskVersionsApi get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version TaskVersionsApi launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version TaskVersionsApi list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions TaskVersionsApi update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties TasksApi create_task POST /v1/tasks Create a Task TasksApi get_task GET /v1/tasks/{taskId} Get the details of a Task TasksApi list_tasks GET /v1/tasks Get a list of tasks TasksApi update_task PATCH /v1/tasks/{taskId} Update an existing task. Documentation For Models \u00b6 ContainerState ContainerStateRunning ContainerStateTerminated ContainerStateWaiting ContainerStatus CreateTaskRequest CreateTaskRunRequest CreateTaskVersionRequest Credentials Environment ErrorResponse Execution HeartbeatTaskRunRequest Image InputMountMappingWithCreds InputStreamSettings LaunchTaskRequest MountMappingWithCreds Resources SystemFiles Task TaskRun TaskRunHeartbeat TaskRunLogs TaskRunSummary TaskRunSummaryPagedItems TaskSummary TaskSummaryPagedItems TaskVersion TaskVersionSummary TaskVersionSummaryPagedItems UpdateTaskRequest UpdateTaskVersionRequest Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libtes"},{"location":"libtes/#libicaopenapilibtes","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libtes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:24.243132+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libtes"},{"location":"libtes/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libtes/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libtes/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libtes, you can run the following: from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e )","title":"Getting Started"},{"location":"libtes/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description TaskRunsApi abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run TaskRunsApi create_task_run POST /v1/tasks/runs Create and launch a task run TaskRunsApi get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run TaskRunsApi heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run TaskRunsApi list_task_runs GET /v1/tasks/runs Get a list of task runs TaskVersionsApi create_task_version POST /v1/tasks/{taskId}/versions Create a task version TaskVersionsApi get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version TaskVersionsApi launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version TaskVersionsApi list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions TaskVersionsApi update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties TasksApi create_task POST /v1/tasks Create a Task TasksApi get_task GET /v1/tasks/{taskId} Get the details of a Task TasksApi list_tasks GET /v1/tasks Get a list of tasks TasksApi update_task PATCH /v1/tasks/{taskId} Update an existing task.","title":"Documentation for API Endpoints"},{"location":"libtes/#documentation-for-models","text":"ContainerState ContainerStateRunning ContainerStateTerminated ContainerStateWaiting ContainerStatus CreateTaskRequest CreateTaskRunRequest CreateTaskVersionRequest Credentials Environment ErrorResponse Execution HeartbeatTaskRunRequest Image InputMountMappingWithCreds InputStreamSettings LaunchTaskRequest MountMappingWithCreds Resources SystemFiles Task TaskRun TaskRunHeartbeat TaskRunLogs TaskRunSummary TaskRunSummaryPagedItems TaskSummary TaskSummaryPagedItems TaskVersion TaskVersionSummary TaskVersionSummaryPagedItems UpdateTaskRequest UpdateTaskVersionRequest","title":"Documentation For Models"},{"location":"libtes/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libtes/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libtes/#author","text":"","title":"Author"},{"location":"libtes/docs/ContainerState/","text":"ContainerState \u00b6 Properties \u00b6 Name Type Description Notes waiting ContainerStateWaiting [optional] running ContainerStateRunning [optional] terminated ContainerStateTerminated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerState"},{"location":"libtes/docs/ContainerState/#containerstate","text":"","title":"ContainerState"},{"location":"libtes/docs/ContainerState/#properties","text":"Name Type Description Notes waiting ContainerStateWaiting [optional] running ContainerStateRunning [optional] terminated ContainerStateTerminated [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateRunning/","text":"ContainerStateRunning \u00b6 Properties \u00b6 Name Type Description Notes started_at datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateRunning"},{"location":"libtes/docs/ContainerStateRunning/#containerstaterunning","text":"","title":"ContainerStateRunning"},{"location":"libtes/docs/ContainerStateRunning/#properties","text":"Name Type Description Notes started_at datetime [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateTerminated/","text":"ContainerStateTerminated \u00b6 Properties \u00b6 Name Type Description Notes exit_code int [optional] signal int [optional] reason str [optional] message str [optional] started_at datetime [optional] finished_at datetime [optional] container_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateTerminated"},{"location":"libtes/docs/ContainerStateTerminated/#containerstateterminated","text":"","title":"ContainerStateTerminated"},{"location":"libtes/docs/ContainerStateTerminated/#properties","text":"Name Type Description Notes exit_code int [optional] signal int [optional] reason str [optional] message str [optional] started_at datetime [optional] finished_at datetime [optional] container_id str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStateWaiting/","text":"ContainerStateWaiting \u00b6 Properties \u00b6 Name Type Description Notes reason str [optional] message str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStateWaiting"},{"location":"libtes/docs/ContainerStateWaiting/#containerstatewaiting","text":"","title":"ContainerStateWaiting"},{"location":"libtes/docs/ContainerStateWaiting/#properties","text":"Name Type Description Notes reason str [optional] message str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ContainerStatus/","text":"ContainerStatus \u00b6 Properties \u00b6 Name Type Description Notes name str [optional] state ContainerState [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ContainerStatus"},{"location":"libtes/docs/ContainerStatus/#containerstatus","text":"","title":"ContainerStatus"},{"location":"libtes/docs/ContainerStatus/#properties","text":"Name Type Description Notes name str [optional] state ContainerState [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskRequest/","text":"CreateTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task description str User-defined description of the task [optional] acl list[str] Access Control List [optional] task_versions list[CreateTaskVersionRequest] List of task versions [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskRequest"},{"location":"libtes/docs/CreateTaskRequest/#createtaskrequest","text":"","title":"CreateTaskRequest"},{"location":"libtes/docs/CreateTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task description str User-defined description of the task [optional] acl list[str] Access Control List [optional] task_versions list[CreateTaskVersionRequest] List of task versions [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskRunRequest/","text":"CreateTaskRunRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task run [optional] description str User-defined description of the task run [optional] acl list[str] Access Control List [optional] execution Execution [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskRunRequest"},{"location":"libtes/docs/CreateTaskRunRequest/#createtaskrunrequest","text":"","title":"CreateTaskRunRequest"},{"location":"libtes/docs/CreateTaskRunRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task run [optional] description str User-defined description of the task run [optional] acl list[str] Access Control List [optional] execution Execution [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/CreateTaskVersionRequest/","text":"CreateTaskVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes version str User-defined version of task version description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTaskVersionRequest"},{"location":"libtes/docs/CreateTaskVersionRequest/#createtaskversionrequest","text":"","title":"CreateTaskVersionRequest"},{"location":"libtes/docs/CreateTaskVersionRequest/#properties","text":"Name Type Description Notes version str User-defined version of task version description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Credentials/","text":"Credentials \u00b6 Properties \u00b6 Name Type Description Notes username str [optional] password str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Credentials"},{"location":"libtes/docs/Credentials/#credentials","text":"","title":"Credentials"},{"location":"libtes/docs/Credentials/#properties","text":"Name Type Description Notes username str [optional] password str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Environment/","text":"Environment \u00b6 Properties \u00b6 Name Type Description Notes variables dict(str, str) [optional] resources Resources [optional] input_stream_settings InputStreamSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Environment"},{"location":"libtes/docs/Environment/#environment","text":"","title":"Environment"},{"location":"libtes/docs/Environment/#properties","text":"Name Type Description Notes variables dict(str, str) [optional] resources Resources [optional] input_stream_settings InputStreamSettings [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libtes/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libtes/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Execution/","text":"Execution \u00b6 Properties \u00b6 Name Type Description Notes image Image [optional] command str [optional] args list[str] Argument to run specified task [optional] inputs list[InputMountMappingWithCreds] Path (Inputs) - Path to mount file at valid Url URL (Inputs) - Url of file mounted at specified path [optional] outputs list[MountMappingWithCreds] Path (Outputs) - Path where files will be output to valid Url URL (Outputs) - Url of folder with files from the path will be uploaded [optional] system_files SystemFiles [optional] environment Environment [optional] working_directory str [optional] retry_limit int [optional] [default to 3] retry_count int [optional] [default to 0] [Back to Model list] [Back to API list] [Back to README]","title":"Execution"},{"location":"libtes/docs/Execution/#execution","text":"","title":"Execution"},{"location":"libtes/docs/Execution/#properties","text":"Name Type Description Notes image Image [optional] command str [optional] args list[str] Argument to run specified task [optional] inputs list[InputMountMappingWithCreds] Path (Inputs) - Path to mount file at valid Url URL (Inputs) - Url of file mounted at specified path [optional] outputs list[MountMappingWithCreds] Path (Outputs) - Path where files will be output to valid Url URL (Outputs) - Url of folder with files from the path will be uploaded [optional] system_files SystemFiles [optional] environment Environment [optional] working_directory str [optional] retry_limit int [optional] [default to 3] retry_count int [optional] [default to 0] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/HeartbeatTaskRunRequest/","text":"HeartbeatTaskRunRequest \u00b6 Properties \u00b6 Name Type Description Notes last_heartbeat bool LastHeartbeat [optional] pod_name str [optional] pod_uid str [optional] pod_hardware_details str [optional] job_retry_count int [optional] nonce str [optional] container_status list[ContainerStatus] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"HeartbeatTaskRunRequest"},{"location":"libtes/docs/HeartbeatTaskRunRequest/#heartbeattaskrunrequest","text":"","title":"HeartbeatTaskRunRequest"},{"location":"libtes/docs/HeartbeatTaskRunRequest/#properties","text":"Name Type Description Notes last_heartbeat bool LastHeartbeat [optional] pod_name str [optional] pod_uid str [optional] pod_hardware_details str [optional] job_retry_count int [optional] nonce str [optional] container_status list[ContainerStatus] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Image/","text":"Image \u00b6 Properties \u00b6 Name Type Description Notes name str Name of url for Docker Image tag str Version of image as defined in repository [optional] digest str Version of image as defined in repository [optional] credentials Credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Image"},{"location":"libtes/docs/Image/#image","text":"","title":"Image"},{"location":"libtes/docs/Image/#properties","text":"Name Type Description Notes name str Name of url for Docker Image tag str Version of image as defined in repository [optional] digest str Version of image as defined in repository [optional] credentials Credentials [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/InputMountMappingWithCreds/","text":"InputMountMappingWithCreds \u00b6 Properties \u00b6 Name Type Description Notes storage_provider str [optional] credentials dict(str, str) [optional] path str [optional] url str [optional] urn str [optional] mode str [optional] type str [optional] [default to 'File'] [Back to Model list] [Back to API list] [Back to README]","title":"InputMountMappingWithCreds"},{"location":"libtes/docs/InputMountMappingWithCreds/#inputmountmappingwithcreds","text":"","title":"InputMountMappingWithCreds"},{"location":"libtes/docs/InputMountMappingWithCreds/#properties","text":"Name Type Description Notes storage_provider str [optional] credentials dict(str, str) [optional] path str [optional] url str [optional] urn str [optional] mode str [optional] type str [optional] [default to 'File'] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/InputStreamSettings/","text":"InputStreamSettings \u00b6 Properties \u00b6 Name Type Description Notes access_pattern str [optional] [default to 'sequential'] cache_size_gb int [optional] [default to 50] block_size_mb float [optional] [default to 32.0] prefetch_blocks int [optional] [default to 32] [Back to Model list] [Back to API list] [Back to README]","title":"InputStreamSettings"},{"location":"libtes/docs/InputStreamSettings/#inputstreamsettings","text":"","title":"InputStreamSettings"},{"location":"libtes/docs/InputStreamSettings/#properties","text":"Name Type Description Notes access_pattern str [optional] [default to 'sequential'] cache_size_gb int [optional] [default to 50] block_size_mb float [optional] [default to 32.0] prefetch_blocks int [optional] [default to 32] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/LaunchTaskRequest/","text":"LaunchTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name for the task run, if not specified version string of task version will be used [optional] description str User-defined description for the task run, if not specified task version description will be used [optional] arguments dict(str, str) Arguments to launch a task run [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LaunchTaskRequest"},{"location":"libtes/docs/LaunchTaskRequest/#launchtaskrequest","text":"","title":"LaunchTaskRequest"},{"location":"libtes/docs/LaunchTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name for the task run, if not specified version string of task version will be used [optional] description str User-defined description for the task run, if not specified task version description will be used [optional] arguments dict(str, str) Arguments to launch a task run [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/MountMappingWithCreds/","text":"MountMappingWithCreds \u00b6 Properties \u00b6 Name Type Description Notes path str [optional] url str [optional] urn str [optional] type str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MountMappingWithCreds"},{"location":"libtes/docs/MountMappingWithCreds/#mountmappingwithcreds","text":"","title":"MountMappingWithCreds"},{"location":"libtes/docs/MountMappingWithCreds/#properties","text":"Name Type Description Notes path str [optional] url str [optional] urn str [optional] type str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Resources/","text":"Resources \u00b6 Properties \u00b6 Name Type Description Notes type str [optional] size str [optional] cpu_cores float [optional] memory_gb float [optional] hardware list[str] [optional] tier str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Resources"},{"location":"libtes/docs/Resources/#resources","text":"","title":"Resources"},{"location":"libtes/docs/Resources/#properties","text":"Name Type Description Notes type str [optional] size str [optional] cpu_cores float [optional] memory_gb float [optional] hardware list[str] [optional] tier str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/SystemFiles/","text":"SystemFiles \u00b6 Properties \u00b6 Name Type Description Notes url str [optional] urn str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SystemFiles"},{"location":"libtes/docs/SystemFiles/#systemfiles","text":"","title":"SystemFiles"},{"location":"libtes/docs/SystemFiles/#properties","text":"Name Type Description Notes url str [optional] urn str [optional] storage_provider str [optional] credentials dict(str, str) [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/Task/","text":"Task \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] task_versions list[TaskVersion] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Task"},{"location":"libtes/docs/Task/#task","text":"","title":"Task"},{"location":"libtes/docs/Task/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] task_versions list[TaskVersion] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRun/","text":"TaskRun \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRun"},{"location":"libtes/docs/TaskRun/#taskrun","text":"","title":"TaskRun"},{"location":"libtes/docs/TaskRun/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunDirect/","text":"TaskRunDirect \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] name str [optional] href str Href of the object [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunDirect"},{"location":"libtes/docs/TaskRunDirect/#taskrundirect","text":"","title":"TaskRunDirect"},{"location":"libtes/docs/TaskRunDirect/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] name str [optional] href str Href of the object [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunHeartbeat/","text":"TaskRunHeartbeat \u00b6 Properties \u00b6 Name Type Description Notes jwt str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunHeartbeat"},{"location":"libtes/docs/TaskRunHeartbeat/#taskrunheartbeat","text":"","title":"TaskRunHeartbeat"},{"location":"libtes/docs/TaskRunHeartbeat/#properties","text":"Name Type Description Notes jwt str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunLogs/","text":"TaskRunLogs \u00b6 Properties \u00b6 Name Type Description Notes start_time datetime [optional] end_time datetime [optional] error str [optional] error_details str [optional] stdout str [optional] stderr str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunLogs"},{"location":"libtes/docs/TaskRunLogs/#taskrunlogs","text":"","title":"TaskRunLogs"},{"location":"libtes/docs/TaskRunLogs/#properties","text":"Name Type Description Notes start_time datetime [optional] end_time datetime [optional] error str [optional] error_details str [optional] stdout str [optional] stderr str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunSummary/","text":"TaskRunSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunSummary"},{"location":"libtes/docs/TaskRunSummary/#taskrunsummary","text":"","title":"TaskRunSummary"},{"location":"libtes/docs/TaskRunSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunSummaryPagedItems/","text":"TaskRunSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskRunSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskRunSummaryPagedItems"},{"location":"libtes/docs/TaskRunSummaryPagedItems/#taskrunsummarypageditems","text":"","title":"TaskRunSummaryPagedItems"},{"location":"libtes/docs/TaskRunSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskRunSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskRunsApi/","text":"libica.openapi.libtes.TaskRunsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run create_task_run POST /v1/tasks/runs Create and launch a task run get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run list_task_runs GET /v1/tasks/runs Get a list of task runs abort_task_run \u00b6 TaskRunSummary abort_task_run(run_id) Abort a task run Aborts a task run for a given task run ID. The task run is required to have a status of \\\"Pending\\\" or \\\"Running\\\". Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str Return type \u00b6 TaskRunSummary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_task_run \u00b6 TaskRun create_task_run(body=body) Create and launch a task run Creates and launches a task run. Returns the ID and status associated with the new task run. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) body = libica . openapi . libtes . CreateTaskRunRequest () # CreateTaskRunRequest | (optional) try : # Create and launch a task run api_response = api_instance . create_task_run ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->create_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateTaskRunRequest [optional] Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task_run \u00b6 TaskRun get_task_run(run_id) Get the status of a task run Gets the status of a task run for a given task run ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Get the status of a task run api_response = api_instance . get_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->get_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] heartbeat_task_run \u00b6 TaskRunHeartbeat heartbeat_task_run(run_id, body=body) Heartbeat for a task run Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | body = libica . openapi . libtes . HeartbeatTaskRunRequest () # HeartbeatTaskRunRequest | (optional) try : # Heartbeat for a task run api_response = api_instance . heartbeat_task_run ( run_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->heartbeat_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str body HeartbeatTaskRunRequest [optional] Return type \u00b6 TaskRunHeartbeat Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_task_runs \u00b6 TaskRunSummaryPagedItems list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token) Get a list of task runs Get a list of task runs accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) names = 'names_example' # str | (optional) status = 'status_example' # str | (optional) versions = 'versions_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of task runs api_response = api_instance . list_task_runs ( sort = sort , names = names , status = status , versions = versions , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->list_task_runs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] names str [optional] status str [optional] versions str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskRunSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TaskRunsApi"},{"location":"libtes/docs/TaskRunsApi/#libicaopenapilibtestaskrunsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run create_task_run POST /v1/tasks/runs Create and launch a task run get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run list_task_runs GET /v1/tasks/runs Get a list of task runs","title":"libica.openapi.libtes.TaskRunsApi"},{"location":"libtes/docs/TaskRunsApi/#abort_task_run","text":"TaskRunSummary abort_task_run(run_id) Abort a task run Aborts a task run for a given task run ID. The task run is required to have a status of \\\"Pending\\\" or \\\"Running\\\".","title":"abort_task_run"},{"location":"libtes/docs/TaskRunsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Abort a task run api_response = api_instance . abort_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->abort_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters","text":"Name Type Description Notes run_id str","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type","text":"TaskRunSummary","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#create_task_run","text":"TaskRun create_task_run(body=body) Create and launch a task run Creates and launches a task run. Returns the ID and status associated with the new task run.","title":"create_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) body = libica . openapi . libtes . CreateTaskRunRequest () # CreateTaskRunRequest | (optional) try : # Create and launch a task run api_response = api_instance . create_task_run ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->create_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_1","text":"Name Type Description Notes body CreateTaskRunRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_1","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_1","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_1","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#get_task_run","text":"TaskRun get_task_run(run_id) Get the status of a task run Gets the status of a task run for a given task run ID.","title":"get_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | try : # Get the status of a task run api_response = api_instance . get_task_run ( run_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->get_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_2","text":"Name Type Description Notes run_id str","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_2","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_2","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#heartbeat_task_run","text":"TaskRunHeartbeat heartbeat_task_run(run_id, body=body) Heartbeat for a task run Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.","title":"heartbeat_task_run"},{"location":"libtes/docs/TaskRunsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) run_id = 'run_id_example' # str | body = libica . openapi . libtes . HeartbeatTaskRunRequest () # HeartbeatTaskRunRequest | (optional) try : # Heartbeat for a task run api_response = api_instance . heartbeat_task_run ( run_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->heartbeat_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_3","text":"Name Type Description Notes run_id str body HeartbeatTaskRunRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_3","text":"TaskRunHeartbeat","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskRunsApi/#list_task_runs","text":"TaskRunSummaryPagedItems list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token) Get a list of task runs Get a list of task runs accessible by the current tenant ID.","title":"list_task_runs"},{"location":"libtes/docs/TaskRunsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskRunsApi ( api_client ) sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) names = 'names_example' # str | (optional) status = 'status_example' # str | (optional) versions = 'versions_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of task runs api_response = api_instance . list_task_runs ( sort = sort , names = names , status = status , versions = versions , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskRunsApi->list_task_runs: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskRunsApi/#parameters_4","text":"Name Type Description Notes sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] names str [optional] status str [optional] versions str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TaskRunsApi/#return-type_4","text":"TaskRunSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TaskRunsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_4","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskSummary/","text":"TaskSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskSummary"},{"location":"libtes/docs/TaskSummary/#tasksummary","text":"","title":"TaskSummary"},{"location":"libtes/docs/TaskSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskSummaryPagedItems/","text":"TaskSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskSummaryPagedItems"},{"location":"libtes/docs/TaskSummaryPagedItems/#tasksummarypageditems","text":"","title":"TaskSummaryPagedItems"},{"location":"libtes/docs/TaskSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersion/","text":"TaskVersion \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] execution Execution [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersion"},{"location":"libtes/docs/TaskVersion/#taskversion","text":"","title":"TaskVersion"},{"location":"libtes/docs/TaskVersion/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] execution Execution [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionSummary/","text":"TaskVersionSummary \u00b6 Properties \u00b6 Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersionSummary"},{"location":"libtes/docs/TaskVersionSummary/#taskversionsummary","text":"","title":"TaskVersionSummary"},{"location":"libtes/docs/TaskVersionSummary/#properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/","text":"TaskVersionSummaryPagedItems \u00b6 Properties \u00b6 Name Type Description Notes items list[TaskVersionSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TaskVersionSummaryPagedItems"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/#taskversionsummarypageditems","text":"","title":"TaskVersionSummaryPagedItems"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/#properties","text":"Name Type Description Notes items list[TaskVersionSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/TaskVersionsApi/","text":"libica.openapi.libtes.TaskVersionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task_version POST /v1/tasks/{taskId}/versions Create a task version get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties create_task_version \u00b6 TaskVersion create_task_version(task_id, body=body) Create a task version Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . CreateTaskVersionRequest () # CreateTaskVersionRequest | (optional) try : # Create a task version api_response = api_instance . create_task_version ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->create_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str body CreateTaskVersionRequest [optional] Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task_version \u00b6 TaskVersion get_task_version(task_id, version_id) Get the details of a task version Gets details of a task version for a given task version ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | try : # Get the details of a task version api_response = api_instance . get_task_version ( task_id , version_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->get_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] launch_task_run \u00b6 TaskRun launch_task_run(task_id, version_id, body=body) Launch a task version Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . LaunchTaskRequest () # LaunchTaskRequest | (optional) try : # Launch a task version api_response = api_instance . launch_task_run ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->launch_task_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str body LaunchTaskRequest [optional] Return type \u00b6 TaskRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_task_versions \u00b6 TaskVersionSummaryPagedItems list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token) Get a list of versions Gets a list of task versions within the given task accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) versions = 'versions_example' # str | (optional) ids = 'ids_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of versions api_response = api_instance . list_task_versions ( task_id , sort = sort , versions = versions , ids = ids , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->list_task_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] versions str [optional] ids str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskVersionSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_task_version \u00b6 TaskVersion update_task_version(task_id, version_id, body=body) Update task version properties Update details of a task version for a given task version ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . UpdateTaskVersionRequest () # UpdateTaskVersionRequest | (optional) try : # Update task version properties api_response = api_instance . update_task_version ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->update_task_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str version_id str body UpdateTaskVersionRequest [optional] Return type \u00b6 TaskVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TaskVersionsApi"},{"location":"libtes/docs/TaskVersionsApi/#libicaopenapilibtestaskversionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task_version POST /v1/tasks/{taskId}/versions Create a task version get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties","title":"libica.openapi.libtes.TaskVersionsApi"},{"location":"libtes/docs/TaskVersionsApi/#create_task_version","text":"TaskVersion create_task_version(task_id, body=body) Create a task version Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.","title":"create_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . CreateTaskVersionRequest () # CreateTaskVersionRequest | (optional) try : # Create a task version api_response = api_instance . create_task_version ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->create_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters","text":"Name Type Description Notes task_id str body CreateTaskVersionRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#get_task_version","text":"TaskVersion get_task_version(task_id, version_id) Get the details of a task version Gets details of a task version for a given task version ID.","title":"get_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | try : # Get the details of a task version api_response = api_instance . get_task_version ( task_id , version_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->get_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_1","text":"Name Type Description Notes task_id str version_id str","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_1","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#launch_task_run","text":"TaskRun launch_task_run(task_id, version_id, body=body) Launch a task version Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.","title":"launch_task_run"},{"location":"libtes/docs/TaskVersionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . LaunchTaskRequest () # LaunchTaskRequest | (optional) try : # Launch a task version api_response = api_instance . launch_task_run ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->launch_task_run: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_2","text":"Name Type Description Notes task_id str version_id str body LaunchTaskRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_2","text":"TaskRun","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_2","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_2","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#list_task_versions","text":"TaskVersionSummaryPagedItems list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token) Get a list of versions Gets a list of task versions within the given task accessible by the current tenant ID.","title":"list_task_versions"},{"location":"libtes/docs/TaskVersionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) versions = 'versions_example' # str | (optional) ids = 'ids_example' # str | (optional) acls = 'acls_example' # str | (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of versions api_response = api_instance . list_task_versions ( task_id , sort = sort , versions = versions , ids = ids , acls = acls , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->list_task_versions: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_3","text":"Name Type Description Notes task_id str sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] versions str [optional] ids str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_3","text":"TaskVersionSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TaskVersionsApi/#update_task_version","text":"TaskVersion update_task_version(task_id, version_id, body=body) Update task version properties Update details of a task version for a given task version ID.","title":"update_task_version"},{"location":"libtes/docs/TaskVersionsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TaskVersionsApi ( api_client ) task_id = 'task_id_example' # str | version_id = 'version_id_example' # str | body = libica . openapi . libtes . UpdateTaskVersionRequest () # UpdateTaskVersionRequest | (optional) try : # Update task version properties api_response = api_instance . update_task_version ( task_id , version_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TaskVersionsApi->update_task_version: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TaskVersionsApi/#parameters_4","text":"Name Type Description Notes task_id str version_id str body UpdateTaskVersionRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TaskVersionsApi/#return-type_4","text":"TaskVersion","title":"Return type"},{"location":"libtes/docs/TaskVersionsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_4","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_4","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/","text":"libica.openapi.libtes.TasksApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task POST /v1/tasks Create a Task get_task GET /v1/tasks/{taskId} Get the details of a Task list_tasks GET /v1/tasks Get a list of tasks update_task PATCH /v1/tasks/{taskId} Update an existing task. create_task \u00b6 Task create_task(body=body) Create a Task Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) body = libica . openapi . libtes . CreateTaskRequest () # CreateTaskRequest | (optional) try : # Create a Task api_response = api_instance . create_task ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->create_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateTaskRequest [optional] Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_task \u00b6 TaskSummary get_task(task_id) Get the details of a Task Gets the details of a Task for a given task ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | try : # Get the details of a Task api_response = api_instance . get_task ( task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str Return type \u00b6 TaskSummary Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_tasks \u00b6 TaskSummaryPagedItems list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token) Get a list of tasks Gets a list of tasks accessible by the current tenant ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) names = 'names_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) acls = 'acls_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) sort = 'timeCreated asc' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) (default to 'timeCreated asc') page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of tasks api_response = api_instance . list_tasks ( names = names , acls = acls , page_size = page_size , sort = sort , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_tasks: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes names str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] acls str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] [default to 'timeCreated asc'] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional] Return type \u00b6 TaskSummaryPagedItems Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_task \u00b6 Task update_task(task_id, body=body) Update an existing task. Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . UpdateTaskRequest () # UpdateTaskRequest | Details of the task to be updated. (optional) try : # Update an existing task. api_response = api_instance . update_task ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->update_task: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes task_id str body UpdateTaskRequest Details of the task to be updated. [optional] Return type \u00b6 Task Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libtes.TasksApi"},{"location":"libtes/docs/TasksApi/#libicaopenapilibtestasksapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_task POST /v1/tasks Create a Task get_task GET /v1/tasks/{taskId} Get the details of a Task list_tasks GET /v1/tasks Get a list of tasks update_task PATCH /v1/tasks/{taskId} Update an existing task.","title":"libica.openapi.libtes.TasksApi"},{"location":"libtes/docs/TasksApi/#create_task","text":"Task create_task(body=body) Create a Task Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.","title":"create_task"},{"location":"libtes/docs/TasksApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) body = libica . openapi . libtes . CreateTaskRequest () # CreateTaskRequest | (optional) try : # Create a Task api_response = api_instance . create_task ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->create_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters","text":"Name Type Description Notes body CreateTaskRequest [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type","text":"Task","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#get_task","text":"TaskSummary get_task(task_id) Get the details of a Task Gets the details of a Task for a given task ID.","title":"get_task"},{"location":"libtes/docs/TasksApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | try : # Get the details of a Task api_response = api_instance . get_task ( task_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->get_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_1","text":"Name Type Description Notes task_id str","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_1","text":"TaskSummary","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_1","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#list_tasks","text":"TaskSummaryPagedItems list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token) Get a list of tasks Gets a list of tasks accessible by the current tenant ID.","title":"list_tasks"},{"location":"libtes/docs/TasksApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) names = 'names_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) acls = 'acls_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional) page_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10) sort = 'timeCreated asc' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) (optional) (default to 'timeCreated asc') page_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) (optional) try : # Get a list of tasks api_response = api_instance . list_tasks ( names = names , acls = acls , page_size = page_size , sort = sort , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->list_tasks: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_2","text":"Name Type Description Notes names str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] acls str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified. The sort can be specified as asc or desc. (Default: asc.) [optional] [default to 'timeCreated asc'] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken, nextPageToken, and previousPageToken (provided in the list response) [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_2","text":"TaskSummaryPagedItems","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_2","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/TasksApi/#update_task","text":"Task update_task(task_id, body=body) Update an existing task. Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique.","title":"update_task"},{"location":"libtes/docs/TasksApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libtes from libica.openapi.libtes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libtes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libtes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libtes . TasksApi ( api_client ) task_id = 'task_id_example' # str | body = libica . openapi . libtes . UpdateTaskRequest () # UpdateTaskRequest | Details of the task to be updated. (optional) try : # Update an existing task. api_response = api_instance . update_task ( task_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling TasksApi->update_task: %s \\n \" % e )","title":"Example"},{"location":"libtes/docs/TasksApi/#parameters_3","text":"Name Type Description Notes task_id str body UpdateTaskRequest Details of the task to be updated. [optional]","title":"Parameters"},{"location":"libtes/docs/TasksApi/#return-type_3","text":"Task","title":"Return type"},{"location":"libtes/docs/TasksApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libtes/docs/TasksApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libtes/docs/TasksApi/#http-response-details_3","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libtes/docs/UpdateTaskRequest/","text":"UpdateTaskRequest \u00b6 Properties \u00b6 Name Type Description Notes name str User-defined name of the task [optional] description str User-defined description of the task [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateTaskRequest"},{"location":"libtes/docs/UpdateTaskRequest/#updatetaskrequest","text":"","title":"UpdateTaskRequest"},{"location":"libtes/docs/UpdateTaskRequest/#properties","text":"Name Type Description Notes name str User-defined name of the task [optional] description str User-defined description of the task [optional] acl list[str] Access Control List [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libtes/docs/UpdateTaskVersionRequest/","text":"UpdateTaskVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes version str User-defined version of task version [optional] description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateTaskVersionRequest"},{"location":"libtes/docs/UpdateTaskVersionRequest/#updatetaskversionrequest","text":"","title":"UpdateTaskVersionRequest"},{"location":"libtes/docs/UpdateTaskVersionRequest/#properties","text":"Name Type Description Notes version str User-defined version of task version [optional] description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/","text":"libica.openapi.libwes \u00b6 No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libwes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:15.583343+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python 2.7 and 3.4+ Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.libwes, you can run the following: from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description WorkflowRunsApi abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run WorkflowRunsApi get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run WorkflowRunsApi list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events WorkflowRunsApi list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs WorkflowSignalsApi fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal WorkflowSignalsApi get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal WorkflowSignalsApi list_signals GET /v1/workflows/signals Get a list of workflow signals WorkflowSignalsApi succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal WorkflowVersionsApi create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version WorkflowVersionsApi get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version WorkflowVersionsApi launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version WorkflowVersionsApi list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions WorkflowVersionsApi list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions WorkflowVersionsApi update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version WorkflowsApi create_workflow POST /v1/workflows Create a workflow WorkflowsApi get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow WorkflowsApi list_workflows GET /v1/workflows Get a list of workflows WorkflowsApi update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow Documentation For Models \u00b6 AbortWorkflowRunRequest CreateWorkflowRequest CreateWorkflowVersionRequest ErrorResponse FailWorkflowSignalRequest LaunchWorkflowVersionRequest SucceedWorkflowSignalRequest UpdateWorkflowRequest UpdateWorkflowVersionRequest Workflow WorkflowArgument WorkflowCompact WorkflowConnection WorkflowLanguage WorkflowList WorkflowRun WorkflowRunCompact WorkflowRunHistoryEvent WorkflowRunHistoryEventList WorkflowRunList WorkflowSignal WorkflowSignalCompact WorkflowSignalList WorkflowVersion WorkflowVersionCompact WorkflowVersionList Documentation For Authorization \u00b6 Bearer \u00b6 Type : API key API key parameter name : Authorization Location : HTTP header Author \u00b6","title":"libwes"},{"location":"libwes/#libicaopenapilibwes","text":"No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator ) The libica.openapi.libwes package is automatically generated by the OpenAPI Generator project: API version: v1 Package version: 1.0.0 Build date: 2021-10-22T14:39:15.583343+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.libwes"},{"location":"libwes/#requirements","text":"Python 2.7 and 3.4+","title":"Requirements."},{"location":"libwes/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.15 six >= 1.10 certifi python-dateutil","title":"Installation &amp; Usage"},{"location":"libwes/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.libwes, you can run the following: from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e )","title":"Getting Started"},{"location":"libwes/#documentation-for-api-endpoints","text":"All URIs are relative to https://aps2.platform.illumina.com Class Method HTTP request Description WorkflowRunsApi abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run WorkflowRunsApi get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run WorkflowRunsApi list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events WorkflowRunsApi list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs WorkflowSignalsApi fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal WorkflowSignalsApi get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal WorkflowSignalsApi list_signals GET /v1/workflows/signals Get a list of workflow signals WorkflowSignalsApi succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal WorkflowVersionsApi create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version WorkflowVersionsApi get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version WorkflowVersionsApi launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version WorkflowVersionsApi list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions WorkflowVersionsApi list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions WorkflowVersionsApi update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version WorkflowsApi create_workflow POST /v1/workflows Create a workflow WorkflowsApi get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow WorkflowsApi list_workflows GET /v1/workflows Get a list of workflows WorkflowsApi update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow","title":"Documentation for API Endpoints"},{"location":"libwes/#documentation-for-models","text":"AbortWorkflowRunRequest CreateWorkflowRequest CreateWorkflowVersionRequest ErrorResponse FailWorkflowSignalRequest LaunchWorkflowVersionRequest SucceedWorkflowSignalRequest UpdateWorkflowRequest UpdateWorkflowVersionRequest Workflow WorkflowArgument WorkflowCompact WorkflowConnection WorkflowLanguage WorkflowList WorkflowRun WorkflowRunCompact WorkflowRunHistoryEvent WorkflowRunHistoryEventList WorkflowRunList WorkflowSignal WorkflowSignalCompact WorkflowSignalList WorkflowVersion WorkflowVersionCompact WorkflowVersionList","title":"Documentation For Models"},{"location":"libwes/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"libwes/#bearer","text":"Type : API key API key parameter name : Authorization Location : HTTP header","title":"Bearer"},{"location":"libwes/#author","text":"","title":"Author"},{"location":"libwes/docs/AbortWorkflowRunRequest/","text":"AbortWorkflowRunRequest \u00b6 Abort a workflow run Properties \u00b6 Name Type Description Notes error str cause str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AbortWorkflowRunRequest"},{"location":"libwes/docs/AbortWorkflowRunRequest/#abortworkflowrunrequest","text":"Abort a workflow run","title":"AbortWorkflowRunRequest"},{"location":"libwes/docs/AbortWorkflowRunRequest/#properties","text":"Name Type Description Notes error str cause str [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/CreateWorkflowRequest/","text":"CreateWorkflowRequest \u00b6 Create a workflow and optional version Properties \u00b6 Name Type Description Notes name str description str [optional] organization str [optional] workflow_version CreateWorkflowVersionRequest [optional] tool_class str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateWorkflowRequest"},{"location":"libwes/docs/CreateWorkflowRequest/#createworkflowrequest","text":"Create a workflow and optional version","title":"CreateWorkflowRequest"},{"location":"libwes/docs/CreateWorkflowRequest/#properties","text":"Name Type Description Notes name str description str [optional] organization str [optional] workflow_version CreateWorkflowVersionRequest [optional] tool_class str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/CreateWorkflowVersionRequest/","text":"CreateWorkflowVersionRequest \u00b6 Create a new workflow version under an existing workflow root Properties \u00b6 Name Type Description Notes version str description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str Published Status of the workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateWorkflowVersionRequest"},{"location":"libwes/docs/CreateWorkflowVersionRequest/#createworkflowversionrequest","text":"Create a new workflow version under an existing workflow root","title":"CreateWorkflowVersionRequest"},{"location":"libwes/docs/CreateWorkflowVersionRequest/#properties","text":"Name Type Description Notes version str description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str Published Status of the workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ErrorResponse/","text":"ErrorResponse \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ErrorResponse"},{"location":"libwes/docs/ErrorResponse/#errorresponse","text":"","title":"ErrorResponse"},{"location":"libwes/docs/ErrorResponse/#properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/FailWorkflowSignalRequest/","text":"FailWorkflowSignalRequest \u00b6 Fail workflow signal request Properties \u00b6 Name Type Description Notes error str Externally provided Error of a signalling action. cause str Externally provided Cause of a failed signalling action. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FailWorkflowSignalRequest"},{"location":"libwes/docs/FailWorkflowSignalRequest/#failworkflowsignalrequest","text":"Fail workflow signal request","title":"FailWorkflowSignalRequest"},{"location":"libwes/docs/FailWorkflowSignalRequest/#properties","text":"Name Type Description Notes error str Externally provided Error of a signalling action. cause str Externally provided Cause of a failed signalling action. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/","text":"GetWorkflowRunHistoryIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowRunHistoryIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/#getworkflowrunhistoryincludeflags","text":"","title":"GetWorkflowRunHistoryIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/","text":"GetWorkflowRunIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowRunIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/#getworkflowrunincludeflags","text":"","title":"GetWorkflowRunIncludeFlags"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/","text":"GetWorkflowSignalsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowSignalsIncludeFlags"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/#getworkflowsignalsincludeflags","text":"","title":"GetWorkflowSignalsIncludeFlags"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/","text":"GetWorkflowsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"GetWorkflowsIncludeFlags"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/#getworkflowsincludeflags","text":"","title":"GetWorkflowsIncludeFlags"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/","text":"LaunchWorkflowVersionRequest \u00b6 Properties \u00b6 Name Type Description Notes name str Name of the workflow run [optional] input object Input for the launched workflow run. Must resolve to a JSON object. [optional] engine_parameters object Runtime options for launching workflows (currently only used for Airflow and otherwise ignored). Must resolve to a JSON object. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LaunchWorkflowVersionRequest"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/#launchworkflowversionrequest","text":"","title":"LaunchWorkflowVersionRequest"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/#properties","text":"Name Type Description Notes name str Name of the workflow run [optional] input object Input for the launched workflow run. Must resolve to a JSON object. [optional] engine_parameters object Runtime options for launching workflows (currently only used for Airflow and otherwise ignored). Must resolve to a JSON object. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/","text":"ListAllWorkflowsVersionsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListAllWorkflowsVersionsIncludeFlags"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/#listallworkflowsversionsincludeflags","text":"","title":"ListAllWorkflowsVersionsIncludeFlags"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/","text":"ListWorkflowRunsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListWorkflowRunsIncludeFlags"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/#listworkflowrunsincludeflags","text":"","title":"ListWorkflowRunsIncludeFlags"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/","text":"ListWorkflowVersionsIncludeFlags \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ListWorkflowVersionsIncludeFlags"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/#listworkflowversionsincludeflags","text":"","title":"ListWorkflowVersionsIncludeFlags"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/","text":"SucceedWorkflowSignalRequest \u00b6 Properties \u00b6 Name Type Description Notes result object External result of a successful signal. Must resolve to a JSON value. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SucceedWorkflowSignalRequest"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/#succeedworkflowsignalrequest","text":"","title":"SucceedWorkflowSignalRequest"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/#properties","text":"Name Type Description Notes result object External result of a successful signal. Must resolve to a JSON value. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/ToolClass/","text":"ToolClass \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"ToolClass"},{"location":"libwes/docs/ToolClass/#toolclass","text":"","title":"ToolClass"},{"location":"libwes/docs/ToolClass/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/UpdateWorkflowRequest/","text":"UpdateWorkflowRequest \u00b6 Update an existing workflow Properties \u00b6 Name Type Description Notes name str [optional] description str [optional] organization str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateWorkflowRequest"},{"location":"libwes/docs/UpdateWorkflowRequest/#updateworkflowrequest","text":"Update an existing workflow","title":"UpdateWorkflowRequest"},{"location":"libwes/docs/UpdateWorkflowRequest/#properties","text":"Name Type Description Notes name str [optional] description str [optional] organization str [optional] acl list[str] [optional] categories list[str] [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/","text":"UpdateWorkflowVersionRequest \u00b6 Update a workflow version definition using patch semantics Properties \u00b6 Name Type Description Notes version str [optional] description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str New Status for workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateWorkflowVersionRequest"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/#updateworkflowversionrequest","text":"Update a workflow version definition using patch semantics","title":"UpdateWorkflowVersionRequest"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/#properties","text":"Name Type Description Notes version str [optional] description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str New Status for workflow version [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/Workflow/","text":"Workflow \u00b6 Details of a workflow Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Workflow"},{"location":"libwes/docs/Workflow/#workflow","text":"Details of a workflow","title":"Workflow"},{"location":"libwes/docs/Workflow/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowArgument/","text":"WorkflowArgument \u00b6 Argument definition Properties \u00b6 Name Type Description Notes name str Name of the argument key value str A simple string value for the argument. Cannot provide both Value and Json at the same time. [optional] json object A JSON value for the argument. Cannot provide both Value and Json at the same time. [optional] options str Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final Some combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowArgument"},{"location":"libwes/docs/WorkflowArgument/#workflowargument","text":"Argument definition","title":"WorkflowArgument"},{"location":"libwes/docs/WorkflowArgument/#properties","text":"Name Type Description Notes name str Name of the argument key value str A simple string value for the argument. Cannot provide both Value and Json at the same time. [optional] json object A JSON value for the argument. Cannot provide both Value and Json at the same time. [optional] options str Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final Some combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc. [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowCompact/","text":"WorkflowCompact \u00b6 Compact details of a workflow Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowCompact"},{"location":"libwes/docs/WorkflowCompact/#workflowcompact","text":"Compact details of a workflow","title":"WorkflowCompact"},{"location":"libwes/docs/WorkflowCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowConnection/","text":"WorkflowConnection \u00b6 Defines a connection that can be used in a workflow definition to perform actions Properties \u00b6 Name Type Description Notes name str type str Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2 [optional] host str For API based connections, the Host part of the API endpoint [optional] host_validation_regex str Regex that hosts associated with this connection must meet (when host override by each run is allowed) [optional] credentials str Credentials associated with the connection. Format depends on type of connection. [optional] options str Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride [optional] auto_disable_url str Relative URL (relative to Host) to call in order to disable the credentials [optional] auto_disable_http_method str Http method to use to disable the credentials. Must be POST, PUT or DELETE [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowConnection"},{"location":"libwes/docs/WorkflowConnection/#workflowconnection","text":"Defines a connection that can be used in a workflow definition to perform actions","title":"WorkflowConnection"},{"location":"libwes/docs/WorkflowConnection/#properties","text":"Name Type Description Notes name str type str Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2 [optional] host str For API based connections, the Host part of the API endpoint [optional] host_validation_regex str Regex that hosts associated with this connection must meet (when host override by each run is allowed) [optional] credentials str Credentials associated with the connection. Format depends on type of connection. [optional] options str Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride [optional] auto_disable_url str Relative URL (relative to Host) to call in order to disable the credentials [optional] auto_disable_http_method str Http method to use to disable the credentials. Must be POST, PUT or DELETE [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowLanguage/","text":"WorkflowLanguage \u00b6 Language details about a workflow version Properties \u00b6 Name Type Description Notes name str The name of the workflow language version str The version of the workflow language, if any [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowLanguage"},{"location":"libwes/docs/WorkflowLanguage/#workflowlanguage","text":"Language details about a workflow version","title":"WorkflowLanguage"},{"location":"libwes/docs/WorkflowLanguage/#properties","text":"Name Type Description Notes name str The name of the workflow language version str The version of the workflow language, if any [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowList/","text":"WorkflowList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowList"},{"location":"libwes/docs/WorkflowList/#workflowlist","text":"","title":"WorkflowList"},{"location":"libwes/docs/WorkflowList/#properties","text":"Name Type Description Notes items list[WorkflowCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRun/","text":"WorkflowRun \u00b6 Details of a workflow run Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] input object Input to workflow run, as JSON [optional] output object Output from workflow run, as JSON [optional] definition str Definition of the workflow version [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRun"},{"location":"libwes/docs/WorkflowRun/#workflowrun","text":"Details of a workflow run","title":"WorkflowRun"},{"location":"libwes/docs/WorkflowRun/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] input object Input to workflow run, as JSON [optional] output object Output from workflow run, as JSON [optional] definition str Definition of the workflow version [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunCompact/","text":"WorkflowRunCompact \u00b6 Compact details of a workflow run Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunCompact"},{"location":"libwes/docs/WorkflowRunCompact/#workflowruncompact","text":"Compact details of a workflow run","title":"WorkflowRunCompact"},{"location":"libwes/docs/WorkflowRunCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunHistoryEvent/","text":"WorkflowRunHistoryEvent \u00b6 Information about a specific event in the workflow run history Properties \u00b6 Name Type Description Notes name str Name of the event, such as the name of the step/task for state-level events and run name for run-level events [optional] event_id int Identifier for the history event, if any [optional] previous_event_id int Identifier for any previous history event (if available) [optional] event_type str Type of history event. The associated details entry will be populated based on the type of event. [optional] timestamp datetime Timestamp for the history event [optional] event_details object Details for history event [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunHistoryEvent"},{"location":"libwes/docs/WorkflowRunHistoryEvent/#workflowrunhistoryevent","text":"Information about a specific event in the workflow run history","title":"WorkflowRunHistoryEvent"},{"location":"libwes/docs/WorkflowRunHistoryEvent/#properties","text":"Name Type Description Notes name str Name of the event, such as the name of the step/task for state-level events and run name for run-level events [optional] event_id int Identifier for the history event, if any [optional] previous_event_id int Identifier for any previous history event (if available) [optional] event_type str Type of history event. The associated details entry will be populated based on the type of event. [optional] timestamp datetime Timestamp for the history event [optional] event_details object Details for history event [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunHistoryEventList/","text":"WorkflowRunHistoryEventList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowRunHistoryEvent] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunHistoryEventList"},{"location":"libwes/docs/WorkflowRunHistoryEventList/#workflowrunhistoryeventlist","text":"","title":"WorkflowRunHistoryEventList"},{"location":"libwes/docs/WorkflowRunHistoryEventList/#properties","text":"Name Type Description Notes items list[WorkflowRunHistoryEvent] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunList/","text":"WorkflowRunList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowRunCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunList"},{"location":"libwes/docs/WorkflowRunList/#workflowrunlist","text":"","title":"WorkflowRunList"},{"location":"libwes/docs/WorkflowRunList/#properties","text":"Name Type Description Notes items list[WorkflowRunCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunStatus/","text":"WorkflowRunStatus \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowRunStatus"},{"location":"libwes/docs/WorkflowRunStatus/#workflowrunstatus","text":"","title":"WorkflowRunStatus"},{"location":"libwes/docs/WorkflowRunStatus/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowRunsApi/","text":"libica.openapi.libwes.WorkflowRunsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs abort_workflow_run \u00b6 WorkflowRun abort_workflow_run(run_id, include=include, body=body) Abort a workflow run Aborts the workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] body AbortWorkflowRunRequest [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the aborted workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow_run \u00b6 WorkflowRun get_workflow_run(run_id, include=include) Get the details of a workflow run Gets the details of a workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) try : # Get the details of a workflow run api_response = api_instance . get_workflow_run ( run_id , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->get_workflow_run: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_run_history \u00b6 WorkflowRunHistoryEventList list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token) Get a list of workflow run history events Gets a list of history events for a workflow run with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run sort = 'eventId asc' # str | (optional) (default to 'eventId asc') include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) try : # Get a list of workflow run history events api_response = api_instance . list_workflow_run_history ( run_id , sort = sort , include = include , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_run_history: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes run_id str ID of the workflow run sort str [optional] [default to 'eventId asc'] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] Return type \u00b6 WorkflowRunHistoryEventList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow run history events. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_runs \u00b6 WorkflowRunList list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow runs Gets a list of workflow runs. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) status = [ 'status_example' ] # list[str] | (optional) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow runs api_response = api_instance . list_workflow_runs ( status = status , tenant_id = tenant_id , name = name , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_runs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes status list[str] [optional] tenant_id str ID of the tenant [optional] name str [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowRunList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow runs that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowRunsApi"},{"location":"libwes/docs/WorkflowRunsApi/#libicaopenapilibwesworkflowrunsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs","title":"libica.openapi.libwes.WorkflowRunsApi"},{"location":"libwes/docs/WorkflowRunsApi/#abort_workflow_run","text":"WorkflowRun abort_workflow_run(run_id, include=include, body=body) Abort a workflow run Aborts the workflow run with a given ID.","title":"abort_workflow_run"},{"location":"libwes/docs/WorkflowRunsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . AbortWorkflowRunRequest () # AbortWorkflowRunRequest | (optional) try : # Abort a workflow run api_response = api_instance . abort_workflow_run ( run_id , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->abort_workflow_run: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] body AbortWorkflowRunRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details","text":"Status code Description Response headers 200 Details of the aborted workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#get_workflow_run","text":"WorkflowRun get_workflow_run(run_id, include=include) Get the details of a workflow run Gets the details of a workflow run with a given ID.","title":"get_workflow_run"},{"location":"libwes/docs/WorkflowRunsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) try : # Get the details of a workflow run api_response = api_instance . get_workflow_run ( run_id , include = include ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->get_workflow_run: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_1","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_1","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_run_history","text":"WorkflowRunHistoryEventList list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token) Get a list of workflow run history events Gets a list of history events for a workflow run with a given ID.","title":"list_workflow_run_history"},{"location":"libwes/docs/WorkflowRunsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) run_id = 'run_id_example' # str | ID of the workflow run sort = 'eventId asc' # str | (optional) (default to 'eventId asc') include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) try : # Get a list of workflow run history events api_response = api_instance . list_workflow_run_history ( run_id , sort = sort , include = include , page_size = page_size , page_token = page_token ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_run_history: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_2","text":"Name Type Description Notes run_id str ID of the workflow run sort str [optional] [default to 'eventId asc'] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_2","text":"WorkflowRunHistoryEventList","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflow run history events. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_runs","text":"WorkflowRunList list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow runs Gets a list of workflow runs.","title":"list_workflow_runs"},{"location":"libwes/docs/WorkflowRunsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowRunsApi ( api_client ) status = [ 'status_example' ] # list[str] | (optional) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow runs api_response = api_instance . list_workflow_runs ( status = status , tenant_id = tenant_id , name = name , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowRunsApi->list_workflow_runs: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_3","text":"Name Type Description Notes status list[str] [optional] tenant_id str ID of the tenant [optional] name str [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_3","text":"WorkflowRunList","title":"Return type"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_3","text":"Status code Description Response headers 200 Paged list of workflow runs that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignal/","text":"WorkflowSignal \u00b6 Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignal"},{"location":"libwes/docs/WorkflowSignal/#workflowsignal","text":"","title":"WorkflowSignal"},{"location":"libwes/docs/WorkflowSignal/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalCompact/","text":"WorkflowSignalCompact \u00b6 Compact details of a signal Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignalCompact"},{"location":"libwes/docs/WorkflowSignalCompact/#workflowsignalcompact","text":"Compact details of a signal","title":"WorkflowSignalCompact"},{"location":"libwes/docs/WorkflowSignalCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalList/","text":"WorkflowSignalList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowSignalCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowSignalList"},{"location":"libwes/docs/WorkflowSignalList/#workflowsignallist","text":"","title":"WorkflowSignalList"},{"location":"libwes/docs/WorkflowSignalList/#properties","text":"Name Type Description Notes items list[WorkflowSignalCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowSignalsApi/","text":"libica.openapi.libwes.WorkflowSignalsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal list_signals GET /v1/workflows/signals Get a list of workflow signals succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal fail_signal \u00b6 WorkflowSignal fail_signal(signal_id, body=body) Fail a workflow signal Responds to a pending workflow signal with a failure result. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . FailWorkflowSignalRequest () # FailWorkflowSignalRequest | (optional) try : # Fail a workflow signal api_response = api_instance . fail_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->fail_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal body FailWorkflowSignalRequest [optional] Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns the failed signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_signal \u00b6 WorkflowSignal get_signal(signal_id) Get the details of a workflow signal Gets the details of a workflow signal with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal try : # Get the details of a workflow signal api_response = api_instance . get_signal ( signal_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->get_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_signals \u00b6 WorkflowSignalList list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow signals Gets a list of workflow signals. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow signals api_response = api_instance . list_signals ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->list_signals: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowSignalList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow signals that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] succeed_signal \u00b6 WorkflowSignal succeed_signal(signal_id, body=body) Succeed a workflow signal Responds to a pending workflow signal with a successful result. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . SucceedWorkflowSignalRequest () # SucceedWorkflowSignalRequest | (optional) try : # Succeed a workflow signal api_response = api_instance . succeed_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->succeed_signal: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes signal_id str ID of the workflow signal body SucceedWorkflowSignalRequest [optional] Return type \u00b6 WorkflowSignal Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns the succeeded signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowSignalsApi"},{"location":"libwes/docs/WorkflowSignalsApi/#libicaopenapilibwesworkflowsignalsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal list_signals GET /v1/workflows/signals Get a list of workflow signals succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal","title":"libica.openapi.libwes.WorkflowSignalsApi"},{"location":"libwes/docs/WorkflowSignalsApi/#fail_signal","text":"WorkflowSignal fail_signal(signal_id, body=body) Fail a workflow signal Responds to a pending workflow signal with a failure result.","title":"fail_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . FailWorkflowSignalRequest () # FailWorkflowSignalRequest | (optional) try : # Fail a workflow signal api_response = api_instance . fail_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->fail_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters","text":"Name Type Description Notes signal_id str ID of the workflow signal body FailWorkflowSignalRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details","text":"Status code Description Response headers 200 Returns the failed signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#get_signal","text":"WorkflowSignal get_signal(signal_id) Get the details of a workflow signal Gets the details of a workflow signal with a given ID.","title":"get_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal try : # Get the details of a workflow signal api_response = api_instance . get_signal ( signal_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->get_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_1","text":"Name Type Description Notes signal_id str ID of the workflow signal","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_1","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#list_signals","text":"WorkflowSignalList list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow signals Gets a list of workflow signals.","title":"list_signals"},{"location":"libwes/docs/WorkflowSignalsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow signals api_response = api_instance . list_signals ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->list_signals: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_2","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_2","text":"WorkflowSignalList","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflow signals that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowSignalsApi/#succeed_signal","text":"WorkflowSignal succeed_signal(signal_id, body=body) Succeed a workflow signal Responds to a pending workflow signal with a successful result.","title":"succeed_signal"},{"location":"libwes/docs/WorkflowSignalsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowSignalsApi ( api_client ) signal_id = 'signal_id_example' # str | ID of the workflow signal body = libica . openapi . libwes . SucceedWorkflowSignalRequest () # SucceedWorkflowSignalRequest | (optional) try : # Succeed a workflow signal api_response = api_instance . succeed_signal ( signal_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowSignalsApi->succeed_signal: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_3","text":"Name Type Description Notes signal_id str ID of the workflow signal body SucceedWorkflowSignalRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_3","text":"WorkflowSignal","title":"Return type"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_3","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_3","text":"Status code Description Response headers 200 Returns the succeeded signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersion/","text":"WorkflowVersion \u00b6 Details of a Workflow version definition Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] definition str Definition of the workflow version [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersion"},{"location":"libwes/docs/WorkflowVersion/#workflowversion","text":"Details of a Workflow version definition","title":"WorkflowVersion"},{"location":"libwes/docs/WorkflowVersion/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] definition str Definition of the workflow version [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionCompact/","text":"WorkflowVersionCompact \u00b6 Compact details of a Workflow version definition Properties \u00b6 Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersionCompact"},{"location":"libwes/docs/WorkflowVersionCompact/#workflowversioncompact","text":"Compact details of a Workflow version definition","title":"WorkflowVersionCompact"},{"location":"libwes/docs/WorkflowVersionCompact/#properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionList/","text":"WorkflowVersionList \u00b6 Properties \u00b6 Name Type Description Notes items list[WorkflowVersionCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkflowVersionList"},{"location":"libwes/docs/WorkflowVersionList/#workflowversionlist","text":"","title":"WorkflowVersionList"},{"location":"libwes/docs/WorkflowVersionList/#properties","text":"Name Type Description Notes items list[WorkflowVersionCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"libwes/docs/WorkflowVersionsApi/","text":"libica.openapi.libwes.WorkflowVersionsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version create_workflow_version \u00b6 WorkflowVersion create_workflow_version(workflow_id, body=body) Create a new workflow version Creates a new workflow version with a given workflow ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . CreateWorkflowVersionRequest () # CreateWorkflowVersionRequest | (optional) try : # Create a new workflow version api_response = api_instance . create_workflow_version ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->create_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow body CreateWorkflowVersionRequest [optional] Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the created workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow_version \u00b6 WorkflowVersion get_workflow_version(workflow_id, version_name) Get the details of a workflow version Gets the details for a workflow version with a given workflow ID and version name. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version try : # Get the details of a workflow version api_response = api_instance . get_workflow_version ( workflow_id , version_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->get_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] launch_workflow_version \u00b6 WorkflowRun launch_workflow_version(workflow_id, version_name, include=include, body=body) Launch a workflow version Launches a workflow version with a given workflow ID and version name. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . LaunchWorkflowVersionRequest () # LaunchWorkflowVersionRequest | (optional) try : # Launch a workflow version api_response = api_instance . launch_workflow_version ( workflow_id , version_name , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->launch_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version include list[str] Comma-separated list of properties to include in the response [optional] body LaunchWorkflowVersionRequest [optional] Return type \u00b6 WorkflowRun Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_all_workflow_versions \u00b6 WorkflowVersionList list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of all workflow versions Gets a list of workflow versions across all workflows. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of all workflow versions api_response = api_instance . list_all_workflow_versions ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_all_workflow_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowVersionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow versions across all workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflow_versions \u00b6 WorkflowVersionList list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow versions Gets a list of workflow versions with a given workflow ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow versions api_response = api_instance . list_workflow_versions ( workflow_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_workflow_versions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowVersionList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflow versions that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_workflow_version \u00b6 WorkflowVersion update_workflow_version(workflow_id, version_name, body=body) Update an existing workflow version Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version body = libica . openapi . libwes . UpdateWorkflowVersionRequest () # UpdateWorkflowVersionRequest | (optional) try : # Update an existing workflow version api_response = api_instance . update_workflow_version ( workflow_id , version_name , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->update_workflow_version: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version body UpdateWorkflowVersionRequest [optional] Return type \u00b6 WorkflowVersion Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowVersionsApi"},{"location":"libwes/docs/WorkflowVersionsApi/#libicaopenapilibwesworkflowversionsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version","title":"libica.openapi.libwes.WorkflowVersionsApi"},{"location":"libwes/docs/WorkflowVersionsApi/#create_workflow_version","text":"WorkflowVersion create_workflow_version(workflow_id, body=body) Create a new workflow version Creates a new workflow version with a given workflow ID.","title":"create_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . CreateWorkflowVersionRequest () # CreateWorkflowVersionRequest | (optional) try : # Create a new workflow version api_response = api_instance . create_workflow_version ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->create_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters","text":"Name Type Description Notes workflow_id str ID of the workflow body CreateWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details","text":"Status code Description Response headers 201 Details of the created workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#get_workflow_version","text":"WorkflowVersion get_workflow_version(workflow_id, version_name) Get the details of a workflow version Gets the details for a workflow version with a given workflow ID and version name.","title":"get_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version try : # Get the details of a workflow version api_response = api_instance . get_workflow_version ( workflow_id , version_name ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->get_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_1","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_1","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#launch_workflow_version","text":"WorkflowRun launch_workflow_version(workflow_id, version_name, include=include, body=body) Launch a workflow version Launches a workflow version with a given workflow ID and version name.","title":"launch_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) body = libica . openapi . libwes . LaunchWorkflowVersionRequest () # LaunchWorkflowVersionRequest | (optional) try : # Launch a workflow version api_response = api_instance . launch_workflow_version ( workflow_id , version_name , include = include , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->launch_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_2","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version include list[str] Comma-separated list of properties to include in the response [optional] body LaunchWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_2","text":"WorkflowRun","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_2","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_2","text":"Status code Description Response headers 201 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#list_all_workflow_versions","text":"WorkflowVersionList list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of all workflow versions Gets a list of workflow versions across all workflows.","title":"list_all_workflow_versions"},{"location":"libwes/docs/WorkflowVersionsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of all workflow versions api_response = api_instance . list_all_workflow_versions ( tenant_id = tenant_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_all_workflow_versions: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_3","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_3","text":"WorkflowVersionList","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_3","text":"Status code Description Response headers 200 Paged list of workflow versions across all workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#list_workflow_versions","text":"WorkflowVersionList list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflow versions Gets a list of workflow versions with a given workflow ID.","title":"list_workflow_versions"},{"location":"libwes/docs/WorkflowVersionsApi/#example_4","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflow versions api_response = api_instance . list_workflow_versions ( workflow_id , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->list_workflow_versions: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_4","text":"Name Type Description Notes workflow_id str ID of the workflow include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_4","text":"WorkflowVersionList","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_4","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_4","text":"Status code Description Response headers 200 Paged list of workflow versions that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowVersionsApi/#update_workflow_version","text":"WorkflowVersion update_workflow_version(workflow_id, version_name, body=body) Update an existing workflow version Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call.","title":"update_workflow_version"},{"location":"libwes/docs/WorkflowVersionsApi/#example_5","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowVersionsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow version_name = 'version_name_example' # str | Name of the workflow version body = libica . openapi . libwes . UpdateWorkflowVersionRequest () # UpdateWorkflowVersionRequest | (optional) try : # Update an existing workflow version api_response = api_instance . update_workflow_version ( workflow_id , version_name , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowVersionsApi->update_workflow_version: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_5","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version body UpdateWorkflowVersionRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_5","text":"WorkflowVersion","title":"Return type"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_5","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_5","text":"Content-Type : application/json-patch+json, application/json, text/json, application/*+json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_5","text":"Status code Description Response headers 200 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/","text":"libica.openapi.libwes.WorkflowsApi \u00b6 All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow POST /v1/workflows Create a workflow get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow list_workflows GET /v1/workflows Get a list of workflows update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow create_workflow \u00b6 Workflow create_workflow(body=body) Create a workflow Creates a new workflow and version (if provided). Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) body = libica . openapi . libwes . CreateWorkflowRequest () # CreateWorkflowRequest | (optional) try : # Create a workflow api_response = api_instance . create_workflow ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->create_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes body CreateWorkflowRequest [optional] Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 201 Details of the newly created workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workflow \u00b6 Workflow get_workflow(workflow_id) Get the details of a workflow Gets the details of a workflow with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow try : # Get the details of a workflow api_response = api_instance . get_workflow ( workflow_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->get_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Details of the workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] list_workflows \u00b6 WorkflowList list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflows Gets a list of workflows. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) categories = [ 'categories_example' ] # list[str] | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflows api_response = api_instance . list_workflows ( tenant_id = tenant_id , name = name , categories = categories , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->list_workflows: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant_id str ID of the tenant [optional] name str [optional] categories list[str] [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). Return type \u00b6 WorkflowList Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Paged list of workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_workflow \u00b6 Workflow update_workflow(workflow_id, body=body) Update an existing workflow Updates the workflow with a given ID. Example \u00b6 Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . UpdateWorkflowRequest () # UpdateWorkflowRequest | (optional) try : # Update an existing workflow api_response = api_instance . update_workflow ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->update_workflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workflow_id str ID of the workflow body UpdateWorkflowRequest [optional] Return type \u00b6 Workflow Authorization \u00b6 Bearer HTTP request headers \u00b6 Content-Type : application/json Accept : application/json HTTP response details \u00b6 Status code Description Response headers 200 Returns updated workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.libwes.WorkflowsApi"},{"location":"libwes/docs/WorkflowsApi/#libicaopenapilibwesworkflowsapi","text":"All URIs are relative to https://aps2.platform.illumina.com Method HTTP request Description create_workflow POST /v1/workflows Create a workflow get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow list_workflows GET /v1/workflows Get a list of workflows update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow","title":"libica.openapi.libwes.WorkflowsApi"},{"location":"libwes/docs/WorkflowsApi/#create_workflow","text":"Workflow create_workflow(body=body) Create a workflow Creates a new workflow and version (if provided).","title":"create_workflow"},{"location":"libwes/docs/WorkflowsApi/#example","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) body = libica . openapi . libwes . CreateWorkflowRequest () # CreateWorkflowRequest | (optional) try : # Create a workflow api_response = api_instance . create_workflow ( body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->create_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters","text":"Name Type Description Notes body CreateWorkflowRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details","text":"Status code Description Response headers 201 Details of the newly created workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#get_workflow","text":"Workflow get_workflow(workflow_id) Get the details of a workflow Gets the details of a workflow with a given ID.","title":"get_workflow"},{"location":"libwes/docs/WorkflowsApi/#example_1","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow try : # Get the details of a workflow api_response = api_instance . get_workflow ( workflow_id ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->get_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_1","text":"Name Type Description Notes workflow_id str ID of the workflow","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_1","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_1","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_1","text":"Status code Description Response headers 200 Details of the workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#list_workflows","text":"WorkflowList list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort) Get a list of workflows Gets a list of workflows.","title":"list_workflows"},{"location":"libwes/docs/WorkflowsApi/#example_2","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) tenant_id = 'tenant_id_example' # str | ID of the tenant (optional) name = 'name_example' # str | (optional) categories = [ 'categories_example' ] # list[str] | (optional) include = [ 'include_example' ] # list[str] | Comma-separated list of properties to include in the response (optional) page_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10) page_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional) sort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc') try : # Get a list of workflows api_response = api_instance . list_workflows ( tenant_id = tenant_id , name = name , categories = categories , include = include , page_size = page_size , page_token = page_token , sort = sort ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->list_workflows: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_2","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] name str [optional] categories list[str] [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\" {fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending).","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_2","text":"WorkflowList","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_2","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_2","text":"Status code Description Response headers 200 Paged list of workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"libwes/docs/WorkflowsApi/#update_workflow","text":"Workflow update_workflow(workflow_id, body=body) Update an existing workflow Updates the workflow with a given ID.","title":"update_workflow"},{"location":"libwes/docs/WorkflowsApi/#example_3","text":"Api Key Authentication (Bearer): from __future__ import print_function import time import libica.openapi.libwes from libica.openapi.libwes.rest import ApiException from pprint import pprint # Defining the host is optional and defaults to https://aps2.platform.illumina.com # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: Bearer configuration = libica . openapi . libwes . Configuration ( host = \"https://aps2.platform.illumina.com\" , api_key = { 'Authorization' : 'YOUR_API_KEY' } ) # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['Authorization'] = 'Bearer' # Enter a context with an instance of the API client with libica . openapi . libwes . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = libica . openapi . libwes . WorkflowsApi ( api_client ) workflow_id = 'workflow_id_example' # str | ID of the workflow body = libica . openapi . libwes . UpdateWorkflowRequest () # UpdateWorkflowRequest | (optional) try : # Update an existing workflow api_response = api_instance . update_workflow ( workflow_id , body = body ) pprint ( api_response ) except ApiException as e : print ( \"Exception when calling WorkflowsApi->update_workflow: %s \\n \" % e )","title":"Example"},{"location":"libwes/docs/WorkflowsApi/#parameters_3","text":"Name Type Description Notes workflow_id str ID of the workflow body UpdateWorkflowRequest [optional]","title":"Parameters"},{"location":"libwes/docs/WorkflowsApi/#return-type_3","text":"Workflow","title":"Return type"},{"location":"libwes/docs/WorkflowsApi/#authorization_3","text":"Bearer","title":"Authorization"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_3","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_3","text":"Status code Description Response headers 200 Returns updated workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/","text":"libica.openapi.v2 \u00b6 This API can be used to interact with Illumina Connected Analytics. Authentication to the API can be done in multiple ways: For the entire API, except for the POST /tokens endpoint: API-key + JWT Only for the POST /tokens endpoint: API-key + Basic Authentication API-key API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls. JWT To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication. A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint. Basic Authentication Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \\\"Basic base64encoded(emailaddress:password)\\\" in the \\\"Authorization\\\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \\\"tenant\\\" request parameter to indicate what tenant you would like to request a JWT for. The libica.openapi.v2 package is automatically generated by the OpenAPI Generator project: API version: 3 Package version: 1.0.0 Build date: 2022-02-23T17:26:32.619792+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen Requirements. \u00b6 Python >=3.6 Installation & Usage \u00b6 This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.25.3 python-dateutil Getting Started \u00b6 In your own code, to use this library to connect and interact with libica.openapi.v2, you can run the following: import time import libica.openapi.v2 from pprint import pprint from libica.openapi.v2.api import analysis_storage_api from libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList from libica.openapi.v2.model.problem import Problem # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = analysis_storage_api . AnalysisStorageApi ( api_client ) try : # Retrieve the list of analysis storage options. api_response = api_instance . get_analysis_storage_options () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling AnalysisStorageApi->get_analysis_storage_options: %s \\n \" % e ) Documentation for API Endpoints \u00b6 All URIs are relative to /ica/rest Class Method HTTP request Description AnalysisStorageApi get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. BundleApi create_bundle POST /api/bundles Create a new bundle BundleApi get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. BundleApi get_bundles GET /api/bundles Retrieve a list of bundles. BundleApi release_bundle POST /api/bundles/{bundleId}:release release a bundle BundleDataApi get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. BundleDataApi link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. BundleDataApi unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. BundlePipelineApi get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. BundlePipelineApi link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. BundlePipelineApi unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. BundleSampleApi get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. BundleSampleApi link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. BundleSampleApi unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. BundleToolApi get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. BundleToolApi get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. BundleToolApi link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle BundleToolApi unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. ConnectorApi cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. ConnectorApi create_connector POST /api/connectors Create a connector. ConnectorApi create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. ConnectorApi create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. ConnectorApi delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. ConnectorApi delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. ConnectorApi disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. ConnectorApi enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. ConnectorApi get_connector GET /api/connectors/{connectorId} Retrieve a connector. ConnectorApi get_connectors GET /api/connectors Retrieve a list of connectors. ConnectorApi get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. ConnectorApi get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. ConnectorApi get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. ConnectorApi get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. ConnectorApi update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. ConnectorApi update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. DataFormatApi get_data_formats GET /api/dataFormats Retrieve a list of data formats. EntitlementDetailApi find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. EntitlementDetailApi find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. EntitlementDetailApi find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. EntitlementDetailApi find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. EventCodeApi get_event_codes GET /api/eventCodes Retrieve event codes EventLogApi get_event_logs GET /api/eventLog Retrieve a list of event logs. MetadataModelApi get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. MetadataModelApi get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. NotificationChannelApi create_notification_channel POST /api/notificationChannels Create a notification channel NotificationChannelApi delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel NotificationChannelApi get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel NotificationChannelApi get_notification_channels GET /api/notificationChannels Retrieve notification channels NotificationChannelApi update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel PipelineApi get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. PipelineApi get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. PipelineApi get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. PipelineApi get_pipelines GET /api/pipelines Retrieve a list of pipelines. ProjectApi create_project POST /api/projects Create a new project. ProjectApi get_project GET /api/projects/{projectId} Retrieve a project. ProjectApi get_projects GET /api/projects Retrieve a list of projects. ProjectApi update_project PUT /api/projects/{projectId} Update a project. ProjectAnalysisApi abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. ProjectAnalysisApi create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. ProjectAnalysisApi create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. ProjectAnalysisApi get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of project analyses. ProjectAnalysisApi get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. ProjectAnalysisApi get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. ProjectAnalysisApi get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. ProjectAnalysisApi get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. ProjectAnalysisApi get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. ProjectAnalysisApi h_get_execution_output_object GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. ProjectAnalysisApi update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. ProjectBaseApi create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. ProjectBaseJobApi get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. ProjectBaseJobApi get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs ProjectBaseTableApi get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. ProjectBaseTableApi load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. ProjectCustomEventsApi create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. ProjectCustomNotificationSubscriptionsApi create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription ProjectCustomNotificationSubscriptionsApi delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions ProjectCustomNotificationSubscriptionsApi update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription ProjectDataApi archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. ProjectDataApi complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. ProjectDataApi create_data_in_project POST /api/projects/{projectId}/data Create data in this project. ProjectDataApi create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. ProjectDataApi create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. ProjectDataApi create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. ProjectDataApi create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. ProjectDataApi create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. ProjectDataApi delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. ProjectDataApi get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. ProjectDataApi get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. ProjectDataApi get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. ProjectDataApi get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. ProjectDataApi get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. ProjectDataApi get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. ProjectDataApi get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. ProjectDataApi link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. ProjectDataApi schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. ProjectDataApi unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. ProjectDataApi unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. ProjectDataApi update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. ProjectDataTransferApi abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. ProjectDataTransferApi get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. ProjectDataTransferApi get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. ProjectNotificationSubscriptionsApi create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription ProjectNotificationSubscriptionsApi delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions ProjectNotificationSubscriptionsApi update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription ProjectPermissionApi create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. ProjectPermissionApi get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. ProjectPermissionApi get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. ProjectPermissionApi update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. ProjectPipelineApi create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. ProjectPipelineApi create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. ProjectPipelineApi get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. ProjectPipelineApi link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. ProjectPipelineApi release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. ProjectPipelineApi unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. ProjectSampleApi add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. ProjectSampleApi complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. ProjectSampleApi create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project ProjectSampleApi deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. ProjectSampleApi delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. ProjectSampleApi delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. ProjectSampleApi get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. ProjectSampleApi get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. ProjectSampleApi get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. ProjectSampleApi get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. ProjectSampleApi get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. ProjectSampleApi get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. ProjectSampleApi get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. ProjectSampleApi link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. ProjectSampleApi link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. ProjectSampleApi mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. ProjectSampleApi unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. ProjectSampleApi unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. ProjectSampleApi update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. ProjectSampleApi update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. RegionApi get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. RegionApi get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. SampleApi get_samples GET /api/samples Retrieve a list of samples. StorageBundleApi get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. StorageConfigurationApi create_storage_configuration POST /api/storageConfigurations Create a new storage configuration StorageConfigurationApi get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. StorageConfigurationApi get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. StorageConfigurationApi get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. StorageConfigurationApi share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share a storage configuration. StorageCredentialsApi create_storage_credential POST /api/storageCredentials Create a new storage credential StorageCredentialsApi get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. StorageCredentialsApi get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. StorageCredentialsApi share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share a storage credential. StorageCredentialsApi update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. TokenApi create_jwt_token POST /api/tokens Generate a JWT using an API-key or Basic Authentication. TokenApi refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. UserApi approve_user POST /api/users/{userId}:approve Approve a user. UserApi assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. UserApi get_user GET /api/users/{userId} Retrieve a user. UserApi get_users GET /api/users Retrieve a list of users. UserApi revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. UserApi update_user PUT /api/users/{userId} Update a user. WorkgroupApi get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. WorkgroupApi get_workgroups GET /api/workgroups Retrieve a list of workgroups. Documentation For Models \u00b6 AWSDetails ActivationCodeDetail ActivationCodeDetailList ActivationCodeDetailUsage Analysis AnalysisData AnalysisDataInput AnalysisInput AnalysisInputList AnalysisOutput AnalysisOutputList AnalysisPagedList AnalysisParameter AnalysisRawOutput AnalysisReferenceDataParameter AnalysisStep AnalysisStepList AnalysisStorage AnalysisStorageList AnalysisTag AwsCredentials AwsTempCredentials BaseConnection BaseJob BaseJobList Bundle BundleData BundleDataPagedList BundleList BundlePagedList BundlePipeline BundlePipelineList BundleSample BundleSamplePagedList BundleTool BundleToolsList CWLToolDefinition CompleteFolderUploadSession Connector ConnectorList Country CreateBundle CreateConnector CreateCustomEvent CreateCustomNotificationSubscription CreateCwlAnalysis CreateData CreateDownloadRule CreateNextflowAnalysis CreateNotificationChannel CreateNotificationSubscription CreateProject CreateProjectPermission CreateSample CreateStorageConfiguration CreateStorageCredential CreateTemporaryCredentials CreateUploadRule CustomNotificationSubscription CustomNotificationSubscriptionList CwlAnalysisInput CwlAnalysisJsonInput CwlAnalysisStructuredInput CwlToolDefinitionList Data DataDetails DataFormat DataFormatPagedList DataList DataPagedList DataTag DataTransfer DataTransfers Download DownloadRule DownloadRuleList EventCode EventCodeList EventLog EventLogList ExecutionConfiguration ExecutionConfigurationList Field FieldId FieldList FindProjectSamples FindSampleBooleanCondition FindSampleCondition FindSampleDateCondition FindSampleNumberCondition FolderUploadSession InlineView InputParameter InputParameterList InputPart InputPartMediaType Link Links LoadDataInBaseRequest MetadataField MetadataModel MetadataModelList Model MultipartFormDataInput NextflowAnalysisInput NotificationChannel NotificationChannelList NotificationSubscription NotificationSubscriptionList Pipeline PipelineBundle PipelineList PipelineTag Problem Project ProjectBaseTable ProjectBaseTableList ProjectData ProjectDataPagedList ProjectList ProjectPagedList ProjectPermission ProjectPermissionList ProjectPipeline ProjectPipelineList ProjectSample ProjectSamplePagedList ProjectTag RcloneTempCredentials ReferenceData ReferenceDataList ReferenceSet ReferenceSetList Region RegionList Sample SampleHistory SampleHistoryList SamplePagedList SampleTag ScheduleDownload SearchMatchingActivationCodesForCwlAnalysis SearchMatchingActivationCodesForNextflowAnalysis Species StorageBundle StorageBundleList StorageConfiguration StorageConfigurationDetails StorageConfigurationWithDetails StorageConfigurationWithDetailsList StorageCredential StorageCredentialList TempCredentials Token Type TypeList UpdateMetadata UpdateMetadataFieldGroup UpdateSingleMetadataField UpdateStorageCredentialSecrets Upload UploadRule UploadRuleList User UserList Workgroup WorkgroupList Documentation For Authorization \u00b6 ApiKeyAuth \u00b6 Type : API key API key parameter name : X-API-Key Location : HTTP header BasicAuth \u00b6 Type : HTTP basic authentication JwtAuth \u00b6 Type : Bearer authentication (JWT) Author \u00b6 Notes for Large OpenAPI documents \u00b6 If the OpenAPI document is large, imports in libica.openapi.v2.apis and libica.openapi.v2.models may fail with a RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions: Solution 1: Use specific imports for apis and models like: - from libica.openapi.v2.api.default_api import DefaultApi - from libica.openapi.v2.model.pet import Pet Solution 2: Before importing the package, adjust the maximum recursion limit as shown below: import sys sys . setrecursionlimit ( 1500 ) import libica.openapi.v2 from libica.openapi.v2.apis import * from libica.openapi.v2.models import *","title":"v2"},{"location":"v2/#libicaopenapiv2","text":"This API can be used to interact with Illumina Connected Analytics. Authentication to the API can be done in multiple ways: For the entire API, except for the POST /tokens endpoint: API-key + JWT Only for the POST /tokens endpoint: API-key + Basic Authentication API-key API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls. JWT To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication. A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint. Basic Authentication Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \\\"Basic base64encoded(emailaddress:password)\\\" in the \\\"Authorization\\\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \\\"tenant\\\" request parameter to indicate what tenant you would like to request a JWT for. The libica.openapi.v2 package is automatically generated by the OpenAPI Generator project: API version: 3 Package version: 1.0.0 Build date: 2022-02-23T17:26:32.619792+11:00[Australia/Melbourne] Build package: org.openapitools.codegen.languages.PythonClientCodegen","title":"libica.openapi.v2"},{"location":"v2/#requirements","text":"Python >=3.6","title":"Requirements."},{"location":"v2/#installation-usage","text":"This python library package is generated without supporting files like setup.py or requirements files To be able to use it, you will need these dependencies in your own package that uses this library: urllib3 >= 1.25.3 python-dateutil","title":"Installation &amp; Usage"},{"location":"v2/#getting-started","text":"In your own code, to use this library to connect and interact with libica.openapi.v2, you can run the following: import time import libica.openapi.v2 from pprint import pprint from libica.openapi.v2.api import analysis_storage_api from libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList from libica.openapi.v2.model.problem import Problem # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = analysis_storage_api . AnalysisStorageApi ( api_client ) try : # Retrieve the list of analysis storage options. api_response = api_instance . get_analysis_storage_options () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling AnalysisStorageApi->get_analysis_storage_options: %s \\n \" % e )","title":"Getting Started"},{"location":"v2/#documentation-for-api-endpoints","text":"All URIs are relative to /ica/rest Class Method HTTP request Description AnalysisStorageApi get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. BundleApi create_bundle POST /api/bundles Create a new bundle BundleApi get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. BundleApi get_bundles GET /api/bundles Retrieve a list of bundles. BundleApi release_bundle POST /api/bundles/{bundleId}:release release a bundle BundleDataApi get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. BundleDataApi link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. BundleDataApi unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. BundlePipelineApi get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. BundlePipelineApi link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. BundlePipelineApi unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. BundleSampleApi get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. BundleSampleApi link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. BundleSampleApi unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. BundleToolApi get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. BundleToolApi get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. BundleToolApi link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle BundleToolApi unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. ConnectorApi cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. ConnectorApi create_connector POST /api/connectors Create a connector. ConnectorApi create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. ConnectorApi create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. ConnectorApi delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. ConnectorApi delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. ConnectorApi disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. ConnectorApi enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. ConnectorApi get_connector GET /api/connectors/{connectorId} Retrieve a connector. ConnectorApi get_connectors GET /api/connectors Retrieve a list of connectors. ConnectorApi get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. ConnectorApi get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. ConnectorApi get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. ConnectorApi get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. ConnectorApi update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. ConnectorApi update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. DataFormatApi get_data_formats GET /api/dataFormats Retrieve a list of data formats. EntitlementDetailApi find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. EntitlementDetailApi find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. EntitlementDetailApi find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. EntitlementDetailApi find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. EventCodeApi get_event_codes GET /api/eventCodes Retrieve event codes EventLogApi get_event_logs GET /api/eventLog Retrieve a list of event logs. MetadataModelApi get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. MetadataModelApi get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. NotificationChannelApi create_notification_channel POST /api/notificationChannels Create a notification channel NotificationChannelApi delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel NotificationChannelApi get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel NotificationChannelApi get_notification_channels GET /api/notificationChannels Retrieve notification channels NotificationChannelApi update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel PipelineApi get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. PipelineApi get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. PipelineApi get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. PipelineApi get_pipelines GET /api/pipelines Retrieve a list of pipelines. ProjectApi create_project POST /api/projects Create a new project. ProjectApi get_project GET /api/projects/{projectId} Retrieve a project. ProjectApi get_projects GET /api/projects Retrieve a list of projects. ProjectApi update_project PUT /api/projects/{projectId} Update a project. ProjectAnalysisApi abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. ProjectAnalysisApi create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. ProjectAnalysisApi create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. ProjectAnalysisApi get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of project analyses. ProjectAnalysisApi get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. ProjectAnalysisApi get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. ProjectAnalysisApi get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. ProjectAnalysisApi get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. ProjectAnalysisApi get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. ProjectAnalysisApi h_get_execution_output_object GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. ProjectAnalysisApi update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. ProjectBaseApi create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. ProjectBaseJobApi get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. ProjectBaseJobApi get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs ProjectBaseTableApi get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. ProjectBaseTableApi load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. ProjectCustomEventsApi create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. ProjectCustomNotificationSubscriptionsApi create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription ProjectCustomNotificationSubscriptionsApi delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions ProjectCustomNotificationSubscriptionsApi update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription ProjectDataApi archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. ProjectDataApi complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. ProjectDataApi create_data_in_project POST /api/projects/{projectId}/data Create data in this project. ProjectDataApi create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. ProjectDataApi create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. ProjectDataApi create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. ProjectDataApi create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. ProjectDataApi create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. ProjectDataApi delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. ProjectDataApi get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. ProjectDataApi get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. ProjectDataApi get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. ProjectDataApi get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. ProjectDataApi get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. ProjectDataApi get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. ProjectDataApi get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. ProjectDataApi link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. ProjectDataApi schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. ProjectDataApi unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. ProjectDataApi unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. ProjectDataApi update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. ProjectDataTransferApi abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. ProjectDataTransferApi get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. ProjectDataTransferApi get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. ProjectNotificationSubscriptionsApi create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription ProjectNotificationSubscriptionsApi delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions ProjectNotificationSubscriptionsApi update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription ProjectPermissionApi create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. ProjectPermissionApi get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. ProjectPermissionApi get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. ProjectPermissionApi update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. ProjectPipelineApi create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. ProjectPipelineApi create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. ProjectPipelineApi get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. ProjectPipelineApi link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. ProjectPipelineApi release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. ProjectPipelineApi unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. ProjectSampleApi add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. ProjectSampleApi complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. ProjectSampleApi create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project ProjectSampleApi deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. ProjectSampleApi delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. ProjectSampleApi delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. ProjectSampleApi get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. ProjectSampleApi get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. ProjectSampleApi get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. ProjectSampleApi get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. ProjectSampleApi get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. ProjectSampleApi get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. ProjectSampleApi get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. ProjectSampleApi link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. ProjectSampleApi link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. ProjectSampleApi mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. ProjectSampleApi unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. ProjectSampleApi unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. ProjectSampleApi update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. ProjectSampleApi update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. RegionApi get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. RegionApi get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. SampleApi get_samples GET /api/samples Retrieve a list of samples. StorageBundleApi get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. StorageConfigurationApi create_storage_configuration POST /api/storageConfigurations Create a new storage configuration StorageConfigurationApi get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. StorageConfigurationApi get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. StorageConfigurationApi get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. StorageConfigurationApi share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share a storage configuration. StorageCredentialsApi create_storage_credential POST /api/storageCredentials Create a new storage credential StorageCredentialsApi get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. StorageCredentialsApi get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. StorageCredentialsApi share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share a storage credential. StorageCredentialsApi update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. TokenApi create_jwt_token POST /api/tokens Generate a JWT using an API-key or Basic Authentication. TokenApi refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. UserApi approve_user POST /api/users/{userId}:approve Approve a user. UserApi assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. UserApi get_user GET /api/users/{userId} Retrieve a user. UserApi get_users GET /api/users Retrieve a list of users. UserApi revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. UserApi update_user PUT /api/users/{userId} Update a user. WorkgroupApi get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. WorkgroupApi get_workgroups GET /api/workgroups Retrieve a list of workgroups.","title":"Documentation for API Endpoints"},{"location":"v2/#documentation-for-models","text":"AWSDetails ActivationCodeDetail ActivationCodeDetailList ActivationCodeDetailUsage Analysis AnalysisData AnalysisDataInput AnalysisInput AnalysisInputList AnalysisOutput AnalysisOutputList AnalysisPagedList AnalysisParameter AnalysisRawOutput AnalysisReferenceDataParameter AnalysisStep AnalysisStepList AnalysisStorage AnalysisStorageList AnalysisTag AwsCredentials AwsTempCredentials BaseConnection BaseJob BaseJobList Bundle BundleData BundleDataPagedList BundleList BundlePagedList BundlePipeline BundlePipelineList BundleSample BundleSamplePagedList BundleTool BundleToolsList CWLToolDefinition CompleteFolderUploadSession Connector ConnectorList Country CreateBundle CreateConnector CreateCustomEvent CreateCustomNotificationSubscription CreateCwlAnalysis CreateData CreateDownloadRule CreateNextflowAnalysis CreateNotificationChannel CreateNotificationSubscription CreateProject CreateProjectPermission CreateSample CreateStorageConfiguration CreateStorageCredential CreateTemporaryCredentials CreateUploadRule CustomNotificationSubscription CustomNotificationSubscriptionList CwlAnalysisInput CwlAnalysisJsonInput CwlAnalysisStructuredInput CwlToolDefinitionList Data DataDetails DataFormat DataFormatPagedList DataList DataPagedList DataTag DataTransfer DataTransfers Download DownloadRule DownloadRuleList EventCode EventCodeList EventLog EventLogList ExecutionConfiguration ExecutionConfigurationList Field FieldId FieldList FindProjectSamples FindSampleBooleanCondition FindSampleCondition FindSampleDateCondition FindSampleNumberCondition FolderUploadSession InlineView InputParameter InputParameterList InputPart InputPartMediaType Link Links LoadDataInBaseRequest MetadataField MetadataModel MetadataModelList Model MultipartFormDataInput NextflowAnalysisInput NotificationChannel NotificationChannelList NotificationSubscription NotificationSubscriptionList Pipeline PipelineBundle PipelineList PipelineTag Problem Project ProjectBaseTable ProjectBaseTableList ProjectData ProjectDataPagedList ProjectList ProjectPagedList ProjectPermission ProjectPermissionList ProjectPipeline ProjectPipelineList ProjectSample ProjectSamplePagedList ProjectTag RcloneTempCredentials ReferenceData ReferenceDataList ReferenceSet ReferenceSetList Region RegionList Sample SampleHistory SampleHistoryList SamplePagedList SampleTag ScheduleDownload SearchMatchingActivationCodesForCwlAnalysis SearchMatchingActivationCodesForNextflowAnalysis Species StorageBundle StorageBundleList StorageConfiguration StorageConfigurationDetails StorageConfigurationWithDetails StorageConfigurationWithDetailsList StorageCredential StorageCredentialList TempCredentials Token Type TypeList UpdateMetadata UpdateMetadataFieldGroup UpdateSingleMetadataField UpdateStorageCredentialSecrets Upload UploadRule UploadRuleList User UserList Workgroup WorkgroupList","title":"Documentation For Models"},{"location":"v2/#documentation-for-authorization","text":"","title":"Documentation For Authorization"},{"location":"v2/#apikeyauth","text":"Type : API key API key parameter name : X-API-Key Location : HTTP header","title":"ApiKeyAuth"},{"location":"v2/#basicauth","text":"Type : HTTP basic authentication","title":"BasicAuth"},{"location":"v2/#jwtauth","text":"Type : Bearer authentication (JWT)","title":"JwtAuth"},{"location":"v2/#author","text":"","title":"Author"},{"location":"v2/#notes-for-large-openapi-documents","text":"If the OpenAPI document is large, imports in libica.openapi.v2.apis and libica.openapi.v2.models may fail with a RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions: Solution 1: Use specific imports for apis and models like: - from libica.openapi.v2.api.default_api import DefaultApi - from libica.openapi.v2.model.pet import Pet Solution 2: Before importing the package, adjust the maximum recursion limit as shown below: import sys sys . setrecursionlimit ( 1500 ) import libica.openapi.v2 from libica.openapi.v2.apis import * from libica.openapi.v2.models import *","title":"Notes for Large OpenAPI documents"},{"location":"v2/docs/AWSDetails/","text":"AWSDetails \u00b6 Properties \u00b6 Name Type Description Notes bucket_name str The name of the s3 bucket key_prefix str, none_type Key prefix within the bucket for ICA to operate within. Data may only be created having this prefix and the given credentials will only give access to it. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\". [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AWSDetails"},{"location":"v2/docs/AWSDetails/#awsdetails","text":"","title":"AWSDetails"},{"location":"v2/docs/AWSDetails/#properties","text":"Name Type Description Notes bucket_name str The name of the s3 bucket key_prefix str, none_type Key prefix within the bucket for ICA to operate within. Data may only be created having this prefix and the given credentials will only give access to it. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\". [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ActivationCodeDetail/","text":"ActivationCodeDetail \u00b6 Properties \u00b6 Name Type Description Notes id str pipeline_bundle PipelineBundle usages [ActivationCodeDetailUsage] allowed_slots int, none_type The allowed slot within this code, empty means unlimited [optional] used_slots int, none_type Indicates how many slots can are used. [optional] moved_slots int, none_type The slots that where moved to another activation code [optional] original_slots int, none_type The assigned allowed slot within this code, empty means unlimited [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ActivationCodeDetail"},{"location":"v2/docs/ActivationCodeDetail/#activationcodedetail","text":"","title":"ActivationCodeDetail"},{"location":"v2/docs/ActivationCodeDetail/#properties","text":"Name Type Description Notes id str pipeline_bundle PipelineBundle usages [ActivationCodeDetailUsage] allowed_slots int, none_type The allowed slot within this code, empty means unlimited [optional] used_slots int, none_type Indicates how many slots can are used. [optional] moved_slots int, none_type The slots that where moved to another activation code [optional] original_slots int, none_type The assigned allowed slot within this code, empty means unlimited [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ActivationCodeDetailList/","text":"ActivationCodeDetailList \u00b6 Properties \u00b6 Name Type Description Notes items [ActivationCodeDetail] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ActivationCodeDetailList"},{"location":"v2/docs/ActivationCodeDetailList/#activationcodedetaillist","text":"","title":"ActivationCodeDetailList"},{"location":"v2/docs/ActivationCodeDetailList/#properties","text":"Name Type Description Notes items [ActivationCodeDetail] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ActivationCodeDetailUsage/","text":"ActivationCodeDetailUsage \u00b6 Properties \u00b6 Name Type Description Notes project Project [optional] used_slots int, none_type Indicates how many slots can are used [optional] allowed_slots int, none_type Indicates how many slots can be used [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ActivationCodeDetailUsage"},{"location":"v2/docs/ActivationCodeDetailUsage/#activationcodedetailusage","text":"","title":"ActivationCodeDetailUsage"},{"location":"v2/docs/ActivationCodeDetailUsage/#properties","text":"Name Type Description Notes project Project [optional] used_slots int, none_type Indicates how many slots can are used [optional] allowed_slots int, none_type Indicates how many slots can be used [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Analysis/","text":"Analysis \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline Pipeline status str The status of the analysis tags AnalysisTag tenant_name str, none_type [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorage [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Analysis"},{"location":"v2/docs/Analysis/#analysis","text":"","title":"Analysis"},{"location":"v2/docs/Analysis/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline Pipeline status str The status of the analysis tags AnalysisTag tenant_name str, none_type [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorage [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisData/","text":"AnalysisData \u00b6 Properties \u00b6 Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the analysis. data_type str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisData"},{"location":"v2/docs/AnalysisData/#analysisdata","text":"","title":"AnalysisData"},{"location":"v2/docs/AnalysisData/#properties","text":"Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the analysis. data_type str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisDataInput/","text":"AnalysisDataInput \u00b6 Properties \u00b6 Name Type Description Notes parameter_code str data_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisDataInput"},{"location":"v2/docs/AnalysisDataInput/#analysisdatainput","text":"","title":"AnalysisDataInput"},{"location":"v2/docs/AnalysisDataInput/#properties","text":"Name Type Description Notes parameter_code str data_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisInput/","text":"AnalysisInput \u00b6 Properties \u00b6 Name Type Description Notes code str The name of the input-parameter. analysis_data [AnalysisData], none_type The analysis-data used as input by the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisInput"},{"location":"v2/docs/AnalysisInput/#analysisinput","text":"","title":"AnalysisInput"},{"location":"v2/docs/AnalysisInput/#properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data [AnalysisData], none_type The analysis-data used as input by the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisInputList/","text":"AnalysisInputList \u00b6 Properties \u00b6 Name Type Description Notes items [AnalysisInput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisInputList"},{"location":"v2/docs/AnalysisInputList/#analysisinputlist","text":"","title":"AnalysisInputList"},{"location":"v2/docs/AnalysisInputList/#properties","text":"Name Type Description Notes items [AnalysisInput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisOutput/","text":"AnalysisOutput \u00b6 Properties \u00b6 Name Type Description Notes code str The name of the output-parameter. data [AnalysisData] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisOutput"},{"location":"v2/docs/AnalysisOutput/#analysisoutput","text":"","title":"AnalysisOutput"},{"location":"v2/docs/AnalysisOutput/#properties","text":"Name Type Description Notes code str The name of the output-parameter. data [AnalysisData] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisOutputList/","text":"AnalysisOutputList \u00b6 Properties \u00b6 Name Type Description Notes items [AnalysisOutput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisOutputList"},{"location":"v2/docs/AnalysisOutputList/#analysisoutputlist","text":"","title":"AnalysisOutputList"},{"location":"v2/docs/AnalysisOutputList/#properties","text":"Name Type Description Notes items [AnalysisOutput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisPagedList/","text":"AnalysisPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [Analysis] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisPagedList"},{"location":"v2/docs/AnalysisPagedList/#analysispagedlist","text":"","title":"AnalysisPagedList"},{"location":"v2/docs/AnalysisPagedList/#properties","text":"Name Type Description Notes items [Analysis] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisParameter/","text":"AnalysisParameter \u00b6 Properties \u00b6 Name Type Description Notes code str [optional] value str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisParameter"},{"location":"v2/docs/AnalysisParameter/#analysisparameter","text":"","title":"AnalysisParameter"},{"location":"v2/docs/AnalysisParameter/#properties","text":"Name Type Description Notes code str [optional] value str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisRawOutput/","text":"AnalysisRawOutput \u00b6 Properties \u00b6 Name Type Description Notes raw_output str The raw output of the analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisRawOutput"},{"location":"v2/docs/AnalysisRawOutput/#analysisrawoutput","text":"","title":"AnalysisRawOutput"},{"location":"v2/docs/AnalysisRawOutput/#properties","text":"Name Type Description Notes raw_output str The raw output of the analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisReferenceDataParameter/","text":"AnalysisReferenceDataParameter \u00b6 Properties \u00b6 Name Type Description Notes parameter_code str [optional] reference_data_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisReferenceDataParameter"},{"location":"v2/docs/AnalysisReferenceDataParameter/#analysisreferencedataparameter","text":"","title":"AnalysisReferenceDataParameter"},{"location":"v2/docs/AnalysisReferenceDataParameter/#properties","text":"Name Type Description Notes parameter_code str [optional] reference_data_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisStep/","text":"AnalysisStep \u00b6 Properties \u00b6 Name Type Description Notes id str status str The status of the analysis step technical bool Indicates which kind of step was executed queue_date datetime, none_type When the analysis step was queued [optional] start_date datetime, none_type When the analysis step was started [optional] end_date datetime, none_type When the analysis step was finished [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisStep"},{"location":"v2/docs/AnalysisStep/#analysisstep","text":"","title":"AnalysisStep"},{"location":"v2/docs/AnalysisStep/#properties","text":"Name Type Description Notes id str status str The status of the analysis step technical bool Indicates which kind of step was executed queue_date datetime, none_type When the analysis step was queued [optional] start_date datetime, none_type When the analysis step was started [optional] end_date datetime, none_type When the analysis step was finished [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisStepList/","text":"AnalysisStepList \u00b6 Properties \u00b6 Name Type Description Notes items [AnalysisStep] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisStepList"},{"location":"v2/docs/AnalysisStepList/#analysissteplist","text":"","title":"AnalysisStepList"},{"location":"v2/docs/AnalysisStepList/#properties","text":"Name Type Description Notes items [AnalysisStep] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisStorage/","text":"AnalysisStorage \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage option tenant_name str, none_type [optional] description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisStorage"},{"location":"v2/docs/AnalysisStorage/#analysisstorage","text":"","title":"AnalysisStorage"},{"location":"v2/docs/AnalysisStorage/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage option tenant_name str, none_type [optional] description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisStorageApi/","text":"libica.openapi.v2.AnalysisStorageApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. get_analysis_storage_options \u00b6 AnalysisStorageList get_analysis_storage_options() Retrieve the list of analysis storage options. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import analysis_storage_api from libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = analysis_storage_api . AnalysisStorageApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the list of analysis storage options. api_response = api_instance . get_analysis_storage_options () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling AnalysisStorageApi->get_analysis_storage_options: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 AnalysisStorageList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of analysis storage options is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.AnalysisStorageApi"},{"location":"v2/docs/AnalysisStorageApi/#libicaopenapiv2analysisstorageapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options.","title":"libica.openapi.v2.AnalysisStorageApi"},{"location":"v2/docs/AnalysisStorageApi/#get_analysis_storage_options","text":"AnalysisStorageList get_analysis_storage_options() Retrieve the list of analysis storage options.","title":"get_analysis_storage_options"},{"location":"v2/docs/AnalysisStorageApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import analysis_storage_api from libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = analysis_storage_api . AnalysisStorageApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the list of analysis storage options. api_response = api_instance . get_analysis_storage_options () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling AnalysisStorageApi->get_analysis_storage_options: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/AnalysisStorageApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/AnalysisStorageApi/#return-type","text":"AnalysisStorageList","title":"Return type"},{"location":"v2/docs/AnalysisStorageApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/AnalysisStorageApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/AnalysisStorageApi/#http-response-details","text":"Status code Description Response headers 200 The list of analysis storage options is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/AnalysisStorageList/","text":"AnalysisStorageList \u00b6 Properties \u00b6 Name Type Description Notes items [AnalysisStorage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisStorageList"},{"location":"v2/docs/AnalysisStorageList/#analysisstoragelist","text":"","title":"AnalysisStorageList"},{"location":"v2/docs/AnalysisStorageList/#properties","text":"Name Type Description Notes items [AnalysisStorage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AnalysisTag/","text":"AnalysisTag \u00b6 Properties \u00b6 Name Type Description Notes technical_tags [str] Technical tags user_tags [str] User tags reference_tags [str] Reference tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AnalysisTag"},{"location":"v2/docs/AnalysisTag/#analysistag","text":"","title":"AnalysisTag"},{"location":"v2/docs/AnalysisTag/#properties","text":"Name Type Description Notes technical_tags [str] Technical tags user_tags [str] User tags reference_tags [str] Reference tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AwsCredentials/","text":"AwsCredentials \u00b6 The credentials that are required when the type of the Storage Credential being updated is AWS Properties \u00b6 Name Type Description Notes access_key_id str The access key found in aws console secret_access_key str The secret access key found in aws console any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsCredentials"},{"location":"v2/docs/AwsCredentials/#awscredentials","text":"The credentials that are required when the type of the Storage Credential being updated is AWS","title":"AwsCredentials"},{"location":"v2/docs/AwsCredentials/#properties","text":"Name Type Description Notes access_key_id str The access key found in aws console secret_access_key str The secret access key found in aws console any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/AwsTempCredentials/","text":"AwsTempCredentials \u00b6 In case of AWS S3 stored data, this will contain the credentials for uploading or downloading the data. Properties \u00b6 Name Type Description Notes access_key str The S3 access key. secret_key str The S3 secret key. session_token str The S3 session token. region str The S3 region. bucket str The S3 bucket name. object_prefix str The S3 object prefix these temporary credentials will give access to. server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\" [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"AwsTempCredentials"},{"location":"v2/docs/AwsTempCredentials/#awstempcredentials","text":"In case of AWS S3 stored data, this will contain the credentials for uploading or downloading the data.","title":"AwsTempCredentials"},{"location":"v2/docs/AwsTempCredentials/#properties","text":"Name Type Description Notes access_key str The S3 access key. secret_key str The S3 secret key. session_token str The S3 session token. region str The S3 region. bucket str The S3 bucket name. object_prefix str The S3 object prefix these temporary credentials will give access to. server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\" [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BaseConnection/","text":"BaseConnection \u00b6 Properties \u00b6 Name Type Description Notes authenticator str Specifies the supported snowflake authenticator to use. Currently 'oauth' only is supported access_token str Specifies the OAuth token to use for authentication dns_name str snowflake dns name. Usually something like '<<account>>.snowflakecomputing.com' user_principal_name str Specifies the user principal name. This is required for some snowflake client (snowSQL for instance) database_name str Specifies the database name bound to the project specified schema_name str Specifies the schema name bound to the project specified warehouse_name str Specifies the warehouse name bound to the project specified role_name str Specifies the role name bound to the project specified any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BaseConnection"},{"location":"v2/docs/BaseConnection/#baseconnection","text":"","title":"BaseConnection"},{"location":"v2/docs/BaseConnection/#properties","text":"Name Type Description Notes authenticator str Specifies the supported snowflake authenticator to use. Currently 'oauth' only is supported access_token str Specifies the OAuth token to use for authentication dns_name str snowflake dns name. Usually something like '<<account>>.snowflakecomputing.com' user_principal_name str Specifies the user principal name. This is required for some snowflake client (snowSQL for instance) database_name str Specifies the database name bound to the project specified schema_name str Specifies the schema name bound to the project specified warehouse_name str Specifies the warehouse name bound to the project specified role_name str Specifies the role name bound to the project specified any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BaseJob/","text":"BaseJob \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str type str The type of the job status str The status of the job tenant_name str, none_type [optional] description str, none_type A short description of the base job [optional] table ProjectBaseTable [optional] overall_duration int, none_type The duration of the job expressed in milliseconds [optional] details str, none_type Detailed description of the job [optional] bytes_billed int, none_type Bytes billed [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BaseJob"},{"location":"v2/docs/BaseJob/#basejob","text":"","title":"BaseJob"},{"location":"v2/docs/BaseJob/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str type str The type of the job status str The status of the job tenant_name str, none_type [optional] description str, none_type A short description of the base job [optional] table ProjectBaseTable [optional] overall_duration int, none_type The duration of the job expressed in milliseconds [optional] details str, none_type Detailed description of the job [optional] bytes_billed int, none_type Bytes billed [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BaseJobList/","text":"BaseJobList \u00b6 Properties \u00b6 Name Type Description Notes items [BaseJob] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BaseJobList"},{"location":"v2/docs/BaseJobList/#basejoblist","text":"","title":"BaseJobList"},{"location":"v2/docs/BaseJobList/#properties","text":"Name Type Description Notes items [BaseJob] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Bundle/","text":"Bundle \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str region Region release_version str status str tenant_name str, none_type [optional] short_description str, none_type [optional] metadata_model MetadataModel [optional] version_comment str, none_type [optional] categories [str, none_type], none_type category tags as string array [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Bundle"},{"location":"v2/docs/Bundle/#bundle","text":"","title":"Bundle"},{"location":"v2/docs/Bundle/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str region Region release_version str status str tenant_name str, none_type [optional] short_description str, none_type [optional] metadata_model MetadataModel [optional] version_comment str, none_type [optional] categories [str, none_type], none_type category tags as string array [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleApi/","text":"libica.openapi.v2.BundleApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_bundle POST /api/bundles Create a new bundle get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. get_bundles GET /api/bundles Retrieve a list of bundles. release_bundle POST /api/bundles/{bundleId}:release release a bundle create_bundle \u00b6 Bundle create_bundle() Create a new bundle Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.create_bundle import CreateBundle from libica.openapi.v2.model.bundle import Bundle from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) create_bundle = CreateBundle ( name = \"name_example\" , short_description = \"short_description_example\" , bundle_release_version = \"bundle_release_version_example\" , bundle_version_comment = \"bundle_version_comment_example\" , region_id = \"region_id_example\" , metadata_model_id = \"metadata_model_id_example\" , bundle_status = \"DRAFT\" , categories = [ \"categories_example\" , ], links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ), ) # CreateBundle | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new bundle api_response = api_instance . create_bundle ( create_bundle = create_bundle ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->create_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_bundle CreateBundle [optional] Return type \u00b6 Bundle Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The bundle is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_bundle \u00b6 Bundle get_bundle(bundle_id) Retrieve a bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.bundle import Bundle from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve # example passing only required values which don't have defaults set try : # Retrieve a bundle. api_response = api_instance . get_bundle ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->get_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to retrieve Return type \u00b6 Bundle Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The bundle is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_bundles \u00b6 BundlePagedList get_bundles() Retrieve a list of bundles. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.bundle_paged_list import BundlePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) search = \"search_example\" # str | Search (optional) user_tags = \"userTags_example\" # str | User tags to filter on (optional) technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of bundles. api_response = api_instance . get_bundles ( search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->get_bundles: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription [optional] Return type \u00b6 BundlePagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of bundles is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] release_bundle \u00b6 release_bundle(bundle_id) release a bundle Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to release # example passing only required values which don't have defaults set try : # release a bundle api_instance . release_bundle ( bundle_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->release_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to release Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The bundle is successfully released - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.BundleApi"},{"location":"v2/docs/BundleApi/#libicaopenapiv2bundleapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_bundle POST /api/bundles Create a new bundle get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. get_bundles GET /api/bundles Retrieve a list of bundles. release_bundle POST /api/bundles/{bundleId}:release release a bundle","title":"libica.openapi.v2.BundleApi"},{"location":"v2/docs/BundleApi/#create_bundle","text":"Bundle create_bundle() Create a new bundle","title":"create_bundle"},{"location":"v2/docs/BundleApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.create_bundle import CreateBundle from libica.openapi.v2.model.bundle import Bundle from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) create_bundle = CreateBundle ( name = \"name_example\" , short_description = \"short_description_example\" , bundle_release_version = \"bundle_release_version_example\" , bundle_version_comment = \"bundle_version_comment_example\" , region_id = \"region_id_example\" , metadata_model_id = \"metadata_model_id_example\" , bundle_status = \"DRAFT\" , categories = [ \"categories_example\" , ], links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ), ) # CreateBundle | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new bundle api_response = api_instance . create_bundle ( create_bundle = create_bundle ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->create_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleApi/#parameters","text":"Name Type Description Notes create_bundle CreateBundle [optional]","title":"Parameters"},{"location":"v2/docs/BundleApi/#return-type","text":"Bundle","title":"Return type"},{"location":"v2/docs/BundleApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleApi/#http-response-details","text":"Status code Description Response headers 201 The bundle is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleApi/#get_bundle","text":"Bundle get_bundle(bundle_id) Retrieve a bundle.","title":"get_bundle"},{"location":"v2/docs/BundleApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.bundle import Bundle from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve # example passing only required values which don't have defaults set try : # Retrieve a bundle. api_response = api_instance . get_bundle ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->get_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleApi/#parameters_1","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve","title":"Parameters"},{"location":"v2/docs/BundleApi/#return-type_1","text":"Bundle","title":"Return type"},{"location":"v2/docs/BundleApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleApi/#http-response-details_1","text":"Status code Description Response headers 200 The bundle is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleApi/#get_bundles","text":"BundlePagedList get_bundles() Retrieve a list of bundles.","title":"get_bundles"},{"location":"v2/docs/BundleApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.bundle_paged_list import BundlePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) search = \"search_example\" # str | Search (optional) user_tags = \"userTags_example\" # str | User tags to filter on (optional) technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of bundles. api_response = api_instance . get_bundles ( search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->get_bundles: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleApi/#parameters_2","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription [optional]","title":"Parameters"},{"location":"v2/docs/BundleApi/#return-type_2","text":"BundlePagedList","title":"Return type"},{"location":"v2/docs/BundleApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of bundles is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleApi/#release_bundle","text":"release_bundle(bundle_id) release a bundle","title":"release_bundle"},{"location":"v2/docs/BundleApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_api . BundleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to release # example passing only required values which don't have defaults set try : # release a bundle api_instance . release_bundle ( bundle_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleApi->release_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleApi/#parameters_3","text":"Name Type Description Notes bundle_id str The ID of the bundle to release","title":"Parameters"},{"location":"v2/docs/BundleApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleApi/#http-response-details_3","text":"Status code Description Response headers 204 The bundle is successfully released - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleData/","text":"BundleData \u00b6 Properties \u00b6 Name Type Description Notes data Data bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleData"},{"location":"v2/docs/BundleData/#bundledata","text":"","title":"BundleData"},{"location":"v2/docs/BundleData/#properties","text":"Name Type Description Notes data Data bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleDataApi/","text":"libica.openapi.v2.BundleDataApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. get_bundle_data \u00b6 BundleDataPagedList get_bundle_data(bundle_id) Retrieve the list of bundle data. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.bundle_data_paged_list import BundleDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = \"id_example\" # str | The ids to filter on. This will always match exact. (optional) filename = \"filename_example\" # str | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = \"filePath_example\" # str | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = \"PARTIAL\" # str | The statuses to filter on. (optional) format_id = \"formatId_example\" # str | The IDs of the formats to filter on. (optional) format_code = \"formatCode_example\" # str | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = \"parentFolderId_example\" # str | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = \"creationDateAfter_example\" # str | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = \"creationDateBefore_example\" # str | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = \"statusDateAfter_example\" # str | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = \"statusDateBefore_example\" # str | The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = \"userTag_example\" # str | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = \"runInputTag_example\" # str | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = \"runOutputTag_example\" # str | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = \"connectorTag_example\" # str | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = \"technicalTag_example\" # str | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = \"notInRun_example\" # str | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = \"notLinkedToSample_example\" # str | When set to true only date that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of bundle data. api_response = api_instance . get_bundle_data ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->get_bundle_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of bundle data. api_response = api_instance . get_bundle_data ( bundle_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->get_bundle_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str full_text str To search through multiple fields of data. [optional] id str The ids to filter on. This will always match exact. [optional] filename str The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path str The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status str The statuses to filter on. [optional] format_id str The IDs of the formats to filter on. [optional] format_code str The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id str The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after str The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before str The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after str The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before str The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag str The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag str The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag str The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag str The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag str The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run str When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample str When set to true only date that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional] Return type \u00b6 BundleDataPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of bundle data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_data_to_bundle \u00b6 link_data_to_bundle(bundle_id, data_id) Link data to this bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Link data to this bundle. api_instance . link_data_to_bundle ( bundle_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->link_data_to_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully linked to this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_data_from_bundle \u00b6 unlink_data_from_bundle(bundle_id, data_id) Unlink data from this bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink data from this bundle. api_instance . unlink_data_from_bundle ( bundle_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->unlink_data_from_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully unlinked from this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.BundleDataApi"},{"location":"v2/docs/BundleDataApi/#libicaopenapiv2bundledataapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle.","title":"libica.openapi.v2.BundleDataApi"},{"location":"v2/docs/BundleDataApi/#get_bundle_data","text":"BundleDataPagedList get_bundle_data(bundle_id) Retrieve the list of bundle data.","title":"get_bundle_data"},{"location":"v2/docs/BundleDataApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.bundle_data_paged_list import BundleDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = \"id_example\" # str | The ids to filter on. This will always match exact. (optional) filename = \"filename_example\" # str | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = \"filePath_example\" # str | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = \"PARTIAL\" # str | The statuses to filter on. (optional) format_id = \"formatId_example\" # str | The IDs of the formats to filter on. (optional) format_code = \"formatCode_example\" # str | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = \"parentFolderId_example\" # str | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = \"creationDateAfter_example\" # str | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = \"creationDateBefore_example\" # str | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = \"statusDateAfter_example\" # str | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = \"statusDateBefore_example\" # str | The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = \"userTag_example\" # str | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = \"runInputTag_example\" # str | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = \"runOutputTag_example\" # str | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = \"connectorTag_example\" # str | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = \"technicalTag_example\" # str | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = \"notInRun_example\" # str | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = \"notLinkedToSample_example\" # str | When set to true only date that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of bundle data. api_response = api_instance . get_bundle_data ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->get_bundle_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of bundle data. api_response = api_instance . get_bundle_data ( bundle_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->get_bundle_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleDataApi/#parameters","text":"Name Type Description Notes bundle_id str full_text str To search through multiple fields of data. [optional] id str The ids to filter on. This will always match exact. [optional] filename str The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path str The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status str The statuses to filter on. [optional] format_id str The IDs of the formats to filter on. [optional] format_code str The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id str The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after str The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before str The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after str The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before str The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag str The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag str The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag str The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag str The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag str The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run str When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample str When set to true only date that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]","title":"Parameters"},{"location":"v2/docs/BundleDataApi/#return-type","text":"BundleDataPagedList","title":"Return type"},{"location":"v2/docs/BundleDataApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleDataApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleDataApi/#http-response-details","text":"Status code Description Response headers 200 The list of bundle data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleDataApi/#link_data_to_bundle","text":"link_data_to_bundle(bundle_id, data_id) Link data to this bundle.","title":"link_data_to_bundle"},{"location":"v2/docs/BundleDataApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Link data to this bundle. api_instance . link_data_to_bundle ( bundle_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->link_data_to_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleDataApi/#parameters_1","text":"Name Type Description Notes bundle_id str data_id str","title":"Parameters"},{"location":"v2/docs/BundleDataApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleDataApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleDataApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleDataApi/#http-response-details_1","text":"Status code Description Response headers 204 The data is successfully linked to this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleDataApi/#unlink_data_from_bundle","text":"unlink_data_from_bundle(bundle_id, data_id) Unlink data from this bundle.","title":"unlink_data_from_bundle"},{"location":"v2/docs/BundleDataApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_data_api . BundleDataApi ( api_client ) bundle_id = \"bundleId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink data from this bundle. api_instance . unlink_data_from_bundle ( bundle_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleDataApi->unlink_data_from_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleDataApi/#parameters_2","text":"Name Type Description Notes bundle_id str data_id str","title":"Parameters"},{"location":"v2/docs/BundleDataApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleDataApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleDataApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleDataApi/#http-response-details_2","text":"Status code Description Response headers 204 The data is successfully unlinked from this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleDataPagedList/","text":"BundleDataPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [BundleData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleDataPagedList"},{"location":"v2/docs/BundleDataPagedList/#bundledatapagedlist","text":"","title":"BundleDataPagedList"},{"location":"v2/docs/BundleDataPagedList/#properties","text":"Name Type Description Notes items [BundleData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleList/","text":"BundleList \u00b6 Properties \u00b6 Name Type Description Notes items [Bundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleList"},{"location":"v2/docs/BundleList/#bundlelist","text":"","title":"BundleList"},{"location":"v2/docs/BundleList/#properties","text":"Name Type Description Notes items [Bundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundlePagedList/","text":"BundlePagedList \u00b6 Properties \u00b6 Name Type Description Notes items [Bundle] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundlePagedList"},{"location":"v2/docs/BundlePagedList/#bundlepagedlist","text":"","title":"BundlePagedList"},{"location":"v2/docs/BundlePagedList/#properties","text":"Name Type Description Notes items [Bundle] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundlePipeline/","text":"BundlePipeline \u00b6 Properties \u00b6 Name Type Description Notes pipeline Pipeline bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundlePipeline"},{"location":"v2/docs/BundlePipeline/#bundlepipeline","text":"","title":"BundlePipeline"},{"location":"v2/docs/BundlePipeline/#properties","text":"Name Type Description Notes pipeline Pipeline bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundlePipelineApi/","text":"libica.openapi.v2.BundlePipelineApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. get_bundle_pipelines \u00b6 BundlePipelineList get_bundle_pipelines(bundle_id) Retrieve a list of bundle pipelines. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.bundle_pipeline_list import BundlePipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve pipelines for # example passing only required values which don't have defaults set try : # Retrieve a list of bundle pipelines. api_response = api_instance . get_bundle_pipelines ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->get_bundle_pipelines: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to retrieve pipelines for Return type \u00b6 BundlePipelineList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of bundle pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_pipeline_to_bundle \u00b6 ProjectPipeline link_pipeline_to_bundle(bundle_id, pipeline_id) Link a pipeline to a bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Link a pipeline to a bundle. api_response = api_instance . link_pipeline_to_bundle ( bundle_id , pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->link_pipeline_to_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline Return type \u00b6 ProjectPipeline Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 204 The pipeline is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_pipeline_from_bundle \u00b6 unlink_pipeline_from_bundle(bundle_id, pipeline_id) Unlink a pipeline from a bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Unlink a pipeline from a bundle. api_instance . unlink_pipeline_from_bundle ( bundle_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->unlink_pipeline_from_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The pipeline is successfully unlinked from the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.BundlePipelineApi"},{"location":"v2/docs/BundlePipelineApi/#libicaopenapiv2bundlepipelineapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle.","title":"libica.openapi.v2.BundlePipelineApi"},{"location":"v2/docs/BundlePipelineApi/#get_bundle_pipelines","text":"BundlePipelineList get_bundle_pipelines(bundle_id) Retrieve a list of bundle pipelines.","title":"get_bundle_pipelines"},{"location":"v2/docs/BundlePipelineApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.bundle_pipeline_list import BundlePipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve pipelines for # example passing only required values which don't have defaults set try : # Retrieve a list of bundle pipelines. api_response = api_instance . get_bundle_pipelines ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->get_bundle_pipelines: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundlePipelineApi/#parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve pipelines for","title":"Parameters"},{"location":"v2/docs/BundlePipelineApi/#return-type","text":"BundlePipelineList","title":"Return type"},{"location":"v2/docs/BundlePipelineApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundlePipelineApi/#http-response-details","text":"Status code Description Response headers 200 The list of bundle pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundlePipelineApi/#link_pipeline_to_bundle","text":"ProjectPipeline link_pipeline_to_bundle(bundle_id, pipeline_id) Link a pipeline to a bundle.","title":"link_pipeline_to_bundle"},{"location":"v2/docs/BundlePipelineApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Link a pipeline to a bundle. api_response = api_instance . link_pipeline_to_bundle ( bundle_id , pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->link_pipeline_to_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundlePipelineApi/#parameters_1","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline","title":"Parameters"},{"location":"v2/docs/BundlePipelineApi/#return-type_1","text":"ProjectPipeline","title":"Return type"},{"location":"v2/docs/BundlePipelineApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_1","text":"Status code Description Response headers 204 The pipeline is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundlePipelineApi/#unlink_pipeline_from_bundle","text":"unlink_pipeline_from_bundle(bundle_id, pipeline_id) Unlink a pipeline from a bundle.","title":"unlink_pipeline_from_bundle"},{"location":"v2/docs/BundlePipelineApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_pipeline_api . BundlePipelineApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Unlink a pipeline from a bundle. api_instance . unlink_pipeline_from_bundle ( bundle_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundlePipelineApi->unlink_pipeline_from_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundlePipelineApi/#parameters_2","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline","title":"Parameters"},{"location":"v2/docs/BundlePipelineApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundlePipelineApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_2","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundlePipelineList/","text":"BundlePipelineList \u00b6 Properties \u00b6 Name Type Description Notes items [BundlePipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundlePipelineList"},{"location":"v2/docs/BundlePipelineList/#bundlepipelinelist","text":"","title":"BundlePipelineList"},{"location":"v2/docs/BundlePipelineList/#properties","text":"Name Type Description Notes items [BundlePipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleSample/","text":"BundleSample \u00b6 Properties \u00b6 Name Type Description Notes sample Sample bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleSample"},{"location":"v2/docs/BundleSample/#bundlesample","text":"","title":"BundleSample"},{"location":"v2/docs/BundleSample/#properties","text":"Name Type Description Notes sample Sample bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleSampleApi/","text":"libica.openapi.v2.BundleSampleApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. get_bundle_samples \u00b6 BundleSamplePagedList get_bundle_samples(bundle_id) Retrieve a list of bundle samples. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.bundle_sample_paged_list import BundleSamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get bundle samples from search = \"search_example\" # str | To search through multiple fields of data. (optional) user_tags = \"userTags_example\" # str | The user tags to filter on. (optional) technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of bundle samples. api_response = api_instance . get_bundle_samples ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->get_bundle_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of bundle samples. api_response = api_instance . get_bundle_samples ( bundle_id , search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->get_bundle_samples: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to get bundle samples from search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional] Return type \u00b6 BundleSamplePagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of bundle samples are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_sample_to_bundle \u00b6 link_sample_to_bundle(bundle_id, sample_id) Link a sample to a bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Link a sample to a bundle. api_instance . link_sample_to_bundle ( bundle_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->link_sample_to_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str sample_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The sample is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_sample_from_bundle \u00b6 unlink_sample_from_bundle(bundle_id, sample_id) Unlink a sample from a bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a sample from a bundle. api_instance . unlink_sample_from_bundle ( bundle_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->unlink_sample_from_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str sample_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The sample is successfully unlinked from the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.BundleSampleApi"},{"location":"v2/docs/BundleSampleApi/#libicaopenapiv2bundlesampleapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle.","title":"libica.openapi.v2.BundleSampleApi"},{"location":"v2/docs/BundleSampleApi/#get_bundle_samples","text":"BundleSamplePagedList get_bundle_samples(bundle_id) Retrieve a list of bundle samples.","title":"get_bundle_samples"},{"location":"v2/docs/BundleSampleApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.bundle_sample_paged_list import BundleSamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get bundle samples from search = \"search_example\" # str | To search through multiple fields of data. (optional) user_tags = \"userTags_example\" # str | The user tags to filter on. (optional) technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of bundle samples. api_response = api_instance . get_bundle_samples ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->get_bundle_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of bundle samples. api_response = api_instance . get_bundle_samples ( bundle_id , search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->get_bundle_samples: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleSampleApi/#parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get bundle samples from search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]","title":"Parameters"},{"location":"v2/docs/BundleSampleApi/#return-type","text":"BundleSamplePagedList","title":"Return type"},{"location":"v2/docs/BundleSampleApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleSampleApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleSampleApi/#http-response-details","text":"Status code Description Response headers 200 The list of bundle samples are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleSampleApi/#link_sample_to_bundle","text":"link_sample_to_bundle(bundle_id, sample_id) Link a sample to a bundle.","title":"link_sample_to_bundle"},{"location":"v2/docs/BundleSampleApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Link a sample to a bundle. api_instance . link_sample_to_bundle ( bundle_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->link_sample_to_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleSampleApi/#parameters_1","text":"Name Type Description Notes bundle_id str sample_id str","title":"Parameters"},{"location":"v2/docs/BundleSampleApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleSampleApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleSampleApi/#http-response-details_1","text":"Status code Description Response headers 204 The sample is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleSampleApi/#unlink_sample_from_bundle","text":"unlink_sample_from_bundle(bundle_id, sample_id) Unlink a sample from a bundle.","title":"unlink_sample_from_bundle"},{"location":"v2/docs/BundleSampleApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_sample_api . BundleSampleApi ( api_client ) bundle_id = \"bundleId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a sample from a bundle. api_instance . unlink_sample_from_bundle ( bundle_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleSampleApi->unlink_sample_from_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleSampleApi/#parameters_2","text":"Name Type Description Notes bundle_id str sample_id str","title":"Parameters"},{"location":"v2/docs/BundleSampleApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleSampleApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleSampleApi/#http-response-details_2","text":"Status code Description Response headers 204 The sample is successfully unlinked from the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleSamplePagedList/","text":"BundleSamplePagedList \u00b6 Properties \u00b6 Name Type Description Notes items [BundleSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleSamplePagedList"},{"location":"v2/docs/BundleSamplePagedList/#bundlesamplepagedlist","text":"","title":"BundleSamplePagedList"},{"location":"v2/docs/BundleSamplePagedList/#properties","text":"Name Type Description Notes items [BundleSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleTool/","text":"BundleTool \u00b6 Properties \u00b6 Name Type Description Notes cwl_tool_definition CWLToolDefinition any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleTool"},{"location":"v2/docs/BundleTool/#bundletool","text":"","title":"BundleTool"},{"location":"v2/docs/BundleTool/#properties","text":"Name Type Description Notes cwl_tool_definition CWLToolDefinition any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/BundleToolApi/","text":"libica.openapi.v2.BundleToolApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. get_bundle_tools \u00b6 BundleToolsList get_bundle_tools(bundle_id) Retrieve a list of bundle tools. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.bundle_tools_list import BundleToolsList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get tools from # example passing only required values which don't have defaults set try : # Retrieve a list of bundle tools. api_response = api_instance . get_bundle_tools ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->get_bundle_tools: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to get tools from Return type \u00b6 BundleToolsList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of bundle tools is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_tools_eligible_for_linking_to_bundle \u00b6 CwlToolDefinitionList get_tools_eligible_for_linking_to_bundle(bundle_id) Retrieve a list of tools eligible for linking to the bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.cwl_tool_definition_list import CwlToolDefinitionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get the eligible tools for # example passing only required values which don't have defaults set try : # Retrieve a list of tools eligible for linking to the bundle. api_response = api_instance . get_tools_eligible_for_linking_to_bundle ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->get_tools_eligible_for_linking_to_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to get the eligible tools for Return type \u00b6 CwlToolDefinitionList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of tools is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_tool_to_bundle \u00b6 link_tool_to_bundle(bundle_id, tool_id) Link a tool to a bundle Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to link the tool to tool_id = \"toolId_example\" # str | The ID of the tool to link # example passing only required values which don't have defaults set try : # Link a tool to a bundle api_instance . link_tool_to_bundle ( bundle_id , tool_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->link_tool_to_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str The ID of the bundle to link the tool to tool_id str The ID of the tool to link Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The tool is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_tool_from_bundle \u00b6 unlink_tool_from_bundle(bundle_id, tool_id) Unlink a tool from this bundle. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | tool_id = \"toolId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a tool from this bundle. api_instance . unlink_tool_from_bundle ( bundle_id , tool_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->unlink_tool_from_bundle: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes bundle_id str tool_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The tool is successfully unlinked from this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.BundleToolApi"},{"location":"v2/docs/BundleToolApi/#libicaopenapiv2bundletoolapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle.","title":"libica.openapi.v2.BundleToolApi"},{"location":"v2/docs/BundleToolApi/#get_bundle_tools","text":"BundleToolsList get_bundle_tools(bundle_id) Retrieve a list of bundle tools.","title":"get_bundle_tools"},{"location":"v2/docs/BundleToolApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.bundle_tools_list import BundleToolsList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get tools from # example passing only required values which don't have defaults set try : # Retrieve a list of bundle tools. api_response = api_instance . get_bundle_tools ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->get_bundle_tools: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleToolApi/#parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get tools from","title":"Parameters"},{"location":"v2/docs/BundleToolApi/#return-type","text":"BundleToolsList","title":"Return type"},{"location":"v2/docs/BundleToolApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleToolApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleToolApi/#http-response-details","text":"Status code Description Response headers 200 The list of bundle tools is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleToolApi/#get_tools_eligible_for_linking_to_bundle","text":"CwlToolDefinitionList get_tools_eligible_for_linking_to_bundle(bundle_id) Retrieve a list of tools eligible for linking to the bundle.","title":"get_tools_eligible_for_linking_to_bundle"},{"location":"v2/docs/BundleToolApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.cwl_tool_definition_list import CwlToolDefinitionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to get the eligible tools for # example passing only required values which don't have defaults set try : # Retrieve a list of tools eligible for linking to the bundle. api_response = api_instance . get_tools_eligible_for_linking_to_bundle ( bundle_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->get_tools_eligible_for_linking_to_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleToolApi/#parameters_1","text":"Name Type Description Notes bundle_id str The ID of the bundle to get the eligible tools for","title":"Parameters"},{"location":"v2/docs/BundleToolApi/#return-type_1","text":"CwlToolDefinitionList","title":"Return type"},{"location":"v2/docs/BundleToolApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleToolApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/BundleToolApi/#http-response-details_1","text":"Status code Description Response headers 200 The list of tools is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleToolApi/#link_tool_to_bundle","text":"link_tool_to_bundle(bundle_id, tool_id) Link a tool to a bundle","title":"link_tool_to_bundle"},{"location":"v2/docs/BundleToolApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | The ID of the bundle to link the tool to tool_id = \"toolId_example\" # str | The ID of the tool to link # example passing only required values which don't have defaults set try : # Link a tool to a bundle api_instance . link_tool_to_bundle ( bundle_id , tool_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->link_tool_to_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleToolApi/#parameters_2","text":"Name Type Description Notes bundle_id str The ID of the bundle to link the tool to tool_id str The ID of the tool to link","title":"Parameters"},{"location":"v2/docs/BundleToolApi/#return-type_2","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleToolApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleToolApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleToolApi/#http-response-details_2","text":"Status code Description Response headers 204 The tool is successfully linked to the bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleToolApi/#unlink_tool_from_bundle","text":"unlink_tool_from_bundle(bundle_id, tool_id) Unlink a tool from this bundle.","title":"unlink_tool_from_bundle"},{"location":"v2/docs/BundleToolApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import bundle_tool_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = bundle_tool_api . BundleToolApi ( api_client ) bundle_id = \"bundleId_example\" # str | tool_id = \"toolId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a tool from this bundle. api_instance . unlink_tool_from_bundle ( bundle_id , tool_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling BundleToolApi->unlink_tool_from_bundle: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/BundleToolApi/#parameters_3","text":"Name Type Description Notes bundle_id str tool_id str","title":"Parameters"},{"location":"v2/docs/BundleToolApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/BundleToolApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/BundleToolApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/BundleToolApi/#http-response-details_3","text":"Status code Description Response headers 204 The tool is successfully unlinked from this bundle. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/BundleToolsList/","text":"BundleToolsList \u00b6 Properties \u00b6 Name Type Description Notes items [BundleTool] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"BundleToolsList"},{"location":"v2/docs/BundleToolsList/#bundletoolslist","text":"","title":"BundleToolsList"},{"location":"v2/docs/BundleToolsList/#properties","text":"Name Type Description Notes items [BundleTool] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CWLToolDefinition/","text":"CWLToolDefinition \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str Name of the tool definition status str Status of the tool definition tenant_name str, none_type [optional] description str, none_type Description of the tool definition [optional] version_comment str, none_type version comment of the tool definition [optional] release_version int, none_type release version of the tool definition [optional] links Link [optional] categories [str, none_type], none_type category tags as string array [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CWLToolDefinition"},{"location":"v2/docs/CWLToolDefinition/#cwltooldefinition","text":"","title":"CWLToolDefinition"},{"location":"v2/docs/CWLToolDefinition/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str Name of the tool definition status str Status of the tool definition tenant_name str, none_type [optional] description str, none_type Description of the tool definition [optional] version_comment str, none_type version comment of the tool definition [optional] release_version int, none_type release version of the tool definition [optional] links Link [optional] categories [str, none_type], none_type category tags as string array [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CompleteFolderUploadSession/","text":"CompleteFolderUploadSession \u00b6 Properties \u00b6 Name Type Description Notes number_of_expected_uploaded_files int The number of expected uploaded files within this session. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CompleteFolderUploadSession"},{"location":"v2/docs/CompleteFolderUploadSession/#completefolderuploadsession","text":"","title":"CompleteFolderUploadSession"},{"location":"v2/docs/CompleteFolderUploadSession/#properties","text":"Name Type Description Notes number_of_expected_uploaded_files int The number of expected uploaded files within this session. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Connector/","text":"Connector \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str active bool connected bool Indicates if the connector is connected or not. This is cached so even when the connector is no longer connected, for a short time this still may return true. technical_code str Technical code to be used for processing. mode str The mode the connector runs in. os str The target OS of the original connector installer. installation_status str new_connector_version_available bool tenant_name str, none_type [optional] initialization_key str, none_type The key provided via other channels to initialize the installation. [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Connector"},{"location":"v2/docs/Connector/#connector","text":"","title":"Connector"},{"location":"v2/docs/Connector/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str active bool connected bool Indicates if the connector is connected or not. This is cached so even when the connector is no longer connected, for a short time this still may return true. technical_code str Technical code to be used for processing. mode str The mode the connector runs in. os str The target OS of the original connector installer. installation_status str new_connector_version_available bool tenant_name str, none_type [optional] initialization_key str, none_type The key provided via other channels to initialize the installation. [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ConnectorApi/","text":"libica.openapi.v2.ConnectorApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. create_connector POST /api/connectors Create a connector. create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. get_connector GET /api/connectors/{connectorId} Retrieve a connector. get_connectors GET /api/connectors Retrieve a list of connectors. get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. cancel_connector \u00b6 cancel_connector(connector_id) Cancel a connector. Endpoint for cancelling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Cancel a connector. api_instance . cancel_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->cancel_connector: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The connector is successfully cancelled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_connector \u00b6 Connector create_connector() Create a connector. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_connector import CreateConnector from libica.openapi.v2.model.connector import Connector from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) create_connector = CreateConnector ( code = \"code_example\" , active = True , country_id = \"country_id_example\" , address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , description = \"description_example\" , mode = \"DOWNLOAD\" , max_bandwidth = 0.01 , max_concurrent_transfers = 2 , os = \"WINDOWS\" , ) # CreateConnector | The connector to create. (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a connector. api_response = api_instance . create_connector ( create_connector = create_connector ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_connector: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_connector CreateConnector The connector to create. [optional] Return type \u00b6 Connector Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The connector is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_download_rule \u00b6 DownloadRule create_download_rule(connector_id) Create a download rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_download_rule import CreateDownloadRule from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | create_download_rule = CreateDownloadRule ( code = \"code_example\" , active = True , description = \"description_example\" , sequence = 0 , format_code = \"format_code_example\" , project_name = \"project_name_example\" , target_local_folder = \"target_local_folder_example\" , file_name_expression = \"file_name_expression_example\" , ) # CreateDownloadRule | (optional) # example passing only required values which don't have defaults set try : # Create a download rule. api_response = api_instance . create_download_rule ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_download_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a download rule. api_response = api_instance . create_download_rule ( connector_id , create_download_rule = create_download_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_download_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str create_download_rule CreateDownloadRule [optional] Return type \u00b6 DownloadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The download rule is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_upload_rule \u00b6 UploadRule create_upload_rule(connector_id) Create an upload rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_upload_rule import CreateUploadRule from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | create_upload_rule = CreateUploadRule ( code = \"code_example\" , active = True , description = \"description_example\" , local_folder = \"local_folder_example\" , file_pattern = \"file_pattern_example\" , data_format_id = \"data_format_id_example\" , project_id = \"project_id_example\" , ) # CreateUploadRule | (optional) # example passing only required values which don't have defaults set try : # Create an upload rule. api_response = api_instance . create_upload_rule ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_upload_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create an upload rule. api_response = api_instance . create_upload_rule ( connector_id , create_upload_rule = create_upload_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_upload_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str create_upload_rule CreateUploadRule [optional] Return type \u00b6 UploadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The upload rule is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_download_rule \u00b6 delete_download_rule(connector_id, download_rule_id) Delete a download rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Delete a download rule. api_instance . delete_download_rule ( connector_id , download_rule_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->delete_download_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str download_rule_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The download rule is successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_upload_rule \u00b6 delete_upload_rule(connector_id, upload_rule_id) Delete an upload rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Delete an upload rule. api_instance . delete_upload_rule ( connector_id , upload_rule_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->delete_upload_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str upload_rule_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The upload rule is successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] disable_connector \u00b6 disable_connector(connector_id) Disable a connector. Endpoint for disabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Disable a connector. api_instance . disable_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->disable_connector: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The connector is successfully disabled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] enable_connector \u00b6 enable_connector(connector_id) Enable a connector. Endpoint for enabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Enable a connector. api_instance . enable_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->enable_connector: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The connector is successfully enabled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_connector \u00b6 Connector get_connector(connector_id) Retrieve a connector. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.connector import Connector from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a connector. api_response = api_instance . get_connector ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_connector: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 Connector Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The connector is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_connectors \u00b6 ConnectorList get_connectors() Retrieve a list of connectors. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.connector_list import ConnectorList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) active_only = True # bool | When true only the active connectors will be returned. When false (default value) all connectors wil be returned. (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of connectors. api_response = api_instance . get_connectors ( active_only = active_only ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_connectors: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes active_only bool When true only the active connectors will be returned. When false (default value) all connectors wil be returned. [optional] Return type \u00b6 ConnectorList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of connectors is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_download_rule \u00b6 DownloadRule get_download_rule(connector_id, download_rule_id) Retrieve a download rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a download rule. api_response = api_instance . get_download_rule ( connector_id , download_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_download_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str download_rule_id str Return type \u00b6 DownloadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The download rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_download_rules \u00b6 DownloadRuleList get_download_rules(connector_id) Retrieve a list of download rules. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule_list import DownloadRuleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of download rules. api_response = api_instance . get_download_rules ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_download_rules: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 DownloadRuleList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The download rules are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_upload_rule \u00b6 UploadRule get_upload_rule(connector_id, upload_rule_id) Retrieve an upload rule. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve an upload rule. api_response = api_instance . get_upload_rule ( connector_id , upload_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_upload_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str upload_rule_id str Return type \u00b6 UploadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The upload rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_upload_rules \u00b6 UploadRuleList get_upload_rules(connector_id) Retrieve a list of upload rules. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule_list import UploadRuleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of upload rules. api_response = api_instance . get_upload_rules ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_upload_rules: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str Return type \u00b6 UploadRuleList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The upload rules are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_download_rule \u00b6 DownloadRule update_download_rule(connector_id, download_rule_id) Update a download rule. Fields which can be updated: - code - active - description - sequence - formatCode - projectName - targetLocalFolder - protocol - fileNameExpression - disableHashing Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) download_rule = DownloadRule ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , active = True , description = \"description_example\" , sequence = 0 , format_code = \"format_code_example\" , project_name = \"project_name_example\" , target_local_folder = \"target_local_folder_example\" , file_name_expression = \"file_name_expression_example\" , ) # DownloadRule | (optional) # example passing only required values which don't have defaults set try : # Update a download rule. api_response = api_instance . update_download_rule ( connector_id , download_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_download_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a download rule. api_response = api_instance . update_download_rule ( connector_id , download_rule_id , if_match = if_match , download_rule = download_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_download_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str download_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] download_rule DownloadRule [optional] Return type \u00b6 DownloadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The download rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_upload_rule \u00b6 UploadRule update_upload_rule(connector_id, upload_rule_id) Update an upload rule. Fields which can be updated: - code - active - description - localFolder - filePattern - dataFormat Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) upload_rule = UploadRule ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , active = True , description = \"description_example\" , local_folder = \"local_folder_example\" , file_pattern = \"file_pattern_example\" , data_format = DataFormat ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , description = \"description_example\" , mime_type = \"mime_type_example\" , ), project = Project ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , active = True , short_description = \"short_description_example\" , information = \"information_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle = StorageBundle ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , bundle_name = \"bundle_name_example\" , entitlement_name = \"entitlement_name_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), ), self_managed_storage_configuration = StorageConfiguration ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , type = \"AWS_S3\" , status = \"INITIALIZING\" , error_message = \"error_message_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), is_default = True , ), metadata_model = MetadataModel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , state = \"DRAFT\" , parent_model_id = \"parent_model_id_example\" , ), ), ) # UploadRule | (optional) # example passing only required values which don't have defaults set try : # Update an upload rule. api_response = api_instance . update_upload_rule ( connector_id , upload_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_upload_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update an upload rule. api_response = api_instance . update_upload_rule ( connector_id , upload_rule_id , if_match = if_match , upload_rule = upload_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_upload_rule: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes connector_id str upload_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] upload_rule UploadRule [optional] Return type \u00b6 UploadRule Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The upload rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ConnectorApi"},{"location":"v2/docs/ConnectorApi/#libicaopenapiv2connectorapi","text":"All URIs are relative to /ica/rest Method HTTP request Description cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. create_connector POST /api/connectors Create a connector. create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. get_connector GET /api/connectors/{connectorId} Retrieve a connector. get_connectors GET /api/connectors Retrieve a list of connectors. get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule.","title":"libica.openapi.v2.ConnectorApi"},{"location":"v2/docs/ConnectorApi/#cancel_connector","text":"cancel_connector(connector_id) Cancel a connector. Endpoint for cancelling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"cancel_connector"},{"location":"v2/docs/ConnectorApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Cancel a connector. api_instance . cancel_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->cancel_connector: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details","text":"Status code Description Response headers 204 The connector is successfully cancelled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#create_connector","text":"Connector create_connector() Create a connector.","title":"create_connector"},{"location":"v2/docs/ConnectorApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_connector import CreateConnector from libica.openapi.v2.model.connector import Connector from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) create_connector = CreateConnector ( code = \"code_example\" , active = True , country_id = \"country_id_example\" , address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , description = \"description_example\" , mode = \"DOWNLOAD\" , max_bandwidth = 0.01 , max_concurrent_transfers = 2 , os = \"WINDOWS\" , ) # CreateConnector | The connector to create. (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a connector. api_response = api_instance . create_connector ( create_connector = create_connector ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_connector: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_1","text":"Name Type Description Notes create_connector CreateConnector The connector to create. [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_1","text":"Connector","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_1","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_1","text":"Status code Description Response headers 201 The connector is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#create_download_rule","text":"DownloadRule create_download_rule(connector_id) Create a download rule.","title":"create_download_rule"},{"location":"v2/docs/ConnectorApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_download_rule import CreateDownloadRule from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | create_download_rule = CreateDownloadRule ( code = \"code_example\" , active = True , description = \"description_example\" , sequence = 0 , format_code = \"format_code_example\" , project_name = \"project_name_example\" , target_local_folder = \"target_local_folder_example\" , file_name_expression = \"file_name_expression_example\" , ) # CreateDownloadRule | (optional) # example passing only required values which don't have defaults set try : # Create a download rule. api_response = api_instance . create_download_rule ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_download_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a download rule. api_response = api_instance . create_download_rule ( connector_id , create_download_rule = create_download_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_download_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_2","text":"Name Type Description Notes connector_id str create_download_rule CreateDownloadRule [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_2","text":"DownloadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_2","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_2","text":"Status code Description Response headers 201 The download rule is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#create_upload_rule","text":"UploadRule create_upload_rule(connector_id) Create an upload rule.","title":"create_upload_rule"},{"location":"v2/docs/ConnectorApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.create_upload_rule import CreateUploadRule from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | create_upload_rule = CreateUploadRule ( code = \"code_example\" , active = True , description = \"description_example\" , local_folder = \"local_folder_example\" , file_pattern = \"file_pattern_example\" , data_format_id = \"data_format_id_example\" , project_id = \"project_id_example\" , ) # CreateUploadRule | (optional) # example passing only required values which don't have defaults set try : # Create an upload rule. api_response = api_instance . create_upload_rule ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_upload_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create an upload rule. api_response = api_instance . create_upload_rule ( connector_id , create_upload_rule = create_upload_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->create_upload_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_3","text":"Name Type Description Notes connector_id str create_upload_rule CreateUploadRule [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_3","text":"UploadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_3","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_3","text":"Status code Description Response headers 201 The upload rule is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#delete_download_rule","text":"delete_download_rule(connector_id, download_rule_id) Delete a download rule.","title":"delete_download_rule"},{"location":"v2/docs/ConnectorApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Delete a download rule. api_instance . delete_download_rule ( connector_id , download_rule_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->delete_download_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_4","text":"Name Type Description Notes connector_id str download_rule_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_4","text":"Status code Description Response headers 204 The download rule is successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#delete_upload_rule","text":"delete_upload_rule(connector_id, upload_rule_id) Delete an upload rule.","title":"delete_upload_rule"},{"location":"v2/docs/ConnectorApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Delete an upload rule. api_instance . delete_upload_rule ( connector_id , upload_rule_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->delete_upload_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_5","text":"Name Type Description Notes connector_id str upload_rule_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_5","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_5","text":"Status code Description Response headers 204 The upload rule is successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#disable_connector","text":"disable_connector(connector_id) Disable a connector. Endpoint for disabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"disable_connector"},{"location":"v2/docs/ConnectorApi/#example_6","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Disable a connector. api_instance . disable_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->disable_connector: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_6","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_6","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_6","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_6","text":"Status code Description Response headers 204 The connector is successfully disabled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#enable_connector","text":"enable_connector(connector_id) Enable a connector. Endpoint for enabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"enable_connector"},{"location":"v2/docs/ConnectorApi/#example_7","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Enable a connector. api_instance . enable_connector ( connector_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->enable_connector: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_7","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_7","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_7","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_7","text":"Status code Description Response headers 204 The connector is successfully enabled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_connector","text":"Connector get_connector(connector_id) Retrieve a connector.","title":"get_connector"},{"location":"v2/docs/ConnectorApi/#example_8","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.connector import Connector from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a connector. api_response = api_instance . get_connector ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_connector: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_8","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_8","text":"Connector","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_8","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_8","text":"Status code Description Response headers 200 The connector is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_connectors","text":"ConnectorList get_connectors() Retrieve a list of connectors.","title":"get_connectors"},{"location":"v2/docs/ConnectorApi/#example_9","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.connector_list import ConnectorList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) active_only = True # bool | When true only the active connectors will be returned. When false (default value) all connectors wil be returned. (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of connectors. api_response = api_instance . get_connectors ( active_only = active_only ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_connectors: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_9","text":"Name Type Description Notes active_only bool When true only the active connectors will be returned. When false (default value) all connectors wil be returned. [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_9","text":"ConnectorList","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_9","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_9","text":"Status code Description Response headers 200 The list of connectors is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_download_rule","text":"DownloadRule get_download_rule(connector_id, download_rule_id) Retrieve a download rule.","title":"get_download_rule"},{"location":"v2/docs/ConnectorApi/#example_10","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a download rule. api_response = api_instance . get_download_rule ( connector_id , download_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_download_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_10","text":"Name Type Description Notes connector_id str download_rule_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_10","text":"DownloadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_10","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_10","text":"Status code Description Response headers 200 The download rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_download_rules","text":"DownloadRuleList get_download_rules(connector_id) Retrieve a list of download rules.","title":"get_download_rules"},{"location":"v2/docs/ConnectorApi/#example_11","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule_list import DownloadRuleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of download rules. api_response = api_instance . get_download_rules ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_download_rules: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_11","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_11","text":"DownloadRuleList","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_11","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_11","text":"Status code Description Response headers 200 The download rules are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_upload_rule","text":"UploadRule get_upload_rule(connector_id, upload_rule_id) Retrieve an upload rule.","title":"get_upload_rule"},{"location":"v2/docs/ConnectorApi/#example_12","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve an upload rule. api_response = api_instance . get_upload_rule ( connector_id , upload_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_upload_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_12","text":"Name Type Description Notes connector_id str upload_rule_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_12","text":"UploadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_12","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_12","text":"Status code Description Response headers 200 The upload rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#get_upload_rules","text":"UploadRuleList get_upload_rules(connector_id) Retrieve a list of upload rules.","title":"get_upload_rules"},{"location":"v2/docs/ConnectorApi/#example_13","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule_list import UploadRuleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of upload rules. api_response = api_instance . get_upload_rules ( connector_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->get_upload_rules: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_13","text":"Name Type Description Notes connector_id str","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_13","text":"UploadRuleList","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_13","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_13","text":"Status code Description Response headers 200 The upload rules are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#update_download_rule","text":"DownloadRule update_download_rule(connector_id, download_rule_id) Update a download rule. Fields which can be updated: - code - active - description - sequence - formatCode - projectName - targetLocalFolder - protocol - fileNameExpression - disableHashing","title":"update_download_rule"},{"location":"v2/docs/ConnectorApi/#example_14","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.download_rule import DownloadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | download_rule_id = \"downloadRuleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) download_rule = DownloadRule ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , active = True , description = \"description_example\" , sequence = 0 , format_code = \"format_code_example\" , project_name = \"project_name_example\" , target_local_folder = \"target_local_folder_example\" , file_name_expression = \"file_name_expression_example\" , ) # DownloadRule | (optional) # example passing only required values which don't have defaults set try : # Update a download rule. api_response = api_instance . update_download_rule ( connector_id , download_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_download_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a download rule. api_response = api_instance . update_download_rule ( connector_id , download_rule_id , if_match = if_match , download_rule = download_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_download_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_14","text":"Name Type Description Notes connector_id str download_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] download_rule DownloadRule [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_14","text":"DownloadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_14","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_14","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_14","text":"Status code Description Response headers 200 The download rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorApi/#update_upload_rule","text":"UploadRule update_upload_rule(connector_id, upload_rule_id) Update an upload rule. Fields which can be updated: - code - active - description - localFolder - filePattern - dataFormat","title":"update_upload_rule"},{"location":"v2/docs/ConnectorApi/#example_15","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import connector_api from libica.openapi.v2.model.upload_rule import UploadRule from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = connector_api . ConnectorApi ( api_client ) connector_id = \"connectorId_example\" # str | upload_rule_id = \"uploadRuleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) upload_rule = UploadRule ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , active = True , description = \"description_example\" , local_folder = \"local_folder_example\" , file_pattern = \"file_pattern_example\" , data_format = DataFormat ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , description = \"description_example\" , mime_type = \"mime_type_example\" , ), project = Project ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , active = True , short_description = \"short_description_example\" , information = \"information_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle = StorageBundle ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , bundle_name = \"bundle_name_example\" , entitlement_name = \"entitlement_name_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), ), self_managed_storage_configuration = StorageConfiguration ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , type = \"AWS_S3\" , status = \"INITIALIZING\" , error_message = \"error_message_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), is_default = True , ), metadata_model = MetadataModel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , state = \"DRAFT\" , parent_model_id = \"parent_model_id_example\" , ), ), ) # UploadRule | (optional) # example passing only required values which don't have defaults set try : # Update an upload rule. api_response = api_instance . update_upload_rule ( connector_id , upload_rule_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_upload_rule: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update an upload rule. api_response = api_instance . update_upload_rule ( connector_id , upload_rule_id , if_match = if_match , upload_rule = upload_rule ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ConnectorApi->update_upload_rule: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ConnectorApi/#parameters_15","text":"Name Type Description Notes connector_id str upload_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] upload_rule UploadRule [optional]","title":"Parameters"},{"location":"v2/docs/ConnectorApi/#return-type_15","text":"UploadRule","title":"Return type"},{"location":"v2/docs/ConnectorApi/#authorization_15","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ConnectorApi/#http-request-headers_15","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ConnectorApi/#http-response-details_15","text":"Status code Description Response headers 200 The upload rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ConnectorList/","text":"ConnectorList \u00b6 Properties \u00b6 Name Type Description Notes items [Connector] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ConnectorList"},{"location":"v2/docs/ConnectorList/#connectorlist","text":"","title":"ConnectorList"},{"location":"v2/docs/ConnectorList/#properties","text":"Name Type Description Notes items [Connector] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Country/","text":"Country \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The country code as defined by ISO. name str The full name of the country. region str The region where the country belong to. tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Country"},{"location":"v2/docs/Country/#country","text":"","title":"Country"},{"location":"v2/docs/Country/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The country code as defined by ISO. name str The full name of the country. region str The region where the country belong to. tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateBundle/","text":"CreateBundle \u00b6 Properties \u00b6 Name Type Description Notes name str bundle_release_version str region_id str bundle_status str categories [str] category tags as string array short_description str, none_type [optional] bundle_version_comment str, none_type [optional] metadata_model_id str, none_type [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateBundle"},{"location":"v2/docs/CreateBundle/#createbundle","text":"","title":"CreateBundle"},{"location":"v2/docs/CreateBundle/#properties","text":"Name Type Description Notes name str bundle_release_version str region_id str bundle_status str categories [str] category tags as string array short_description str, none_type [optional] bundle_version_comment str, none_type [optional] metadata_model_id str, none_type [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateConnector/","text":"CreateConnector \u00b6 Properties \u00b6 Name Type Description Notes code str active bool mode str The mode the connector runs in. os str The target OS of the original connector installer. country_id str, none_type ID of the country. If not provided then the country of the tenant will be used. [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] if omitted the server will use the default value of 2 any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateConnector"},{"location":"v2/docs/CreateConnector/#createconnector","text":"","title":"CreateConnector"},{"location":"v2/docs/CreateConnector/#properties","text":"Name Type Description Notes code str active bool mode str The mode the connector runs in. os str The target OS of the original connector installer. country_id str, none_type ID of the country. If not provided then the country of the tenant will be used. [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] if omitted the server will use the default value of 2 any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateCustomEvent/","text":"CreateCustomEvent \u00b6 Properties \u00b6 Name Type Description Notes code str The event code that should match a custom subscription. content {str: (bool, date, datetime, dict, float, int, list, str, none_type)} The content that will be forwarded to the configured custom subscription destinations. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateCustomEvent"},{"location":"v2/docs/CreateCustomEvent/#createcustomevent","text":"","title":"CreateCustomEvent"},{"location":"v2/docs/CreateCustomEvent/#properties","text":"Name Type Description Notes code str The event code that should match a custom subscription. content {str: (bool, date, datetime, dict, float, int, list, str, none_type)} The content that will be forwarded to the configured custom subscription destinations. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateCustomNotificationSubscription/","text":"CreateCustomNotificationSubscription \u00b6 Properties \u00b6 Name Type Description Notes custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The id of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateCustomNotificationSubscription"},{"location":"v2/docs/CreateCustomNotificationSubscription/#createcustomnotificationsubscription","text":"","title":"CreateCustomNotificationSubscription"},{"location":"v2/docs/CreateCustomNotificationSubscription/#properties","text":"Name Type Description Notes custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The id of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateCwlAnalysis/","text":"CreateCwlAnalysis \u00b6 Properties \u00b6 Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input CwlAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateCwlAnalysis"},{"location":"v2/docs/CreateCwlAnalysis/#createcwlanalysis","text":"","title":"CreateCwlAnalysis"},{"location":"v2/docs/CreateCwlAnalysis/#properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input CwlAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateData/","text":"CreateData \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the file/folder as how it will be created. data_type str folder_id str, none_type The id of the folder you want to create this new data in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new data in. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. This is only allowed for file data. If not specified, auto format assignment will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateData"},{"location":"v2/docs/CreateData/#createdata","text":"","title":"CreateData"},{"location":"v2/docs/CreateData/#properties","text":"Name Type Description Notes name str The name of the file/folder as how it will be created. data_type str folder_id str, none_type The id of the folder you want to create this new data in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new data in. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. This is only allowed for file data. If not specified, auto format assignment will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateDownloadRule/","text":"CreateDownloadRule \u00b6 Properties \u00b6 Name Type Description Notes code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to filter which format this rule applies to. [optional] project_name str, none_type Regular expression to filter which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateDownloadRule"},{"location":"v2/docs/CreateDownloadRule/#createdownloadrule","text":"","title":"CreateDownloadRule"},{"location":"v2/docs/CreateDownloadRule/#properties","text":"Name Type Description Notes code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to filter which format this rule applies to. [optional] project_name str, none_type Regular expression to filter which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateNextflowAnalysis/","text":"CreateNextflowAnalysis \u00b6 Properties \u00b6 Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input NextflowAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateNextflowAnalysis"},{"location":"v2/docs/CreateNextflowAnalysis/#createnextflowanalysis","text":"","title":"CreateNextflowAnalysis"},{"location":"v2/docs/CreateNextflowAnalysis/#properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input NextflowAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateNotificationChannel/","text":"CreateNotificationChannel \u00b6 Properties \u00b6 Name Type Description Notes enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateNotificationChannel"},{"location":"v2/docs/CreateNotificationChannel/#createnotificationchannel","text":"","title":"CreateNotificationChannel"},{"location":"v2/docs/CreateNotificationChannel/#properties","text":"Name Type Description Notes enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateNotificationSubscription/","text":"CreateNotificationSubscription \u00b6 Properties \u00b6 Name Type Description Notes event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The ID of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateNotificationSubscription"},{"location":"v2/docs/CreateNotificationSubscription/#createnotificationsubscription","text":"","title":"CreateNotificationSubscription"},{"location":"v2/docs/CreateNotificationSubscription/#properties","text":"Name Type Description Notes event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The ID of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateProject/","text":"CreateProject \u00b6 Properties \u00b6 Name Type Description Notes name str region_id str The region of the project. All data and pipeline executions will reside in this region. billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. storage_bundle_id str short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] project_owner_id str, none_type Owner of the project. Defaults to the current user. [optional] tags ProjectTag [optional] metadata_model_id str, none_type [optional] storage_configuration_id str, none_type An optional storage configuration id to have self managed storage. [optional] storage_configuration_subfolder str, none_type Required when specifying a storageConfigurationId. The subfolder determines the object prefix of your self managed storage. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateProject"},{"location":"v2/docs/CreateProject/#createproject","text":"","title":"CreateProject"},{"location":"v2/docs/CreateProject/#properties","text":"Name Type Description Notes name str region_id str The region of the project. All data and pipeline executions will reside in this region. billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. storage_bundle_id str short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] project_owner_id str, none_type Owner of the project. Defaults to the current user. [optional] tags ProjectTag [optional] metadata_model_id str, none_type [optional] storage_configuration_id str, none_type An optional storage configuration id to have self managed storage. [optional] storage_configuration_subfolder str, none_type Required when specifying a storageConfigurationId. The subfolder determines the object prefix of your self managed storage. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateProjectPermission/","text":"CreateProjectPermission \u00b6 Properties \u00b6 Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not. user_id str, none_type the id of the user that should be given access, required when membershipType is USER [optional] email_address str, none_type The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str, none_type the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateProjectPermission"},{"location":"v2/docs/CreateProjectPermission/#createprojectpermission","text":"","title":"CreateProjectPermission"},{"location":"v2/docs/CreateProjectPermission/#properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not. user_id str, none_type the id of the user that should be given access, required when membershipType is USER [optional] email_address str, none_type The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str, none_type the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateSample/","text":"CreateSample \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the sample. description str, none_type The description of the sample. [optional] tags SampleTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateSample"},{"location":"v2/docs/CreateSample/#createsample","text":"","title":"CreateSample"},{"location":"v2/docs/CreateSample/#properties","text":"Name Type Description Notes name str The name of the sample. description str, none_type The description of the sample. [optional] tags SampleTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateStorageConfiguration/","text":"CreateStorageConfiguration \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the configuration storage_credential_id str The id of the storage credential region_id str The id of the region where the bucket will be located type str The type of configuration defaults to \"AWS_S3\" description str, none_type An optional description [optional] aws_details AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateStorageConfiguration"},{"location":"v2/docs/CreateStorageConfiguration/#createstorageconfiguration","text":"","title":"CreateStorageConfiguration"},{"location":"v2/docs/CreateStorageConfiguration/#properties","text":"Name Type Description Notes name str The name of the configuration storage_credential_id str The id of the storage credential region_id str The id of the region where the bucket will be located type str The type of configuration defaults to \"AWS_S3\" description str, none_type An optional description [optional] aws_details AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateStorageCredential/","text":"CreateStorageCredential \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the credentials type str The type of the credentials defaults to \"AWS_USER\" aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateStorageCredential"},{"location":"v2/docs/CreateStorageCredential/#createstoragecredential","text":"","title":"CreateStorageCredential"},{"location":"v2/docs/CreateStorageCredential/#properties","text":"Name Type Description Notes name str The name of the credentials type str The type of the credentials defaults to \"AWS_USER\" aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateTemporaryCredentials/","text":"CreateTemporaryCredentials \u00b6 Properties \u00b6 Name Type Description Notes credentials_format str, none_type The format in which temporary credentials have to be returned. If not provided, temporary credentials will be returned in a cloud specific format. [optional] if omitted the server will use the default value of \"RCLONE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateTemporaryCredentials"},{"location":"v2/docs/CreateTemporaryCredentials/#createtemporarycredentials","text":"","title":"CreateTemporaryCredentials"},{"location":"v2/docs/CreateTemporaryCredentials/#properties","text":"Name Type Description Notes credentials_format str, none_type The format in which temporary credentials have to be returned. If not provided, temporary credentials will be returned in a cloud specific format. [optional] if omitted the server will use the default value of \"RCLONE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CreateUploadRule/","text":"CreateUploadRule \u00b6 Properties \u00b6 Name Type Description Notes code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project_id str The project to which the data will be uploaded. active bool, none_type [optional] description str, none_type [optional] data_format_id str, none_type The format which will be assigned to the uploaded data. If not specified, an auto-detection of the format will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CreateUploadRule"},{"location":"v2/docs/CreateUploadRule/#createuploadrule","text":"","title":"CreateUploadRule"},{"location":"v2/docs/CreateUploadRule/#properties","text":"Name Type Description Notes code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project_id str The project to which the data will be uploaded. active bool, none_type [optional] description str, none_type [optional] data_format_id str, none_type The format which will be assigned to the uploaded data. If not specified, an auto-detection of the format will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CustomNotificationSubscription/","text":"CustomNotificationSubscription \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CustomNotificationSubscription"},{"location":"v2/docs/CustomNotificationSubscription/#customnotificationsubscription","text":"","title":"CustomNotificationSubscription"},{"location":"v2/docs/CustomNotificationSubscription/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CustomNotificationSubscriptionList/","text":"CustomNotificationSubscriptionList \u00b6 Properties \u00b6 Name Type Description Notes items [CustomNotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CustomNotificationSubscriptionList"},{"location":"v2/docs/CustomNotificationSubscriptionList/#customnotificationsubscriptionlist","text":"","title":"CustomNotificationSubscriptionList"},{"location":"v2/docs/CustomNotificationSubscriptionList/#properties","text":"Name Type Description Notes items [CustomNotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CwlAnalysisInput/","text":"CwlAnalysisInput \u00b6 This object contains a \\\"oneOf\\\" construct. With the \\\"objectType\\\" attribute you can specify which object type you want to provide. Use \\\"STRUCTURED\\\" for type \\\"CreateAnalysisStructuredInput\\\" or use \\\"JSON\\\" for type \\\"CreateAnalysisJsonInput\\\". Properties \u00b6 Name Type Description Notes object_type str parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] data_ids [str, none_type], none_type [optional] inputs [AnalysisDataInput] [optional] input_json str Contains the input JSON, as an escaped JSON String. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CwlAnalysisInput"},{"location":"v2/docs/CwlAnalysisInput/#cwlanalysisinput","text":"This object contains a \\\"oneOf\\\" construct. With the \\\"objectType\\\" attribute you can specify which object type you want to provide. Use \\\"STRUCTURED\\\" for type \\\"CreateAnalysisStructuredInput\\\" or use \\\"JSON\\\" for type \\\"CreateAnalysisJsonInput\\\".","title":"CwlAnalysisInput"},{"location":"v2/docs/CwlAnalysisInput/#properties","text":"Name Type Description Notes object_type str parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] data_ids [str, none_type], none_type [optional] inputs [AnalysisDataInput] [optional] input_json str Contains the input JSON, as an escaped JSON String. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CwlAnalysisJsonInput/","text":"CwlAnalysisJsonInput \u00b6 Properties \u00b6 Name Type Description Notes object_type str input_json str Contains the input JSON, as an escaped JSON String. data_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CwlAnalysisJsonInput"},{"location":"v2/docs/CwlAnalysisJsonInput/#cwlanalysisjsoninput","text":"","title":"CwlAnalysisJsonInput"},{"location":"v2/docs/CwlAnalysisJsonInput/#properties","text":"Name Type Description Notes object_type str input_json str Contains the input JSON, as an escaped JSON String. data_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CwlAnalysisStructuredInput/","text":"CwlAnalysisStructuredInput \u00b6 Properties \u00b6 Name Type Description Notes object_type str inputs [AnalysisDataInput] parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CwlAnalysisStructuredInput"},{"location":"v2/docs/CwlAnalysisStructuredInput/#cwlanalysisstructuredinput","text":"","title":"CwlAnalysisStructuredInput"},{"location":"v2/docs/CwlAnalysisStructuredInput/#properties","text":"Name Type Description Notes object_type str inputs [AnalysisDataInput] parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/CwlToolDefinitionList/","text":"CwlToolDefinitionList \u00b6 Properties \u00b6 Name Type Description Notes items [CWLToolDefinition] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"CwlToolDefinitionList"},{"location":"v2/docs/CwlToolDefinitionList/#cwltooldefinitionlist","text":"","title":"CwlToolDefinitionList"},{"location":"v2/docs/CwlToolDefinitionList/#properties","text":"Name Type Description Notes items [CWLToolDefinition] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Data/","text":"Data \u00b6 Properties \u00b6 Name Type Description Notes id str The id of the file/folder as it was uploaded. details DataDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Data"},{"location":"v2/docs/Data/#data","text":"","title":"Data"},{"location":"v2/docs/Data/#properties","text":"Name Type Description Notes id str The id of the file/folder as it was uploaded. details DataDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataDetails/","text":"DataDetails \u00b6 The details of this data. This object is optional because it is possible that these details are deleted. Properties \u00b6 Name Type Description Notes time_created datetime time_modified datetime tenant_id str owning_project_id str name str The name of the file/folder as it was uploaded. status str tags DataTag data_type str tenant_name str, none_type [optional] path str, none_type The user friendly path of the parent of this data. [optional] file_size_in_bytes int, none_type The size of the file in bytes. Folders do not have a size. [optional] format DataFormat [optional] object_e_tag str, none_type The file's ETag, as received from the cloud provider. Not to be confused with the ETag reponse header of this API. [optional] stored_for_the_first_time_at datetime, none_type Specifies when the data object was stored for the first time [optional] region Region [optional] will_be_archived_at datetime, none_type Specifies when the data object will be archived. [optional] will_be_deleted_at datetime, none_type Specifies when the data object will be deleted. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataDetails"},{"location":"v2/docs/DataDetails/#datadetails","text":"The details of this data. This object is optional because it is possible that these details are deleted.","title":"DataDetails"},{"location":"v2/docs/DataDetails/#properties","text":"Name Type Description Notes time_created datetime time_modified datetime tenant_id str owning_project_id str name str The name of the file/folder as it was uploaded. status str tags DataTag data_type str tenant_name str, none_type [optional] path str, none_type The user friendly path of the parent of this data. [optional] file_size_in_bytes int, none_type The size of the file in bytes. Folders do not have a size. [optional] format DataFormat [optional] object_e_tag str, none_type The file's ETag, as received from the cloud provider. Not to be confused with the ETag reponse header of this API. [optional] stored_for_the_first_time_at datetime, none_type Specifies when the data object was stored for the first time [optional] region Region [optional] will_be_archived_at datetime, none_type Specifies when the data object will be archived. [optional] will_be_deleted_at datetime, none_type Specifies when the data object will be deleted. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataFormat/","text":"DataFormat \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the format. For example: FASTQ, BAM, ... tenant_name str, none_type [optional] description str, none_type [optional] mime_type str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFormat"},{"location":"v2/docs/DataFormat/#dataformat","text":"","title":"DataFormat"},{"location":"v2/docs/DataFormat/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the format. For example: FASTQ, BAM, ... tenant_name str, none_type [optional] description str, none_type [optional] mime_type str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataFormatApi/","text":"libica.openapi.v2.DataFormatApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_data_formats GET /api/dataFormats Retrieve a list of data formats. get_data_formats \u00b6 DataFormatPagedList get_data_formats() Retrieve a list of data formats. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import data_format_api from libica.openapi.v2.model.data_format_paged_list import DataFormatPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = data_format_api . DataFormatApi ( api_client ) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data formats. api_response = api_instance . get_data_formats ( page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling DataFormatApi->get_data_formats: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional] Return type \u00b6 DataFormatPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of data formats is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.DataFormatApi"},{"location":"v2/docs/DataFormatApi/#libicaopenapiv2dataformatapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_data_formats GET /api/dataFormats Retrieve a list of data formats.","title":"libica.openapi.v2.DataFormatApi"},{"location":"v2/docs/DataFormatApi/#get_data_formats","text":"DataFormatPagedList get_data_formats() Retrieve a list of data formats.","title":"get_data_formats"},{"location":"v2/docs/DataFormatApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import data_format_api from libica.openapi.v2.model.data_format_paged_list import DataFormatPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = data_format_api . DataFormatApi ( api_client ) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data formats. api_response = api_instance . get_data_formats ( page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling DataFormatApi->get_data_formats: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/DataFormatApi/#parameters","text":"Name Type Description Notes page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]","title":"Parameters"},{"location":"v2/docs/DataFormatApi/#return-type","text":"DataFormatPagedList","title":"Return type"},{"location":"v2/docs/DataFormatApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/DataFormatApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/DataFormatApi/#http-response-details","text":"Status code Description Response headers 200 The list of data formats is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/DataFormatPagedList/","text":"DataFormatPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [DataFormat] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataFormatPagedList"},{"location":"v2/docs/DataFormatPagedList/#dataformatpagedlist","text":"","title":"DataFormatPagedList"},{"location":"v2/docs/DataFormatPagedList/#properties","text":"Name Type Description Notes items [DataFormat] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataList/","text":"DataList \u00b6 Properties \u00b6 Name Type Description Notes items [Data] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataList"},{"location":"v2/docs/DataList/#datalist","text":"","title":"DataList"},{"location":"v2/docs/DataList/#properties","text":"Name Type Description Notes items [Data] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataPagedList/","text":"DataPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [Data] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataPagedList"},{"location":"v2/docs/DataPagedList/#datapagedlist","text":"","title":"DataPagedList"},{"location":"v2/docs/DataPagedList/#properties","text":"Name Type Description Notes items [Data] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataTag/","text":"DataTag \u00b6 Properties \u00b6 Name Type Description Notes technical_tags [str] [optional] user_tags [str] [optional] connector_tags [str] [optional] run_in_tags [str] [optional] run_out_tags [str] [optional] reference_tags [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataTag"},{"location":"v2/docs/DataTag/#datatag","text":"","title":"DataTag"},{"location":"v2/docs/DataTag/#properties","text":"Name Type Description Notes technical_tags [str] [optional] user_tags [str] [optional] connector_tags [str] [optional] run_in_tags [str] [optional] run_out_tags [str] [optional] reference_tags [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataTransfer/","text":"DataTransfer \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str direction str data_transferred int The data transferred so far in bytes. status str data Data tenant_name str, none_type [optional] connector Connector [optional] protocol str, none_type [optional] if omitted the server will use the default value of \"HTTPS\" status_message str, none_type A message explaining the reason why the transfer is in the current status. [optional] duration int, none_type The overall duration of of the transfer defined in seconds. [optional] project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataTransfer"},{"location":"v2/docs/DataTransfer/#datatransfer","text":"","title":"DataTransfer"},{"location":"v2/docs/DataTransfer/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str direction str data_transferred int The data transferred so far in bytes. status str data Data tenant_name str, none_type [optional] connector Connector [optional] protocol str, none_type [optional] if omitted the server will use the default value of \"HTTPS\" status_message str, none_type A message explaining the reason why the transfer is in the current status. [optional] duration int, none_type The overall duration of of the transfer defined in seconds. [optional] project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DataTransfers/","text":"DataTransfers \u00b6 Properties \u00b6 Name Type Description Notes data_transfers [DataTransfer] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DataTransfers"},{"location":"v2/docs/DataTransfers/#datatransfers","text":"","title":"DataTransfers"},{"location":"v2/docs/DataTransfers/#properties","text":"Name Type Description Notes data_transfers [DataTransfer] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Download/","text":"Download \u00b6 Properties \u00b6 Name Type Description Notes url str A pre-signed url which is temporarily available for downloading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Download"},{"location":"v2/docs/Download/#download","text":"","title":"Download"},{"location":"v2/docs/Download/#properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for downloading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DownloadRule/","text":"DownloadRule \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to select which format this rule applies to. [optional] project_name str, none_type Regular expression to select which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DownloadRule"},{"location":"v2/docs/DownloadRule/#downloadrule","text":"","title":"DownloadRule"},{"location":"v2/docs/DownloadRule/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to select which format this rule applies to. [optional] project_name str, none_type Regular expression to select which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/DownloadRuleList/","text":"DownloadRuleList \u00b6 Properties \u00b6 Name Type Description Notes items [DownloadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"DownloadRuleList"},{"location":"v2/docs/DownloadRuleList/#downloadrulelist","text":"","title":"DownloadRuleList"},{"location":"v2/docs/DownloadRuleList/#properties","text":"Name Type Description Notes items [DownloadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/EntitlementDetailApi/","text":"libica.openapi.v2.EntitlementDetailApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. find_all_matching_activation_codes_for_cwl \u00b6 ActivationCodeDetailList find_all_matching_activation_codes_for_cwl() Search all matching activation code details for a Cwl pipeline. Endpoint for searching all matching activation code details for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList from libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = CwlAnalysisInput (), ) # SearchMatchingActivationCodesForCwlAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search all matching activation code details for a Cwl pipeline. api_response = api_instance . find_all_matching_activation_codes_for_cwl ( search_matching_activation_codes_for_cwl_analysis = search_matching_activation_codes_for_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_all_matching_activation_codes_for_cwl: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional] Return type \u00b6 ActivationCodeDetailList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] find_all_matching_activation_codes_for_nextflow \u00b6 ActivationCodeDetailList find_all_matching_activation_codes_for_nextflow() Search all matching activation code details for a Nextflow pipeline. Endpoint for searching all matching activation code details for a project and an analysis from a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList from libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # SearchMatchingActivationCodesForNextflowAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search all matching activation code details for a Nextflow pipeline. api_response = api_instance . find_all_matching_activation_codes_for_nextflow ( search_matching_activation_codes_for_nextflow_analysis = search_matching_activation_codes_for_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_all_matching_activation_codes_for_nextflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional] Return type \u00b6 ActivationCodeDetailList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] find_best_matching_activation_code_for_cwl \u00b6 ActivationCodeDetail find_best_matching_activation_code_for_cwl() Search the best matching activation code detail for Cwl pipeline. Endpoint for searching the best activation code detail for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis from libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = CwlAnalysisInput (), ) # SearchMatchingActivationCodesForCwlAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search the best matching activation code detail for Cwl pipeline. api_response = api_instance . find_best_matching_activation_code_for_cwl ( search_matching_activation_codes_for_cwl_analysis = search_matching_activation_codes_for_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_best_matching_activation_code_for_cwl: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional] Return type \u00b6 ActivationCodeDetail Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] find_best_matching_activation_codes_for_nextflow \u00b6 ActivationCodeDetail find_best_matching_activation_codes_for_nextflow() Search the best matching activation code details for Nextflow pipeline. Endpoint for searching the best activation code details for a project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail from libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # SearchMatchingActivationCodesForNextflowAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search the best matching activation code details for Nextflow pipeline. api_response = api_instance . find_best_matching_activation_codes_for_nextflow ( search_matching_activation_codes_for_nextflow_analysis = search_matching_activation_codes_for_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_best_matching_activation_codes_for_nextflow: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional] Return type \u00b6 ActivationCodeDetail Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.EntitlementDetailApi"},{"location":"v2/docs/EntitlementDetailApi/#libicaopenapiv2entitlementdetailapi","text":"All URIs are relative to /ica/rest Method HTTP request Description find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline.","title":"libica.openapi.v2.EntitlementDetailApi"},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_cwl","text":"ActivationCodeDetailList find_all_matching_activation_codes_for_cwl() Search all matching activation code details for a Cwl pipeline. Endpoint for searching all matching activation code details for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"find_all_matching_activation_codes_for_cwl"},{"location":"v2/docs/EntitlementDetailApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList from libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = CwlAnalysisInput (), ) # SearchMatchingActivationCodesForCwlAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search all matching activation code details for a Cwl pipeline. api_response = api_instance . find_all_matching_activation_codes_for_cwl ( search_matching_activation_codes_for_cwl_analysis = search_matching_activation_codes_for_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_all_matching_activation_codes_for_cwl: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EntitlementDetailApi/#parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional]","title":"Parameters"},{"location":"v2/docs/EntitlementDetailApi/#return-type","text":"ActivationCodeDetailList","title":"Return type"},{"location":"v2/docs/EntitlementDetailApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_nextflow","text":"ActivationCodeDetailList find_all_matching_activation_codes_for_nextflow() Search all matching activation code details for a Nextflow pipeline. Endpoint for searching all matching activation code details for a project and an analysis from a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"find_all_matching_activation_codes_for_nextflow"},{"location":"v2/docs/EntitlementDetailApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList from libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # SearchMatchingActivationCodesForNextflowAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search all matching activation code details for a Nextflow pipeline. api_response = api_instance . find_all_matching_activation_codes_for_nextflow ( search_matching_activation_codes_for_nextflow_analysis = search_matching_activation_codes_for_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_all_matching_activation_codes_for_nextflow: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EntitlementDetailApi/#parameters_1","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional]","title":"Parameters"},{"location":"v2/docs/EntitlementDetailApi/#return-type_1","text":"ActivationCodeDetailList","title":"Return type"},{"location":"v2/docs/EntitlementDetailApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_1","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_1","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_code_for_cwl","text":"ActivationCodeDetail find_best_matching_activation_code_for_cwl() Search the best matching activation code detail for Cwl pipeline. Endpoint for searching the best activation code detail for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"find_best_matching_activation_code_for_cwl"},{"location":"v2/docs/EntitlementDetailApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis from libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = CwlAnalysisInput (), ) # SearchMatchingActivationCodesForCwlAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search the best matching activation code detail for Cwl pipeline. api_response = api_instance . find_best_matching_activation_code_for_cwl ( search_matching_activation_codes_for_cwl_analysis = search_matching_activation_codes_for_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_best_matching_activation_code_for_cwl: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EntitlementDetailApi/#parameters_2","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional]","title":"Parameters"},{"location":"v2/docs/EntitlementDetailApi/#return-type_2","text":"ActivationCodeDetail","title":"Return type"},{"location":"v2/docs/EntitlementDetailApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_2","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_2","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_codes_for_nextflow","text":"ActivationCodeDetail find_best_matching_activation_codes_for_nextflow() Search the best matching activation code details for Nextflow pipeline. Endpoint for searching the best activation code details for a project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"find_best_matching_activation_codes_for_nextflow"},{"location":"v2/docs/EntitlementDetailApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import entitlement_detail_api from libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail from libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = entitlement_detail_api . EntitlementDetailApi ( api_client ) search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis ( project_id = \"project_id_example\" , pipeline_id = \"pipeline_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # SearchMatchingActivationCodesForNextflowAnalysis | (optional) # example passing only required values which don't have defaults set # and optional values try : # Search the best matching activation code details for Nextflow pipeline. api_response = api_instance . find_best_matching_activation_codes_for_nextflow ( search_matching_activation_codes_for_nextflow_analysis = search_matching_activation_codes_for_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EntitlementDetailApi->find_best_matching_activation_codes_for_nextflow: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EntitlementDetailApi/#parameters_3","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional]","title":"Parameters"},{"location":"v2/docs/EntitlementDetailApi/#return-type_3","text":"ActivationCodeDetail","title":"Return type"},{"location":"v2/docs/EntitlementDetailApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_3","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_3","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EventCode/","text":"EventCode \u00b6 Properties \u00b6 Name Type Description Notes event_code str The event code that can be used for creating event subscriptions description str A short description about the event code any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"EventCode"},{"location":"v2/docs/EventCode/#eventcode","text":"","title":"EventCode"},{"location":"v2/docs/EventCode/#properties","text":"Name Type Description Notes event_code str The event code that can be used for creating event subscriptions description str A short description about the event code any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/EventCodeApi/","text":"libica.openapi.v2.EventCodeApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_event_codes GET /api/eventCodes Retrieve event codes get_event_codes \u00b6 EventCodeList get_event_codes() Retrieve event codes Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import event_code_api from libica.openapi.v2.model.event_code_list import EventCodeList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = event_code_api . EventCodeApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve event codes api_response = api_instance . get_event_codes () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EventCodeApi->get_event_codes: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 EventCodeList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The event codes are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.EventCodeApi"},{"location":"v2/docs/EventCodeApi/#libicaopenapiv2eventcodeapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_event_codes GET /api/eventCodes Retrieve event codes","title":"libica.openapi.v2.EventCodeApi"},{"location":"v2/docs/EventCodeApi/#get_event_codes","text":"EventCodeList get_event_codes() Retrieve event codes","title":"get_event_codes"},{"location":"v2/docs/EventCodeApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import event_code_api from libica.openapi.v2.model.event_code_list import EventCodeList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = event_code_api . EventCodeApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve event codes api_response = api_instance . get_event_codes () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EventCodeApi->get_event_codes: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EventCodeApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/EventCodeApi/#return-type","text":"EventCodeList","title":"Return type"},{"location":"v2/docs/EventCodeApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EventCodeApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EventCodeApi/#http-response-details","text":"Status code Description Response headers 200 The event codes are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EventCodeList/","text":"EventCodeList \u00b6 Properties \u00b6 Name Type Description Notes items [EventCode] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"EventCodeList"},{"location":"v2/docs/EventCodeList/#eventcodelist","text":"","title":"EventCodeList"},{"location":"v2/docs/EventCodeList/#properties","text":"Name Type Description Notes items [EventCode] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/EventLog/","text":"EventLog \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the event description str The details of the event event_type_category str The type of the event user_id str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"EventLog"},{"location":"v2/docs/EventLog/#eventlog","text":"","title":"EventLog"},{"location":"v2/docs/EventLog/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the event description str The details of the event event_type_category str The type of the event user_id str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/EventLogApi/","text":"libica.openapi.v2.EventLogApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_event_logs GET /api/eventLog Retrieve a list of event logs. get_event_logs \u00b6 EventLogList get_event_logs() Retrieve a list of event logs. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import event_log_api from libica.openapi.v2.model.event_log_list import EventLogList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = event_log_api . EventLogApi ( api_client ) code = \"code_example\" # str | Code (optional) code_filter_type = \"STARTS_WITH\" # str | Code filter type (optional) category = \"ERROR\" # str | Category (optional) date_from = \"dateFrom_example\" # str | Date from (optional) date_until = \"dateUntil_example\" # str | Date until (optional) rows = 250 # int | Amount of rows to fetch. Maximum 250. Defaults to 250 (optional) if omitted the server will use the default value of 250 # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of event logs. api_response = api_instance . get_event_logs ( code = code , code_filter_type = code_filter_type , category = category , date_from = date_from , date_until = date_until , rows = rows ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EventLogApi->get_event_logs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes code str Code [optional] code_filter_type str Code filter type [optional] category str Category [optional] date_from str Date from [optional] date_until str Date until [optional] rows int Amount of rows to fetch. Maximum 250. Defaults to 250 [optional] if omitted the server will use the default value of 250 Return type \u00b6 EventLogList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.EventLogApi"},{"location":"v2/docs/EventLogApi/#libicaopenapiv2eventlogapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_event_logs GET /api/eventLog Retrieve a list of event logs.","title":"libica.openapi.v2.EventLogApi"},{"location":"v2/docs/EventLogApi/#get_event_logs","text":"EventLogList get_event_logs() Retrieve a list of event logs.","title":"get_event_logs"},{"location":"v2/docs/EventLogApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import event_log_api from libica.openapi.v2.model.event_log_list import EventLogList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = event_log_api . EventLogApi ( api_client ) code = \"code_example\" # str | Code (optional) code_filter_type = \"STARTS_WITH\" # str | Code filter type (optional) category = \"ERROR\" # str | Category (optional) date_from = \"dateFrom_example\" # str | Date from (optional) date_until = \"dateUntil_example\" # str | Date until (optional) rows = 250 # int | Amount of rows to fetch. Maximum 250. Defaults to 250 (optional) if omitted the server will use the default value of 250 # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of event logs. api_response = api_instance . get_event_logs ( code = code , code_filter_type = code_filter_type , category = category , date_from = date_from , date_until = date_until , rows = rows ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling EventLogApi->get_event_logs: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/EventLogApi/#parameters","text":"Name Type Description Notes code str Code [optional] code_filter_type str Code filter type [optional] category str Category [optional] date_from str Date from [optional] date_until str Date until [optional] rows int Amount of rows to fetch. Maximum 250. Defaults to 250 [optional] if omitted the server will use the default value of 250","title":"Parameters"},{"location":"v2/docs/EventLogApi/#return-type","text":"EventLogList","title":"Return type"},{"location":"v2/docs/EventLogApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/EventLogApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/EventLogApi/#http-response-details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/EventLogList/","text":"EventLogList \u00b6 Properties \u00b6 Name Type Description Notes items [EventLog] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"EventLogList"},{"location":"v2/docs/EventLogList/#eventloglist","text":"","title":"EventLogList"},{"location":"v2/docs/EventLogList/#properties","text":"Name Type Description Notes items [EventLog] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ExecutionConfiguration/","text":"ExecutionConfiguration \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values [str] The configuration values any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ExecutionConfiguration"},{"location":"v2/docs/ExecutionConfiguration/#executionconfiguration","text":"","title":"ExecutionConfiguration"},{"location":"v2/docs/ExecutionConfiguration/#properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values [str] The configuration values any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ExecutionConfigurationList/","text":"ExecutionConfigurationList \u00b6 Properties \u00b6 Name Type Description Notes items [ExecutionConfiguration] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ExecutionConfigurationList"},{"location":"v2/docs/ExecutionConfigurationList/#executionconfigurationlist","text":"","title":"ExecutionConfigurationList"},{"location":"v2/docs/ExecutionConfigurationList/#properties","text":"Name Type Description Notes items [ExecutionConfiguration] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Field/","text":"Field \u00b6 Properties \u00b6 Name Type Description Notes id str name str [optional] description str [optional] field_type str [optional] required bool [optional] multivalued bool [optional] filled_by_pipeline bool [optional] fields [Field] [optional] enumeration_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Field"},{"location":"v2/docs/Field/#field","text":"","title":"Field"},{"location":"v2/docs/Field/#properties","text":"Name Type Description Notes id str name str [optional] description str [optional] field_type str [optional] required bool [optional] multivalued bool [optional] filled_by_pipeline bool [optional] fields [Field] [optional] enumeration_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FieldId/","text":"FieldId \u00b6 The field ID to be updated. Either the field ID or field name is required. Properties \u00b6 Name Type Description Notes id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FieldId"},{"location":"v2/docs/FieldId/#fieldid","text":"The field ID to be updated. Either the field ID or field name is required.","title":"FieldId"},{"location":"v2/docs/FieldId/#properties","text":"Name Type Description Notes id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FieldList/","text":"FieldList \u00b6 Properties \u00b6 Name Type Description Notes items [Field] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FieldList"},{"location":"v2/docs/FieldList/#fieldlist","text":"","title":"FieldList"},{"location":"v2/docs/FieldList/#properties","text":"Name Type Description Notes items [Field] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FindProjectSamples/","text":"FindProjectSamples \u00b6 Properties \u00b6 Name Type Description Notes conditions [FindSampleCondition] Adds a condition on a string field. date_conditions [FindSampleDateCondition] Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. number_conditions [FindSampleNumberCondition] Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. boolean_conditions [FindSampleBooleanCondition] Adds a condition on a boolean field. full_text_search_string str, none_type Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field. [optional] include_deleted bool, none_type Indicates whether deleted samples should be included. [optional] if omitted the server will use the default value of False user_tags [str, none_type], none_type The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str, none_type How the usertags are filtered. [optional] run_input_tags [str, none_type], none_type The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str, none_type How the runInputTags are filtered. [optional] connector_tags [str, none_type], none_type The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str, none_type How the connectorTags are filtered. [optional] tech_tags [str, none_type], none_type The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] tech_tag_match_mode str, none_type How the technicalTags are filtered. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FindProjectSamples"},{"location":"v2/docs/FindProjectSamples/#findprojectsamples","text":"","title":"FindProjectSamples"},{"location":"v2/docs/FindProjectSamples/#properties","text":"Name Type Description Notes conditions [FindSampleCondition] Adds a condition on a string field. date_conditions [FindSampleDateCondition] Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. number_conditions [FindSampleNumberCondition] Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. boolean_conditions [FindSampleBooleanCondition] Adds a condition on a boolean field. full_text_search_string str, none_type Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field. [optional] include_deleted bool, none_type Indicates whether deleted samples should be included. [optional] if omitted the server will use the default value of False user_tags [str, none_type], none_type The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str, none_type How the usertags are filtered. [optional] run_input_tags [str, none_type], none_type The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str, none_type How the runInputTags are filtered. [optional] connector_tags [str, none_type], none_type The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str, none_type How the connectorTags are filtered. [optional] tech_tags [str, none_type], none_type The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] tech_tag_match_mode str, none_type How the technicalTags are filtered. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FindSampleBooleanCondition/","text":"FindSampleBooleanCondition \u00b6 Adds a condition on a boolean field. Properties \u00b6 Name Type Description Notes metadata_field Field [optional] field str, none_type [optional] value str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FindSampleBooleanCondition"},{"location":"v2/docs/FindSampleBooleanCondition/#findsamplebooleancondition","text":"Adds a condition on a boolean field.","title":"FindSampleBooleanCondition"},{"location":"v2/docs/FindSampleBooleanCondition/#properties","text":"Name Type Description Notes metadata_field Field [optional] field str, none_type [optional] value str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FindSampleCondition/","text":"FindSampleCondition \u00b6 Adds a condition on a string field. Properties \u00b6 Name Type Description Notes values [str] metadata_field FieldId [optional] field str, none_type [optional] match_mode str, none_type Defines how the value will be matched. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FindSampleCondition"},{"location":"v2/docs/FindSampleCondition/#findsamplecondition","text":"Adds a condition on a string field.","title":"FindSampleCondition"},{"location":"v2/docs/FindSampleCondition/#properties","text":"Name Type Description Notes values [str] metadata_field FieldId [optional] field str, none_type [optional] match_mode str, none_type Defines how the value will be matched. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FindSampleDateCondition/","text":"FindSampleDateCondition \u00b6 Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. Properties \u00b6 Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] before_date str, none_type [optional] after_date str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FindSampleDateCondition"},{"location":"v2/docs/FindSampleDateCondition/#findsampledatecondition","text":"Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field.","title":"FindSampleDateCondition"},{"location":"v2/docs/FindSampleDateCondition/#properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] before_date str, none_type [optional] after_date str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FindSampleNumberCondition/","text":"FindSampleNumberCondition \u00b6 Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. Properties \u00b6 Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] lower_bound str, none_type [optional] upper_bound str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FindSampleNumberCondition"},{"location":"v2/docs/FindSampleNumberCondition/#findsamplenumbercondition","text":"Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field.","title":"FindSampleNumberCondition"},{"location":"v2/docs/FindSampleNumberCondition/#properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] lower_bound str, none_type [optional] upper_bound str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/FolderUploadSession/","text":"FolderUploadSession \u00b6 Properties \u00b6 Name Type Description Notes id str The id of the folder upload session. time_created datetime The time the folder upload session was created. status str The status of the folder upload session. time_session_expires datetime The time the folder upload session will expire as it is only temporarily valid. time_completed datetime, none_type The time the folder upload session completed. [optional] time_closed datetime, none_type The time the folder upload session was closed. [optional] temp_credentials TempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"FolderUploadSession"},{"location":"v2/docs/FolderUploadSession/#folderuploadsession","text":"","title":"FolderUploadSession"},{"location":"v2/docs/FolderUploadSession/#properties","text":"Name Type Description Notes id str The id of the folder upload session. time_created datetime The time the folder upload session was created. status str The status of the folder upload session. time_session_expires datetime The time the folder upload session will expire as it is only temporarily valid. time_completed datetime, none_type The time the folder upload session completed. [optional] time_closed datetime, none_type The time the folder upload session was closed. [optional] temp_credentials TempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/InlineView/","text":"InlineView \u00b6 Properties \u00b6 Name Type Description Notes url str A pre-signed url which is temporarily available for inline viewing the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InlineView"},{"location":"v2/docs/InlineView/#inlineview","text":"","title":"InlineView"},{"location":"v2/docs/InlineView/#properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for inline viewing the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/InputParameter/","text":"InputParameter \u00b6 Properties \u00b6 Name Type Description Notes id str The ID of the parameter code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InputParameter"},{"location":"v2/docs/InputParameter/#inputparameter","text":"","title":"InputParameter"},{"location":"v2/docs/InputParameter/#properties","text":"Name Type Description Notes id str The ID of the parameter code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/InputParameterList/","text":"InputParameterList \u00b6 Properties \u00b6 Name Type Description Notes items [InputParameter] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InputParameterList"},{"location":"v2/docs/InputParameterList/#inputparameterlist","text":"","title":"InputParameterList"},{"location":"v2/docs/InputParameterList/#properties","text":"Name Type Description Notes items [InputParameter] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/InputPart/","text":"InputPart \u00b6 Properties \u00b6 Name Type Description Notes content_type_from_message bool [optional] media_type InputPartMediaType [optional] body_as_string str [optional] headers {str: ([str],)} [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InputPart"},{"location":"v2/docs/InputPart/#inputpart","text":"","title":"InputPart"},{"location":"v2/docs/InputPart/#properties","text":"Name Type Description Notes content_type_from_message bool [optional] media_type InputPartMediaType [optional] body_as_string str [optional] headers {str: ([str],)} [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/InputPartMediaType/","text":"InputPartMediaType \u00b6 Properties \u00b6 Name Type Description Notes type str [optional] subtype str [optional] parameters {str: (str,)} [optional] wildcard_type bool [optional] wildcard_subtype bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"InputPartMediaType"},{"location":"v2/docs/InputPartMediaType/#inputpartmediatype","text":"","title":"InputPartMediaType"},{"location":"v2/docs/InputPartMediaType/#properties","text":"Name Type Description Notes type str [optional] subtype str [optional] parameters {str: (str,)} [optional] wildcard_type bool [optional] wildcard_subtype bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Link/","text":"Link \u00b6 Properties \u00b6 Name Type Description Notes name str The name of the link url str The url of the link any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Link"},{"location":"v2/docs/Link/#link","text":"","title":"Link"},{"location":"v2/docs/Link/#properties","text":"Name Type Description Notes name str The name of the link url str The url of the link any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Links/","text":"Links \u00b6 Properties \u00b6 Name Type Description Notes links [Link] [optional] licenses [Link] [optional] homepages [Link] [optional] publications [Link] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Links"},{"location":"v2/docs/Links/#links","text":"","title":"Links"},{"location":"v2/docs/Links/#properties","text":"Name Type Description Notes links [Link] [optional] licenses [Link] [optional] homepages [Link] [optional] publications [Link] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/LoadDataInBaseRequest/","text":"LoadDataInBaseRequest \u00b6 Properties \u00b6 Name Type Description Notes data_id str ID of the data to load into the table allow_jagged_rows bool, none_type Enable to accept rows that are missing trailing optional columns. Missing values will be treated as nulls. [optional] if omitted the server will use the default value of False allow_quoted_newlines bool, none_type Enable to include newlines contained in quoted data sections in the cell\u2019s value. When disabled, newlines will signal a new row [optional] if omitted the server will use the default value of False delimiter str, none_type field delimiter [optional] if omitted the server will use the default value of \",\" encoding str, none_type Encoding [optional] if omitted the server will use the default value of \"UTF8\" force_load bool, none_type When false (default): the data will not be loaded if it was already previously loaded to table ; when true, the data will be loaded even if already loaded in the past [optional] if omitted the server will use the default value of False header_rows_to_skip int, none_type number of rows to skip (usually for headers) [optional] if omitted the server will use the default value of 1 ignore_unknown_values bool When enabled, rows with extra column values that do not match the schema will be ignored and will not be loaded into the table [optional] if omitted the server will use the default value of False include_references bool, none_type Include references [optional] if omitted the server will use the default value of True include_data_reference bool, none_type Include Data Reference [optional] if omitted the server will use the default value of True include_sample_reference bool, none_type Include Sample Reference [optional] if omitted the server will use the default value of True include_pipeline_reference bool, none_type Include Pipeline Reference [optional] if omitted the server will use the default value of True include_pipeline_execution_reference bool, none_type Include Pipeline Execution Reference [optional] if omitted the server will use the default value of True include_tenant_reference bool, none_type Include Tenant Reference [optional] if omitted the server will use the default value of True null_marker str, none_type Specifies a string that represents a null value in a CSV/TSV file. [optional] number_of_errors_allowed int, none_type The maximum number of bad records that Base can ignore when running the job [optional] if omitted the server will use the default value of 0 quote str, none_type The value that is used to quote data sections in a CSV/TSV file [optional] write_preference str, none_type specifies how to write data in the table. [optional] if omitted the server will use the default value of \"APPENDTOTABLE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"LoadDataInBaseRequest"},{"location":"v2/docs/LoadDataInBaseRequest/#loaddatainbaserequest","text":"","title":"LoadDataInBaseRequest"},{"location":"v2/docs/LoadDataInBaseRequest/#properties","text":"Name Type Description Notes data_id str ID of the data to load into the table allow_jagged_rows bool, none_type Enable to accept rows that are missing trailing optional columns. Missing values will be treated as nulls. [optional] if omitted the server will use the default value of False allow_quoted_newlines bool, none_type Enable to include newlines contained in quoted data sections in the cell\u2019s value. When disabled, newlines will signal a new row [optional] if omitted the server will use the default value of False delimiter str, none_type field delimiter [optional] if omitted the server will use the default value of \",\" encoding str, none_type Encoding [optional] if omitted the server will use the default value of \"UTF8\" force_load bool, none_type When false (default): the data will not be loaded if it was already previously loaded to table ; when true, the data will be loaded even if already loaded in the past [optional] if omitted the server will use the default value of False header_rows_to_skip int, none_type number of rows to skip (usually for headers) [optional] if omitted the server will use the default value of 1 ignore_unknown_values bool When enabled, rows with extra column values that do not match the schema will be ignored and will not be loaded into the table [optional] if omitted the server will use the default value of False include_references bool, none_type Include references [optional] if omitted the server will use the default value of True include_data_reference bool, none_type Include Data Reference [optional] if omitted the server will use the default value of True include_sample_reference bool, none_type Include Sample Reference [optional] if omitted the server will use the default value of True include_pipeline_reference bool, none_type Include Pipeline Reference [optional] if omitted the server will use the default value of True include_pipeline_execution_reference bool, none_type Include Pipeline Execution Reference [optional] if omitted the server will use the default value of True include_tenant_reference bool, none_type Include Tenant Reference [optional] if omitted the server will use the default value of True null_marker str, none_type Specifies a string that represents a null value in a CSV/TSV file. [optional] number_of_errors_allowed int, none_type The maximum number of bad records that Base can ignore when running the job [optional] if omitted the server will use the default value of 0 quote str, none_type The value that is used to quote data sections in a CSV/TSV file [optional] write_preference str, none_type specifies how to write data in the table. [optional] if omitted the server will use the default value of \"APPENDTOTABLE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/MetadataField/","text":"MetadataField \u00b6 The metadata of the sample Properties \u00b6 Name Type Description Notes id str index int [optional] name str [optional] field_type str [optional] values [str] [optional] group_values [MetadataField] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MetadataField"},{"location":"v2/docs/MetadataField/#metadatafield","text":"The metadata of the sample","title":"MetadataField"},{"location":"v2/docs/MetadataField/#properties","text":"Name Type Description Notes id str index int [optional] name str [optional] field_type str [optional] values [str] [optional] group_values [MetadataField] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/MetadataModel/","text":"MetadataModel \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str state str tenant_name str, none_type [optional] description str, none_type [optional] parent_model_id str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MetadataModel"},{"location":"v2/docs/MetadataModel/#metadatamodel","text":"","title":"MetadataModel"},{"location":"v2/docs/MetadataModel/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str state str tenant_name str, none_type [optional] description str, none_type [optional] parent_model_id str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/MetadataModelApi/","text":"libica.openapi.v2.MetadataModelApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. get_metadata_model \u00b6 MetadataModel get_metadata_model(metadata_model_id) Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.metadata_model import MetadataModel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) metadata_model_id = \"metadataModelId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. api_response = api_instance . get_metadata_model ( metadata_model_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_model: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes metadata_model_id str Return type \u00b6 MetadataModel Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The metadata model is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_metadata_model_fields \u00b6 FieldList get_metadata_model_fields(metadata_model_id) Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.field_list import FieldList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) metadata_model_id = \"metadataModelId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. api_response = api_instance . get_metadata_model_fields ( metadata_model_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_model_fields: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes metadata_model_id str Return type \u00b6 FieldList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The metadata model fields are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_metadata_models \u00b6 MetadataModelList get_metadata_models() Retrieve the metadata models for the tenant associated to the security context. Retrieve the metadata models for the tenant associated to the security context. This call returns a list of metadata models for the tenant in a non-hierarchical way. Instead of a model having a list of child models all models except the root model have a parent model identifier. This can be used to reconstruct the hierarchy. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.metadata_model_list import MetadataModelList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the metadata models for the tenant associated to the security context. api_response = api_instance . get_metadata_models () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_models: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 MetadataModelList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The metadata models are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_tenant_model \u00b6 Model get_tenant_model() Retrieve the tenant model for the tenant associated to the security context. Retrieve the tenant model for the tenant associated to the security context. The tenant model is a hierarchical structure where the top level tenant holds a list of child models (which in turn can hold child models). Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.model import Model from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the tenant model for the tenant associated to the security context. api_response = api_instance . get_tenant_model () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_tenant_model: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 Model Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The tenant model is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.MetadataModelApi"},{"location":"v2/docs/MetadataModelApi/#libicaopenapiv2metadatamodelapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context.","title":"libica.openapi.v2.MetadataModelApi"},{"location":"v2/docs/MetadataModelApi/#get_metadata_model","text":"MetadataModel get_metadata_model(metadata_model_id) Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.","title":"get_metadata_model"},{"location":"v2/docs/MetadataModelApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.metadata_model import MetadataModel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) metadata_model_id = \"metadataModelId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. api_response = api_instance . get_metadata_model ( metadata_model_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_model: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/MetadataModelApi/#parameters","text":"Name Type Description Notes metadata_model_id str","title":"Parameters"},{"location":"v2/docs/MetadataModelApi/#return-type","text":"MetadataModel","title":"Return type"},{"location":"v2/docs/MetadataModelApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/MetadataModelApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/MetadataModelApi/#http-response-details","text":"Status code Description Response headers 200 The metadata model is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/MetadataModelApi/#get_metadata_model_fields","text":"FieldList get_metadata_model_fields(metadata_model_id) Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.","title":"get_metadata_model_fields"},{"location":"v2/docs/MetadataModelApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.field_list import FieldList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) metadata_model_id = \"metadataModelId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. api_response = api_instance . get_metadata_model_fields ( metadata_model_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_model_fields: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/MetadataModelApi/#parameters_1","text":"Name Type Description Notes metadata_model_id str","title":"Parameters"},{"location":"v2/docs/MetadataModelApi/#return-type_1","text":"FieldList","title":"Return type"},{"location":"v2/docs/MetadataModelApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/MetadataModelApi/#http-response-details_1","text":"Status code Description Response headers 200 The metadata model fields are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/MetadataModelApi/#get_metadata_models","text":"MetadataModelList get_metadata_models() Retrieve the metadata models for the tenant associated to the security context. Retrieve the metadata models for the tenant associated to the security context. This call returns a list of metadata models for the tenant in a non-hierarchical way. Instead of a model having a list of child models all models except the root model have a parent model identifier. This can be used to reconstruct the hierarchy.","title":"get_metadata_models"},{"location":"v2/docs/MetadataModelApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.metadata_model_list import MetadataModelList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the metadata models for the tenant associated to the security context. api_response = api_instance . get_metadata_models () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_metadata_models: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/MetadataModelApi/#parameters_2","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/MetadataModelApi/#return-type_2","text":"MetadataModelList","title":"Return type"},{"location":"v2/docs/MetadataModelApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/MetadataModelApi/#http-response-details_2","text":"Status code Description Response headers 200 The metadata models are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/MetadataModelApi/#get_tenant_model","text":"Model get_tenant_model() Retrieve the tenant model for the tenant associated to the security context. Retrieve the tenant model for the tenant associated to the security context. The tenant model is a hierarchical structure where the top level tenant holds a list of child models (which in turn can hold child models).","title":"get_tenant_model"},{"location":"v2/docs/MetadataModelApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import metadata_model_api from libica.openapi.v2.model.model import Model from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = metadata_model_api . MetadataModelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve the tenant model for the tenant associated to the security context. api_response = api_instance . get_tenant_model () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling MetadataModelApi->get_tenant_model: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/MetadataModelApi/#parameters_3","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/MetadataModelApi/#return-type_3","text":"Model","title":"Return type"},{"location":"v2/docs/MetadataModelApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/MetadataModelApi/#http-response-details_3","text":"Status code Description Response headers 200 The tenant model is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/MetadataModelList/","text":"MetadataModelList \u00b6 Properties \u00b6 Name Type Description Notes items [MetadataModel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MetadataModelList"},{"location":"v2/docs/MetadataModelList/#metadatamodellist","text":"","title":"MetadataModelList"},{"location":"v2/docs/MetadataModelList/#properties","text":"Name Type Description Notes items [MetadataModel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Model/","text":"Model \u00b6 Properties \u00b6 Name Type Description Notes id str name str [optional] description str [optional] state str [optional] models [Model] [optional] fields [Field] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Model"},{"location":"v2/docs/Model/#model","text":"","title":"Model"},{"location":"v2/docs/Model/#properties","text":"Name Type Description Notes id str name str [optional] description str [optional] state str [optional] models [Model] [optional] fields [Field] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/MultipartFormDataInput/","text":"MultipartFormDataInput \u00b6 Properties \u00b6 Name Type Description Notes form_data {str: (InputPart,)} [optional] form_data_map {str: ([InputPart],)} [optional] preamble str [optional] parts [InputPart] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"MultipartFormDataInput"},{"location":"v2/docs/MultipartFormDataInput/#multipartformdatainput","text":"","title":"MultipartFormDataInput"},{"location":"v2/docs/MultipartFormDataInput/#properties","text":"Name Type Description Notes form_data {str: (InputPart,)} [optional] form_data_map {str: ([InputPart],)} [optional] preamble str [optional] parts [InputPart] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/NextflowAnalysisInput/","text":"NextflowAnalysisInput \u00b6 Properties \u00b6 Name Type Description Notes inputs [AnalysisDataInput] parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"NextflowAnalysisInput"},{"location":"v2/docs/NextflowAnalysisInput/#nextflowanalysisinput","text":"","title":"NextflowAnalysisInput"},{"location":"v2/docs/NextflowAnalysisInput/#properties","text":"Name Type Description Notes inputs [AnalysisDataInput] parameters [AnalysisParameter], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/NotificationChannel/","text":"NotificationChannel \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"NotificationChannel"},{"location":"v2/docs/NotificationChannel/#notificationchannel","text":"","title":"NotificationChannel"},{"location":"v2/docs/NotificationChannel/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/NotificationChannelApi/","text":"libica.openapi.v2.NotificationChannelApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_notification_channel POST /api/notificationChannels Create a notification channel delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel get_notification_channels GET /api/notificationChannels Retrieve notification channels update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel create_notification_channel \u00b6 NotificationChannel create_notification_channel() Create a notification channel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.create_notification_channel import CreateNotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) create_notification_channel = CreateNotificationChannel ( enabled = True , type = \"MAIL\" , address = \"address_example\" , ) # CreateNotificationChannel | The new channel (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a notification channel api_response = api_instance . create_notification_channel ( create_notification_channel = create_notification_channel ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->create_notification_channel: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_notification_channel CreateNotificationChannel The new channel [optional] Return type \u00b6 NotificationChannel Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The notification channel is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_notification_channel \u00b6 delete_notification_channel(channel_id) Delete a notification channel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to delete # example passing only required values which don't have defaults set try : # Delete a notification channel api_instance . delete_notification_channel ( channel_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->delete_notification_channel: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes channel_id str The ID of the notification channel to delete Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The notification channel is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_channel \u00b6 NotificationChannel get_notification_channel(channel_id) Retrieve a notification channel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to retrieve # example passing only required values which don't have defaults set try : # Retrieve a notification channel api_response = api_instance . get_notification_channel ( channel_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->get_notification_channel: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes channel_id str The ID of the notification channel to retrieve Return type \u00b6 NotificationChannel Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification channel is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_channels \u00b6 NotificationChannelList get_notification_channels() Retrieve notification channels Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel_list import NotificationChannelList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve notification channels api_response = api_instance . get_notification_channels () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->get_notification_channels: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 NotificationChannelList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification channels are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_notification_channel \u00b6 NotificationChannel update_notification_channel(channel_id) Update a notification channel This will affect all subscriptions which use this address!Fields which can be updated: - enabled - address Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ) # NotificationChannel | The updated channel (optional) # example passing only required values which don't have defaults set try : # Update a notification channel api_response = api_instance . update_notification_channel ( channel_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->update_notification_channel: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification channel api_response = api_instance . update_notification_channel ( channel_id , if_match = if_match , notification_channel = notification_channel ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->update_notification_channel: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes channel_id str The ID of the notification channel to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_channel NotificationChannel The updated channel [optional] Return type \u00b6 NotificationChannel Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification channel is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.NotificationChannelApi"},{"location":"v2/docs/NotificationChannelApi/#libicaopenapiv2notificationchannelapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_notification_channel POST /api/notificationChannels Create a notification channel delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel get_notification_channels GET /api/notificationChannels Retrieve notification channels update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel","title":"libica.openapi.v2.NotificationChannelApi"},{"location":"v2/docs/NotificationChannelApi/#create_notification_channel","text":"NotificationChannel create_notification_channel() Create a notification channel","title":"create_notification_channel"},{"location":"v2/docs/NotificationChannelApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.create_notification_channel import CreateNotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) create_notification_channel = CreateNotificationChannel ( enabled = True , type = \"MAIL\" , address = \"address_example\" , ) # CreateNotificationChannel | The new channel (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a notification channel api_response = api_instance . create_notification_channel ( create_notification_channel = create_notification_channel ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->create_notification_channel: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/NotificationChannelApi/#parameters","text":"Name Type Description Notes create_notification_channel CreateNotificationChannel The new channel [optional]","title":"Parameters"},{"location":"v2/docs/NotificationChannelApi/#return-type","text":"NotificationChannel","title":"Return type"},{"location":"v2/docs/NotificationChannelApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/NotificationChannelApi/#http-response-details","text":"Status code Description Response headers 201 The notification channel is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/NotificationChannelApi/#delete_notification_channel","text":"delete_notification_channel(channel_id) Delete a notification channel","title":"delete_notification_channel"},{"location":"v2/docs/NotificationChannelApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to delete # example passing only required values which don't have defaults set try : # Delete a notification channel api_instance . delete_notification_channel ( channel_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->delete_notification_channel: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/NotificationChannelApi/#parameters_1","text":"Name Type Description Notes channel_id str The ID of the notification channel to delete","title":"Parameters"},{"location":"v2/docs/NotificationChannelApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/NotificationChannelApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_1","text":"Status code Description Response headers 204 The notification channel is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channel","text":"NotificationChannel get_notification_channel(channel_id) Retrieve a notification channel","title":"get_notification_channel"},{"location":"v2/docs/NotificationChannelApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to retrieve # example passing only required values which don't have defaults set try : # Retrieve a notification channel api_response = api_instance . get_notification_channel ( channel_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->get_notification_channel: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/NotificationChannelApi/#parameters_2","text":"Name Type Description Notes channel_id str The ID of the notification channel to retrieve","title":"Parameters"},{"location":"v2/docs/NotificationChannelApi/#return-type_2","text":"NotificationChannel","title":"Return type"},{"location":"v2/docs/NotificationChannelApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_2","text":"Status code Description Response headers 200 The notification channel is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channels","text":"NotificationChannelList get_notification_channels() Retrieve notification channels","title":"get_notification_channels"},{"location":"v2/docs/NotificationChannelApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel_list import NotificationChannelList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve notification channels api_response = api_instance . get_notification_channels () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->get_notification_channels: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/NotificationChannelApi/#parameters_3","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/NotificationChannelApi/#return-type_3","text":"NotificationChannelList","title":"Return type"},{"location":"v2/docs/NotificationChannelApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_3","text":"Status code Description Response headers 200 The notification channels are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/NotificationChannelApi/#update_notification_channel","text":"NotificationChannel update_notification_channel(channel_id) Update a notification channel This will affect all subscriptions which use this address!Fields which can be updated: - enabled - address","title":"update_notification_channel"},{"location":"v2/docs/NotificationChannelApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import notification_channel_api from libica.openapi.v2.model.notification_channel import NotificationChannel from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = notification_channel_api . NotificationChannelApi ( api_client ) channel_id = \"channelId_example\" # str | The ID of the notification channel to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ) # NotificationChannel | The updated channel (optional) # example passing only required values which don't have defaults set try : # Update a notification channel api_response = api_instance . update_notification_channel ( channel_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->update_notification_channel: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification channel api_response = api_instance . update_notification_channel ( channel_id , if_match = if_match , notification_channel = notification_channel ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling NotificationChannelApi->update_notification_channel: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/NotificationChannelApi/#parameters_4","text":"Name Type Description Notes channel_id str The ID of the notification channel to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_channel NotificationChannel The updated channel [optional]","title":"Parameters"},{"location":"v2/docs/NotificationChannelApi/#return-type_4","text":"NotificationChannel","title":"Return type"},{"location":"v2/docs/NotificationChannelApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_4","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_4","text":"Status code Description Response headers 200 The notification channel is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/NotificationChannelList/","text":"NotificationChannelList \u00b6 Properties \u00b6 Name Type Description Notes items [NotificationChannel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"NotificationChannelList"},{"location":"v2/docs/NotificationChannelList/#notificationchannellist","text":"","title":"NotificationChannelList"},{"location":"v2/docs/NotificationChannelList/#properties","text":"Name Type Description Notes items [NotificationChannel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/NotificationSubscription/","text":"NotificationSubscription \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"NotificationSubscription"},{"location":"v2/docs/NotificationSubscription/#notificationsubscription","text":"","title":"NotificationSubscription"},{"location":"v2/docs/NotificationSubscription/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/NotificationSubscriptionList/","text":"NotificationSubscriptionList \u00b6 Properties \u00b6 Name Type Description Notes items [NotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"NotificationSubscriptionList"},{"location":"v2/docs/NotificationSubscriptionList/#notificationsubscriptionlist","text":"","title":"NotificationSubscriptionList"},{"location":"v2/docs/NotificationSubscriptionList/#properties","text":"Name Type Description Notes items [NotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Pipeline/","text":"Pipeline \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorage tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Pipeline"},{"location":"v2/docs/Pipeline/#pipeline","text":"","title":"Pipeline"},{"location":"v2/docs/Pipeline/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorage tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/PipelineApi/","text":"libica.openapi.v2.PipelineApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. get_pipelines GET /api/pipelines Retrieve a list of pipelines. get_pipeline \u00b6 Pipeline get_pipeline(pipeline_id) Retrieve a pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.pipeline import Pipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve # example passing only required values which don't have defaults set try : # Retrieve a pipeline. api_response = api_instance . get_pipeline ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve Return type \u00b6 Pipeline Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_pipeline_input_parameters \u00b6 InputParameterList get_pipeline_input_parameters(pipeline_id) Retrieve input parameters for a pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.input_parameter_list import InputParameterList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve input parameters for # example passing only required values which don't have defaults set try : # Retrieve input parameters for a pipeline. api_response = api_instance . get_pipeline_input_parameters ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline_input_parameters: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve input parameters for Return type \u00b6 InputParameterList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The input parameters is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_pipeline_reference_sets \u00b6 ReferenceSetList get_pipeline_reference_sets(pipeline_id) Retrieve the reference sets of a pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.reference_set_list import ReferenceSetList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for # example passing only required values which don't have defaults set try : # Retrieve the reference sets of a pipeline. api_response = api_instance . get_pipeline_reference_sets ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline_reference_sets: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve reference sets for Return type \u00b6 ReferenceSetList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_pipelines \u00b6 PipelineList get_pipelines() Retrieve a list of pipelines. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.pipeline_list import PipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of pipelines. api_response = api_instance . get_pipelines () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipelines: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 PipelineList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.PipelineApi"},{"location":"v2/docs/PipelineApi/#libicaopenapiv2pipelineapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. get_pipelines GET /api/pipelines Retrieve a list of pipelines.","title":"libica.openapi.v2.PipelineApi"},{"location":"v2/docs/PipelineApi/#get_pipeline","text":"Pipeline get_pipeline(pipeline_id) Retrieve a pipeline.","title":"get_pipeline"},{"location":"v2/docs/PipelineApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.pipeline import Pipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve # example passing only required values which don't have defaults set try : # Retrieve a pipeline. api_response = api_instance . get_pipeline ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/PipelineApi/#parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve","title":"Parameters"},{"location":"v2/docs/PipelineApi/#return-type","text":"Pipeline","title":"Return type"},{"location":"v2/docs/PipelineApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/PipelineApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/PipelineApi/#http-response-details","text":"Status code Description Response headers 200 The pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/PipelineApi/#get_pipeline_input_parameters","text":"InputParameterList get_pipeline_input_parameters(pipeline_id) Retrieve input parameters for a pipeline.","title":"get_pipeline_input_parameters"},{"location":"v2/docs/PipelineApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.input_parameter_list import InputParameterList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve input parameters for # example passing only required values which don't have defaults set try : # Retrieve input parameters for a pipeline. api_response = api_instance . get_pipeline_input_parameters ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline_input_parameters: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/PipelineApi/#parameters_1","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve input parameters for","title":"Parameters"},{"location":"v2/docs/PipelineApi/#return-type_1","text":"InputParameterList","title":"Return type"},{"location":"v2/docs/PipelineApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/PipelineApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/PipelineApi/#http-response-details_1","text":"Status code Description Response headers 200 The input parameters is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/PipelineApi/#get_pipeline_reference_sets","text":"ReferenceSetList get_pipeline_reference_sets(pipeline_id) Retrieve the reference sets of a pipeline.","title":"get_pipeline_reference_sets"},{"location":"v2/docs/PipelineApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.reference_set_list import ReferenceSetList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for # example passing only required values which don't have defaults set try : # Retrieve the reference sets of a pipeline. api_response = api_instance . get_pipeline_reference_sets ( pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipeline_reference_sets: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/PipelineApi/#parameters_2","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve reference sets for","title":"Parameters"},{"location":"v2/docs/PipelineApi/#return-type_2","text":"ReferenceSetList","title":"Return type"},{"location":"v2/docs/PipelineApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/PipelineApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/PipelineApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/PipelineApi/#get_pipelines","text":"PipelineList get_pipelines() Retrieve a list of pipelines.","title":"get_pipelines"},{"location":"v2/docs/PipelineApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import pipeline_api from libica.openapi.v2.model.pipeline_list import PipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = pipeline_api . PipelineApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of pipelines. api_response = api_instance . get_pipelines () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling PipelineApi->get_pipelines: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/PipelineApi/#parameters_3","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/PipelineApi/#return-type_3","text":"PipelineList","title":"Return type"},{"location":"v2/docs/PipelineApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/PipelineApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/PipelineApi/#http-response-details_3","text":"Status code Description Response headers 200 The list of pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/PipelineBundle/","text":"PipelineBundle \u00b6 Properties \u00b6 Name Type Description Notes id str name str active_pipelines [Pipeline] canceled_pipelines [Pipeline] retired_pipelines [Pipeline] regions [Region] analysis_storages [AnalysisStorage] max_number_of_allowed_slots int, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PipelineBundle"},{"location":"v2/docs/PipelineBundle/#pipelinebundle","text":"","title":"PipelineBundle"},{"location":"v2/docs/PipelineBundle/#properties","text":"Name Type Description Notes id str name str active_pipelines [Pipeline] canceled_pipelines [Pipeline] retired_pipelines [Pipeline] regions [Region] analysis_storages [AnalysisStorage] max_number_of_allowed_slots int, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/PipelineList/","text":"PipelineList \u00b6 Properties \u00b6 Name Type Description Notes items [Pipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PipelineList"},{"location":"v2/docs/PipelineList/#pipelinelist","text":"","title":"PipelineList"},{"location":"v2/docs/PipelineList/#properties","text":"Name Type Description Notes items [Pipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/PipelineTag/","text":"PipelineTag \u00b6 Properties \u00b6 Name Type Description Notes technical_tags [str] Technical tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"PipelineTag"},{"location":"v2/docs/PipelineTag/#pipelinetag","text":"","title":"PipelineTag"},{"location":"v2/docs/PipelineTag/#properties","text":"Name Type Description Notes technical_tags [str] Technical tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Problem/","text":"Problem \u00b6 RFC 7807 Problem object ( https://tools.ietf.org/html/rfc7807 ) Properties \u00b6 Name Type Description Notes type str A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \\\"about:blank\\\". title str A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; status int The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. parameters {str: (str,)} Problem parameters for e.g. request body attribute validation. Not in scope of RFC 7807. timestamp datetime id str [optional] detail str A human-readable explanation specific to this occurrence of the problem. [optional] instance str A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Problem"},{"location":"v2/docs/Problem/#problem","text":"RFC 7807 Problem object ( https://tools.ietf.org/html/rfc7807 )","title":"Problem"},{"location":"v2/docs/Problem/#properties","text":"Name Type Description Notes type str A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \\\"about:blank\\\". title str A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; status int The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. parameters {str: (str,)} Problem parameters for e.g. request body attribute validation. Not in scope of RFC 7807. timestamp datetime id str [optional] detail str A human-readable explanation specific to this occurrence of the problem. [optional] instance str A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Project/","text":"Project \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str active bool Indicates whether the project is active or hidden. region Region billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. tags ProjectTag tenant_name str, none_type [optional] short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] data_sharing_enabled bool, none_type Indicates whether the Data and Samples created in this Project can be linked to other Projects. [optional] storage_bundle StorageBundle [optional] self_managed_storage_configuration StorageConfiguration [optional] metadata_model MetadataModel [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Project"},{"location":"v2/docs/Project/#project","text":"","title":"Project"},{"location":"v2/docs/Project/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str active bool Indicates whether the project is active or hidden. region Region billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. tags ProjectTag tenant_name str, none_type [optional] short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] data_sharing_enabled bool, none_type Indicates whether the Data and Samples created in this Project can be linked to other Projects. [optional] storage_bundle StorageBundle [optional] self_managed_storage_configuration StorageConfiguration [optional] metadata_model MetadataModel [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectAnalysisApi/","text":"libica.openapi.v2.ProjectAnalysisApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of project analyses. get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. h_get_execution_output_object GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. abort_analysis \u00b6 abort_analysis(project_id, analysis_id) Abort an analysis. Endpoint for aborting an analysis. The status of the analysis is not updated immediately, only when the abortion of the analysis has actually started.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to abort # example passing only required values which don't have defaults set try : # Abort an analysis. api_instance . abort_analysis ( project_id , analysis_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->abort_analysis: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to abort Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The analysis is successfully aborted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_cwl_analysis \u00b6 Analysis create_cwl_analysis(project_id, create_cwl_analysis) Create and start an analysis for a CWL pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.create_cwl_analysis import CreateCwlAnalysis from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | create_cwl_analysis = CreateCwlAnalysis ( user_reference = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , pipeline_id = \"pipeline_id_example\" , tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), activation_code_detail_id = \"activation_code_detail_id_example\" , analysis_storage_id = \"analysis_storage_id_example\" , analysis_input = CwlAnalysisInput (), ) # CreateCwlAnalysis | # example passing only required values which don't have defaults set try : # Create and start an analysis for a CWL pipeline. api_response = api_instance . create_cwl_analysis ( project_id , create_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->create_cwl_analysis: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_cwl_analysis CreateCwlAnalysis Return type \u00b6 Analysis Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_nextflow_analysis \u00b6 Analysis create_nextflow_analysis(project_id, create_nextflow_analysis) Create and start an analysis for a Nextflow pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.create_nextflow_analysis import CreateNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | create_nextflow_analysis = CreateNextflowAnalysis ( user_reference = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , pipeline_id = \"pipeline_id_example\" , tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), activation_code_detail_id = \"activation_code_detail_id_example\" , analysis_storage_id = \"analysis_storage_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # CreateNextflowAnalysis | # example passing only required values which don't have defaults set try : # Create and start an analysis for a Nextflow pipeline. api_response = api_instance . create_nextflow_analysis ( project_id , create_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->create_nextflow_analysis: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_nextflow_analysis CreateNextflowAnalysis Return type \u00b6 Analysis Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analyses \u00b6 AnalysisPagedList get_analyses(project_id) Retrieve the list of project analyses. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_paged_list import AnalysisPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | reference = \"reference_example\" # str | The reference to filter on. (optional) userreference = \"userreference_example\" # str | The user-reference to filter on. (optional) status = \"status_example\" # str | The status to filter on. (optional) usertag = \"usertag_example\" # str | The user-tags to filter on. (optional) technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional) referencetag = \"referencetag_example\" # str | The reference-data-tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of project analyses. api_response = api_instance . get_analyses ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analyses: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of project analyses. api_response = api_instance . get_analyses ( project_id , reference = reference , userreference = userreference , status = status , usertag = usertag , technicaltag = technicaltag , referencetag = referencetag , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analyses: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] Return type \u00b6 AnalysisPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analysis \u00b6 Analysis get_analysis(project_id, analysis_id) Retrieve an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve # example passing only required values which don't have defaults set try : # Retrieve an analysis. api_response = api_instance . get_analysis ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve Return type \u00b6 Analysis Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The analysis is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analysis_configurations \u00b6 ExecutionConfigurationList get_analysis_configurations(project_id, analysis_id) Retrieve the configurations of an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.execution_configuration_list import ExecutionConfigurationList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the configuration for # example passing only required values which don't have defaults set try : # Retrieve the configurations of an analysis. api_response = api_instance . get_analysis_configurations ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_configurations: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the configuration for Return type \u00b6 ExecutionConfigurationList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The configurations of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analysis_inputs \u00b6 AnalysisInputList get_analysis_inputs(project_id, analysis_id) Retrieve the inputs of an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_input_list import AnalysisInputList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the inputs for # example passing only required values which don't have defaults set try : # Retrieve the inputs of an analysis. api_response = api_instance . get_analysis_inputs ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_inputs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the inputs for Return type \u00b6 AnalysisInputList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The inputs of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analysis_outputs \u00b6 AnalysisOutputList get_analysis_outputs(project_id, analysis_id) Retrieve the outputs of an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_output_list import AnalysisOutputList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the outputs for # example passing only required values which don't have defaults set try : # Retrieve the outputs of an analysis. api_response = api_instance . get_analysis_outputs ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_outputs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the outputs for Return type \u00b6 AnalysisOutputList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The outputs of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_analysis_steps \u00b6 AnalysisStepList get_analysis_steps(project_id, analysis_id) Retrieve the individual steps of an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_step_list import AnalysisStepList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the individual steps for # example passing only required values which don't have defaults set try : # Retrieve the individual steps of an analysis. api_response = api_instance . get_analysis_steps ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_steps: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the individual steps for Return type \u00b6 AnalysisStepList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The individual steps of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] h_get_execution_output_object \u00b6 AnalysisRawOutput h_get_execution_output_object(project_id, analysis_id) Retrieve the raw output of an analysis. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.analysis_raw_output import AnalysisRawOutput from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis for which to retrieve the raw output # example passing only required values which don't have defaults set try : # Retrieve the raw output of an analysis. api_response = api_instance . h_get_execution_output_object ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->h_get_execution_output_object: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str The ID of the analysis for which to retrieve the raw output Return type \u00b6 AnalysisRawOutput Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The raw output of the analysis is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_analysis \u00b6 Analysis update_analysis(project_id, analysis_id) Update an analysis. Attributes which can be updated: - tags Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) analysis = Analysis ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , reference = \"reference_example\" , user_reference = \"user_reference_example\" , pipeline = Pipeline ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , description = \"description_example\" , language = \"CWL\" , pipeline_tags = PipelineTag ( technical_tags = [ \"technical_tags_example\" , ], ), analysis_storage = AnalysisStorage ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , ), ), status = \"REQUESTED\" , start_date = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), end_date = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), summary = \"summary_example\" , analysis_storage = AnalysisStorage ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , ), tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), ) # Analysis | (optional) # example passing only required values which don't have defaults set try : # Update an analysis. api_response = api_instance . update_analysis ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->update_analysis: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update an analysis. api_response = api_instance . update_analysis ( project_id , analysis_id , if_match = if_match , analysis = analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->update_analysis: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str analysis_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] analysis Analysis [optional] Return type \u00b6 Analysis Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The analysis is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectAnalysisApi"},{"location":"v2/docs/ProjectAnalysisApi/#libicaopenapiv2projectanalysisapi","text":"All URIs are relative to /ica/rest Method HTTP request Description abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of project analyses. get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. h_get_execution_output_object GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis.","title":"libica.openapi.v2.ProjectAnalysisApi"},{"location":"v2/docs/ProjectAnalysisApi/#abort_analysis","text":"abort_analysis(project_id, analysis_id) Abort an analysis. Endpoint for aborting an analysis. The status of the analysis is not updated immediately, only when the abortion of the analysis has actually started.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"abort_analysis"},{"location":"v2/docs/ProjectAnalysisApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to abort # example passing only required values which don't have defaults set try : # Abort an analysis. api_instance . abort_analysis ( project_id , analysis_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->abort_analysis: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to abort","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details","text":"Status code Description Response headers 204 The analysis is successfully aborted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_analysis","text":"Analysis create_cwl_analysis(project_id, create_cwl_analysis) Create and start an analysis for a CWL pipeline.","title":"create_cwl_analysis"},{"location":"v2/docs/ProjectAnalysisApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.create_cwl_analysis import CreateCwlAnalysis from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | create_cwl_analysis = CreateCwlAnalysis ( user_reference = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , pipeline_id = \"pipeline_id_example\" , tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), activation_code_detail_id = \"activation_code_detail_id_example\" , analysis_storage_id = \"analysis_storage_id_example\" , analysis_input = CwlAnalysisInput (), ) # CreateCwlAnalysis | # example passing only required values which don't have defaults set try : # Create and start an analysis for a CWL pipeline. api_response = api_instance . create_cwl_analysis ( project_id , create_cwl_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->create_cwl_analysis: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_1","text":"Name Type Description Notes project_id str create_cwl_analysis CreateCwlAnalysis","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_1","text":"Analysis","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_1","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_1","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#create_nextflow_analysis","text":"Analysis create_nextflow_analysis(project_id, create_nextflow_analysis) Create and start an analysis for a Nextflow pipeline.","title":"create_nextflow_analysis"},{"location":"v2/docs/ProjectAnalysisApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.create_nextflow_analysis import CreateNextflowAnalysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | create_nextflow_analysis = CreateNextflowAnalysis ( user_reference = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , pipeline_id = \"pipeline_id_example\" , tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), activation_code_detail_id = \"activation_code_detail_id_example\" , analysis_storage_id = \"analysis_storage_id_example\" , analysis_input = NextflowAnalysisInput ( inputs = [ AnalysisDataInput ( parameter_code = \"parameter_code_example\" , data_ids = [ \"data_ids_example\" , ], ), ], parameters = [ AnalysisParameter ( code = \"code_example\" , value = \"value_example\" , ), ], reference_data_parameters = [ AnalysisReferenceDataParameter ( parameter_code = \"parameter_code_example\" , reference_data_id = \"reference_data_id_example\" , ), ], ), ) # CreateNextflowAnalysis | # example passing only required values which don't have defaults set try : # Create and start an analysis for a Nextflow pipeline. api_response = api_instance . create_nextflow_analysis ( project_id , create_nextflow_analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->create_nextflow_analysis: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_2","text":"Name Type Description Notes project_id str create_nextflow_analysis CreateNextflowAnalysis","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_2","text":"Analysis","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_2","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_2","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analyses","text":"AnalysisPagedList get_analyses(project_id) Retrieve the list of project analyses.","title":"get_analyses"},{"location":"v2/docs/ProjectAnalysisApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_paged_list import AnalysisPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | reference = \"reference_example\" # str | The reference to filter on. (optional) userreference = \"userreference_example\" # str | The user-reference to filter on. (optional) status = \"status_example\" # str | The status to filter on. (optional) usertag = \"usertag_example\" # str | The user-tags to filter on. (optional) technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional) referencetag = \"referencetag_example\" # str | The reference-data-tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of project analyses. api_response = api_instance . get_analyses ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analyses: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of project analyses. api_response = api_instance . get_analyses ( project_id , reference = reference , userreference = userreference , status = status , usertag = usertag , technicaltag = technicaltag , referencetag = referencetag , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analyses: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_3","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_3","text":"AnalysisPagedList","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_3","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis","text":"Analysis get_analysis(project_id, analysis_id) Retrieve an analysis.","title":"get_analysis"},{"location":"v2/docs/ProjectAnalysisApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve # example passing only required values which don't have defaults set try : # Retrieve an analysis. api_response = api_instance . get_analysis ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_4","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_4","text":"Analysis","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_4","text":"Status code Description Response headers 200 The analysis is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_configurations","text":"ExecutionConfigurationList get_analysis_configurations(project_id, analysis_id) Retrieve the configurations of an analysis.","title":"get_analysis_configurations"},{"location":"v2/docs/ProjectAnalysisApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.execution_configuration_list import ExecutionConfigurationList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the configuration for # example passing only required values which don't have defaults set try : # Retrieve the configurations of an analysis. api_response = api_instance . get_analysis_configurations ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_configurations: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_5","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the configuration for","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_5","text":"ExecutionConfigurationList","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_5","text":"Status code Description Response headers 200 The configurations of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_inputs","text":"AnalysisInputList get_analysis_inputs(project_id, analysis_id) Retrieve the inputs of an analysis.","title":"get_analysis_inputs"},{"location":"v2/docs/ProjectAnalysisApi/#example_6","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_input_list import AnalysisInputList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the inputs for # example passing only required values which don't have defaults set try : # Retrieve the inputs of an analysis. api_response = api_instance . get_analysis_inputs ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_inputs: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_6","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the inputs for","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_6","text":"AnalysisInputList","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_6","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_6","text":"Status code Description Response headers 200 The inputs of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_outputs","text":"AnalysisOutputList get_analysis_outputs(project_id, analysis_id) Retrieve the outputs of an analysis.","title":"get_analysis_outputs"},{"location":"v2/docs/ProjectAnalysisApi/#example_7","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_output_list import AnalysisOutputList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the outputs for # example passing only required values which don't have defaults set try : # Retrieve the outputs of an analysis. api_response = api_instance . get_analysis_outputs ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_outputs: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_7","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the outputs for","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_7","text":"AnalysisOutputList","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_7","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_7","text":"Status code Description Response headers 200 The outputs of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_steps","text":"AnalysisStepList get_analysis_steps(project_id, analysis_id) Retrieve the individual steps of an analysis.","title":"get_analysis_steps"},{"location":"v2/docs/ProjectAnalysisApi/#example_8","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis_step_list import AnalysisStepList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the individual steps for # example passing only required values which don't have defaults set try : # Retrieve the individual steps of an analysis. api_response = api_instance . get_analysis_steps ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->get_analysis_steps: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_8","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the individual steps for","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_8","text":"AnalysisStepList","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_8","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_8","text":"Status code Description Response headers 200 The individual steps of the analysis are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#h_get_execution_output_object","text":"AnalysisRawOutput h_get_execution_output_object(project_id, analysis_id) Retrieve the raw output of an analysis.","title":"h_get_execution_output_object"},{"location":"v2/docs/ProjectAnalysisApi/#example_9","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.analysis_raw_output import AnalysisRawOutput from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | The ID of the analysis for which to retrieve the raw output # example passing only required values which don't have defaults set try : # Retrieve the raw output of an analysis. api_response = api_instance . h_get_execution_output_object ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->h_get_execution_output_object: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_9","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis for which to retrieve the raw output","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_9","text":"AnalysisRawOutput","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_9","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_9","text":"Status code Description Response headers 200 The raw output of the analysis is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectAnalysisApi/#update_analysis","text":"Analysis update_analysis(project_id, analysis_id) Update an analysis. Attributes which can be updated: - tags","title":"update_analysis"},{"location":"v2/docs/ProjectAnalysisApi/#example_10","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_analysis_api from libica.openapi.v2.model.analysis import Analysis from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_analysis_api . ProjectAnalysisApi ( api_client ) project_id = \"projectId_example\" # str | analysis_id = \"analysisId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) analysis = Analysis ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , reference = \"reference_example\" , user_reference = \"user_reference_example\" , pipeline = Pipeline ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" , description = \"description_example\" , language = \"CWL\" , pipeline_tags = PipelineTag ( technical_tags = [ \"technical_tags_example\" , ], ), analysis_storage = AnalysisStorage ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , ), ), status = \"REQUESTED\" , start_date = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), end_date = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), summary = \"summary_example\" , analysis_storage = AnalysisStorage ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , ), tags = AnalysisTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), ) # Analysis | (optional) # example passing only required values which don't have defaults set try : # Update an analysis. api_response = api_instance . update_analysis ( project_id , analysis_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->update_analysis: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update an analysis. api_response = api_instance . update_analysis ( project_id , analysis_id , if_match = if_match , analysis = analysis ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectAnalysisApi->update_analysis: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_10","text":"Name Type Description Notes project_id str analysis_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] analysis Analysis [optional]","title":"Parameters"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_10","text":"Analysis","title":"Return type"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_10","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_10","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_10","text":"Status code Description Response headers 200 The analysis is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectApi/","text":"libica.openapi.v2.ProjectApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_project POST /api/projects Create a new project. get_project GET /api/projects/{projectId} Retrieve a project. get_projects GET /api/projects Retrieve a list of projects. update_project PUT /api/projects/{projectId} Update a project. create_project \u00b6 Project create_project() Create a new project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.create_project import CreateProject from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) create_project = CreateProject ( name = \"AH\" , short_description = \"short_description_example\" , information = \"information_example\" , project_owner_id = \"project_owner_id_example\" , region_id = \"region_id_example\" , billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle_id = \"storage_bundle_id_example\" , metadata_model_id = \"metadata_model_id_example\" , storage_configuration_id = \"storage_configuration_id_example\" , storage_configuration_subfolder = \"storage_configuration_subfolder_example\" , ) # CreateProject | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new project. api_response = api_instance . create_project ( create_project = create_project ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->create_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_project CreateProject [optional] Return type \u00b6 Project Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The project is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project \u00b6 Project get_project(project_id) Retrieve a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project. api_response = api_instance . get_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->get_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str Return type \u00b6 Project Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_projects \u00b6 ProjectPagedList get_projects() Retrieve a list of projects. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project_paged_list import ProjectPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) search = \"search_example\" # str | Search (optional) user_tags = [ \"userTags_example\" , ] # [str] | User tags to filter on (optional) technical_tags = [ \"technicalTags_example\" , ] # [str] | Technical tags to filter on (optional) include_hidden_projects = False # bool, none_type | Include hidden projects. (optional) if omitted the server will use the default value of False page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription - information (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of projects. api_response = api_instance . get_projects ( search = search , user_tags = user_tags , technical_tags = technical_tags , include_hidden_projects = include_hidden_projects , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->get_projects: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes search str Search [optional] user_tags [str] User tags to filter on [optional] technical_tags [str] Technical tags to filter on [optional] include_hidden_projects bool, none_type Include hidden projects. [optional] if omitted the server will use the default value of False page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription - information [optional] Return type \u00b6 ProjectPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of projects is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project \u00b6 Project update_project(project_id) Update a project. Fields which can be updated: - shortDescription - projectInformation - billingMode - dataSharingEnabled - tags - storageBundle - metaDataModel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) project_id = \"projectId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project = Project ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , active = True , short_description = \"short_description_example\" , information = \"information_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle = StorageBundle ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , bundle_name = \"bundle_name_example\" , entitlement_name = \"entitlement_name_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), ), self_managed_storage_configuration = StorageConfiguration ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , type = \"AWS_S3\" , status = \"INITIALIZING\" , error_message = \"error_message_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), is_default = True , ), metadata_model = MetadataModel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , state = \"DRAFT\" , parent_model_id = \"parent_model_id_example\" , ), ) # Project | (optional) # example passing only required values which don't have defaults set try : # Update a project. api_response = api_instance . update_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->update_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project. api_response = api_instance . update_project ( project_id , if_match = if_match , project = project ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->update_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project Project [optional] Return type \u00b6 Project Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project is successfully update. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectApi"},{"location":"v2/docs/ProjectApi/#libicaopenapiv2projectapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_project POST /api/projects Create a new project. get_project GET /api/projects/{projectId} Retrieve a project. get_projects GET /api/projects Retrieve a list of projects. update_project PUT /api/projects/{projectId} Update a project.","title":"libica.openapi.v2.ProjectApi"},{"location":"v2/docs/ProjectApi/#create_project","text":"Project create_project() Create a new project.","title":"create_project"},{"location":"v2/docs/ProjectApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.create_project import CreateProject from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) create_project = CreateProject ( name = \"AH\" , short_description = \"short_description_example\" , information = \"information_example\" , project_owner_id = \"project_owner_id_example\" , region_id = \"region_id_example\" , billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle_id = \"storage_bundle_id_example\" , metadata_model_id = \"metadata_model_id_example\" , storage_configuration_id = \"storage_configuration_id_example\" , storage_configuration_subfolder = \"storage_configuration_subfolder_example\" , ) # CreateProject | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new project. api_response = api_instance . create_project ( create_project = create_project ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->create_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectApi/#parameters","text":"Name Type Description Notes create_project CreateProject [optional]","title":"Parameters"},{"location":"v2/docs/ProjectApi/#return-type","text":"Project","title":"Return type"},{"location":"v2/docs/ProjectApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectApi/#http-response-details","text":"Status code Description Response headers 201 The project is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectApi/#get_project","text":"Project get_project(project_id) Retrieve a project.","title":"get_project"},{"location":"v2/docs/ProjectApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project. api_response = api_instance . get_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->get_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectApi/#parameters_1","text":"Name Type Description Notes project_id str","title":"Parameters"},{"location":"v2/docs/ProjectApi/#return-type_1","text":"Project","title":"Return type"},{"location":"v2/docs/ProjectApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectApi/#http-response-details_1","text":"Status code Description Response headers 200 The project is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectApi/#get_projects","text":"ProjectPagedList get_projects() Retrieve a list of projects.","title":"get_projects"},{"location":"v2/docs/ProjectApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project_paged_list import ProjectPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) search = \"search_example\" # str | Search (optional) user_tags = [ \"userTags_example\" , ] # [str] | User tags to filter on (optional) technical_tags = [ \"technicalTags_example\" , ] # [str] | Technical tags to filter on (optional) include_hidden_projects = False # bool, none_type | Include hidden projects. (optional) if omitted the server will use the default value of False page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription - information (optional) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of projects. api_response = api_instance . get_projects ( search = search , user_tags = user_tags , technical_tags = technical_tags , include_hidden_projects = include_hidden_projects , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->get_projects: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectApi/#parameters_2","text":"Name Type Description Notes search str Search [optional] user_tags [str] User tags to filter on [optional] technical_tags [str] Technical tags to filter on [optional] include_hidden_projects bool, none_type Include hidden projects. [optional] if omitted the server will use the default value of False page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - name - shortDescription - information [optional]","title":"Parameters"},{"location":"v2/docs/ProjectApi/#return-type_2","text":"ProjectPagedList","title":"Return type"},{"location":"v2/docs/ProjectApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of projects is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectApi/#update_project","text":"Project update_project(project_id) Update a project. Fields which can be updated: - shortDescription - projectInformation - billingMode - dataSharingEnabled - tags - storageBundle - metaDataModel","title":"update_project"},{"location":"v2/docs/ProjectApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_api from libica.openapi.v2.model.project import Project from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_api . ProjectApi ( api_client ) project_id = \"projectId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project = Project ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , active = True , short_description = \"short_description_example\" , information = \"information_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), billing_mode = \"PROJECT\" , data_sharing_enabled = True , tags = ProjectTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], ), storage_bundle = StorageBundle ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , bundle_name = \"bundle_name_example\" , entitlement_name = \"entitlement_name_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), ), self_managed_storage_configuration = StorageConfiguration ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , type = \"AWS_S3\" , status = \"INITIALIZING\" , error_message = \"error_message_example\" , region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), is_default = True , ), metadata_model = MetadataModel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , state = \"DRAFT\" , parent_model_id = \"parent_model_id_example\" , ), ) # Project | (optional) # example passing only required values which don't have defaults set try : # Update a project. api_response = api_instance . update_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->update_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project. api_response = api_instance . update_project ( project_id , if_match = if_match , project = project ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectApi->update_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectApi/#parameters_3","text":"Name Type Description Notes project_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project Project [optional]","title":"Parameters"},{"location":"v2/docs/ProjectApi/#return-type_3","text":"Project","title":"Return type"},{"location":"v2/docs/ProjectApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectApi/#http-request-headers_3","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectApi/#http-response-details_3","text":"Status code Description Response headers 200 The project is successfully update. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseApi/","text":"libica.openapi.v2.ProjectBaseApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. create_base_connection_details \u00b6 BaseConnection create_base_connection_details(project_id) Creates the connection details to snowflake instance. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.base_connection import BaseConnection from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_api . ProjectBaseApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Creates the connection details to snowflake instance. api_response = api_instance . create_base_connection_details ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseApi->create_base_connection_details: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project Return type \u00b6 BaseConnection Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The base connection details are created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectBaseApi"},{"location":"v2/docs/ProjectBaseApi/#libicaopenapiv2projectbaseapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance.","title":"libica.openapi.v2.ProjectBaseApi"},{"location":"v2/docs/ProjectBaseApi/#create_base_connection_details","text":"BaseConnection create_base_connection_details(project_id) Creates the connection details to snowflake instance.","title":"create_base_connection_details"},{"location":"v2/docs/ProjectBaseApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.base_connection import BaseConnection from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_api . ProjectBaseApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Creates the connection details to snowflake instance. api_response = api_instance . create_base_connection_details ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseApi->create_base_connection_details: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectBaseApi/#parameters","text":"Name Type Description Notes project_id str The ID of the project","title":"Parameters"},{"location":"v2/docs/ProjectBaseApi/#return-type","text":"BaseConnection","title":"Return type"},{"location":"v2/docs/ProjectBaseApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectBaseApi/#http-response-details","text":"Status code Description Response headers 200 The base connection details are created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseJobApi/","text":"libica.openapi.v2.ProjectBaseJobApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs get_base_job \u00b6 BaseJob get_base_job(project_id, base_job_id) Retrieve a base job. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_job_api from libica.openapi.v2.model.base_job import BaseJob from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_job_api . ProjectBaseJobApi ( api_client ) project_id = \"projectId_example\" # str | base_job_id = \"baseJobId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a base job. api_response = api_instance . get_base_job ( project_id , base_job_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseJobApi->get_base_job: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str base_job_id str Return type \u00b6 BaseJob Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_base_jobs \u00b6 BaseJobList get_base_jobs(project_id) Retrieve a list of base jobs Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_job_api from libica.openapi.v2.model.base_job_list import BaseJobList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_job_api . ProjectBaseJobApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of base jobs api_response = api_instance . get_base_jobs ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseJobApi->get_base_jobs: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str Return type \u00b6 BaseJobList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectBaseJobApi"},{"location":"v2/docs/ProjectBaseJobApi/#libicaopenapiv2projectbasejobapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs","title":"libica.openapi.v2.ProjectBaseJobApi"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_job","text":"BaseJob get_base_job(project_id, base_job_id) Retrieve a base job.","title":"get_base_job"},{"location":"v2/docs/ProjectBaseJobApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_job_api from libica.openapi.v2.model.base_job import BaseJob from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_job_api . ProjectBaseJobApi ( api_client ) project_id = \"projectId_example\" # str | base_job_id = \"baseJobId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a base job. api_response = api_instance . get_base_job ( project_id , base_job_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseJobApi->get_base_job: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectBaseJobApi/#parameters","text":"Name Type Description Notes project_id str base_job_id str","title":"Parameters"},{"location":"v2/docs/ProjectBaseJobApi/#return-type","text":"BaseJob","title":"Return type"},{"location":"v2/docs/ProjectBaseJobApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_jobs","text":"BaseJobList get_base_jobs(project_id) Retrieve a list of base jobs","title":"get_base_jobs"},{"location":"v2/docs/ProjectBaseJobApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_job_api from libica.openapi.v2.model.base_job_list import BaseJobList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_job_api . ProjectBaseJobApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of base jobs api_response = api_instance . get_base_jobs ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseJobApi->get_base_jobs: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectBaseJobApi/#parameters_1","text":"Name Type Description Notes project_id str","title":"Parameters"},{"location":"v2/docs/ProjectBaseJobApi/#return-type_1","text":"BaseJobList","title":"Return type"},{"location":"v2/docs/ProjectBaseJobApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details_1","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseTable/","text":"ProjectBaseTable \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the table which should be used in writing queries type str The type of the table status str The status of the table tenant_name str, none_type [optional] description str, none_type The description of the table [optional] number_of_records int, none_type The number of record in the table [optional] data_size int, none_type The amount of Data contained in this table in bytes [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectBaseTable"},{"location":"v2/docs/ProjectBaseTable/#projectbasetable","text":"","title":"ProjectBaseTable"},{"location":"v2/docs/ProjectBaseTable/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the table which should be used in writing queries type str The type of the table status str The status of the table tenant_name str, none_type [optional] description str, none_type The description of the table [optional] number_of_records int, none_type The number of record in the table [optional] data_size int, none_type The amount of Data contained in this table in bytes [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectBaseTableApi/","text":"libica.openapi.v2.ProjectBaseTableApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. get_base_tables \u00b6 ProjectBaseTableList get_base_tables(project_id) Retrieve a liste of base tables. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_table_api from libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_table_api . ProjectBaseTableApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a liste of base tables. api_response = api_instance . get_base_tables ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->get_base_tables: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str Return type \u00b6 ProjectBaseTableList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] load_data \u00b6 BaseJob load_data(project_id, table_id) Load data in a base table. Load data in the specified table Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_table_api from libica.openapi.v2.model.base_job import BaseJob from libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_table_api . ProjectBaseTableApi ( api_client ) project_id = \"projectId_example\" # str | table_id = \"tableId_example\" # str | load_data_in_base_request = LoadDataInBaseRequest ( allow_jagged_rows = False , allow_quoted_newlines = False , data_id = \"data_id_example\" , delimiter = \",\" , encoding = \"UTF8\" , force_load = False , header_rows_to_skip = 1 , ignore_unknown_values = False , include_references = True , include_data_reference = True , include_sample_reference = True , include_pipeline_reference = True , include_pipeline_execution_reference = True , include_tenant_reference = True , null_marker = \"null_marker_example\" , number_of_errors_allowed = 0 , quote = \"quote_example\" , write_preference = \"APPENDTOTABLE\" , ) # LoadDataInBaseRequest | Load data request (optional) # example passing only required values which don't have defaults set try : # Load data in a base table. api_response = api_instance . load_data ( project_id , table_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->load_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Load data in a base table. api_response = api_instance . load_data ( project_id , table_id , load_data_in_base_request = load_data_in_base_request ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->load_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request [optional] Return type \u00b6 BaseJob Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectBaseTableApi"},{"location":"v2/docs/ProjectBaseTableApi/#libicaopenapiv2projectbasetableapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table.","title":"libica.openapi.v2.ProjectBaseTableApi"},{"location":"v2/docs/ProjectBaseTableApi/#get_base_tables","text":"ProjectBaseTableList get_base_tables(project_id) Retrieve a liste of base tables.","title":"get_base_tables"},{"location":"v2/docs/ProjectBaseTableApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_table_api from libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_table_api . ProjectBaseTableApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a liste of base tables. api_response = api_instance . get_base_tables ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->get_base_tables: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectBaseTableApi/#parameters","text":"Name Type Description Notes project_id str","title":"Parameters"},{"location":"v2/docs/ProjectBaseTableApi/#return-type","text":"ProjectBaseTableList","title":"Return type"},{"location":"v2/docs/ProjectBaseTableApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseTableApi/#load_data","text":"BaseJob load_data(project_id, table_id) Load data in a base table. Load data in the specified table","title":"load_data"},{"location":"v2/docs/ProjectBaseTableApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_base_table_api from libica.openapi.v2.model.base_job import BaseJob from libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_base_table_api . ProjectBaseTableApi ( api_client ) project_id = \"projectId_example\" # str | table_id = \"tableId_example\" # str | load_data_in_base_request = LoadDataInBaseRequest ( allow_jagged_rows = False , allow_quoted_newlines = False , data_id = \"data_id_example\" , delimiter = \",\" , encoding = \"UTF8\" , force_load = False , header_rows_to_skip = 1 , ignore_unknown_values = False , include_references = True , include_data_reference = True , include_sample_reference = True , include_pipeline_reference = True , include_pipeline_execution_reference = True , include_tenant_reference = True , null_marker = \"null_marker_example\" , number_of_errors_allowed = 0 , quote = \"quote_example\" , write_preference = \"APPENDTOTABLE\" , ) # LoadDataInBaseRequest | Load data request (optional) # example passing only required values which don't have defaults set try : # Load data in a base table. api_response = api_instance . load_data ( project_id , table_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->load_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Load data in a base table. api_response = api_instance . load_data ( project_id , table_id , load_data_in_base_request = load_data_in_base_request ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectBaseTableApi->load_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectBaseTableApi/#parameters_1","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request [optional]","title":"Parameters"},{"location":"v2/docs/ProjectBaseTableApi/#return-type_1","text":"BaseJob","title":"Return type"},{"location":"v2/docs/ProjectBaseTableApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers_1","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details_1","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectBaseTableList/","text":"ProjectBaseTableList \u00b6 Properties \u00b6 Name Type Description Notes items [ProjectBaseTable] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectBaseTableList"},{"location":"v2/docs/ProjectBaseTableList/#projectbasetablelist","text":"","title":"ProjectBaseTableList"},{"location":"v2/docs/ProjectBaseTableList/#properties","text":"Name Type Description Notes items [ProjectBaseTable] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectCustomEventsApi/","text":"libica.openapi.v2.ProjectCustomEventsApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. create_custom_event \u00b6 create_custom_event(project_id, create_custom_event) Create a new custom event. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_events_api from libica.openapi.v2.model.create_custom_event import CreateCustomEvent from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_events_api . ProjectCustomEventsApi ( api_client ) project_id = \"projectId_example\" # str | create_custom_event = CreateCustomEvent ( code = \"code_example\" , content = {}, ) # CreateCustomEvent | # example passing only required values which don't have defaults set try : # Create a new custom event. api_instance . create_custom_event ( project_id , create_custom_event ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomEventsApi->create_custom_event: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_custom_event CreateCustomEvent Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The event is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectCustomEventsApi"},{"location":"v2/docs/ProjectCustomEventsApi/#libicaopenapiv2projectcustomeventsapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event.","title":"libica.openapi.v2.ProjectCustomEventsApi"},{"location":"v2/docs/ProjectCustomEventsApi/#create_custom_event","text":"create_custom_event(project_id, create_custom_event) Create a new custom event.","title":"create_custom_event"},{"location":"v2/docs/ProjectCustomEventsApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_events_api from libica.openapi.v2.model.create_custom_event import CreateCustomEvent from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_events_api . ProjectCustomEventsApi ( api_client ) project_id = \"projectId_example\" # str | create_custom_event = CreateCustomEvent ( code = \"code_example\" , content = {}, ) # CreateCustomEvent | # example passing only required values which don't have defaults set try : # Create a new custom event. api_instance . create_custom_event ( project_id , create_custom_event ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomEventsApi->create_custom_event: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomEventsApi/#parameters","text":"Name Type Description Notes project_id str create_custom_event CreateCustomEvent","title":"Parameters"},{"location":"v2/docs/ProjectCustomEventsApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectCustomEventsApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomEventsApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomEventsApi/#http-response-details","text":"Status code Description Response headers 204 The event is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/","text":"libica.openapi.v2.ProjectCustomNotificationSubscriptionsApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription create_notification_subscription \u00b6 CustomNotificationSubscription create_notification_subscription(project_id) Create a custom notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.create_custom_notification_subscription import CreateCustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project create_custom_notification_subscription = CreateCustomNotificationSubscription ( custom_event_code = \"custom_event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel_id = \"notification_channel_id_example\" , ) # CreateCustomNotificationSubscription | The new subscription (optional) # example passing only required values which don't have defaults set try : # Create a custom notification subscription api_response = api_instance . create_notification_subscription ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->create_notification_subscription: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a custom notification subscription api_response = api_instance . create_notification_subscription ( project_id , create_custom_notification_subscription = create_custom_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->create_notification_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project create_custom_notification_subscription CreateCustomNotificationSubscription The new subscription [optional] Return type \u00b6 CustomNotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The custom notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_notification_subscription \u00b6 delete_notification_subscription(project_id, subscription_id) Delete a custom notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to delete # example passing only required values which don't have defaults set try : # Delete a custom notification subscription api_instance . delete_notification_subscription ( project_id , subscription_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->delete_notification_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to delete Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The custom notification subscription is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_subscription \u00b6 CustomNotificationSubscription get_notification_subscription(project_id, subscription_id) Retrieve a notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription # example passing only required values which don't have defaults set try : # Retrieve a notification subscription api_response = api_instance . get_notification_subscription ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->get_notification_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription Return type \u00b6 CustomNotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_subscriptions \u00b6 CustomNotificationSubscriptionList get_notification_subscriptions(project_id) Retrieve notification subscriptions Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription_list import CustomNotificationSubscriptionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Retrieve notification subscriptions api_response = api_instance . get_notification_subscriptions ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->get_notification_subscriptions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project Return type \u00b6 CustomNotificationSubscriptionList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_notification_subscription \u00b6 CustomNotificationSubscription update_notification_subscription(project_id, subscription_id) Update a notification subscription Fields which can be updated: - enabled - eventCode - filterExpression - notificationChannel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) custom_notification_subscription = CustomNotificationSubscription ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , custom_event_code = \"custom_event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ), ) # CustomNotificationSubscription | The updated subscription (optional) # example passing only required values which don't have defaults set try : # Update a notification subscription api_response = api_instance . update_notification_subscription ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->update_notification_subscription: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification subscription api_response = api_instance . update_notification_subscription ( project_id , subscription_id , if_match = if_match , custom_notification_subscription = custom_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->update_notification_subscription: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] custom_notification_subscription CustomNotificationSubscription The updated subscription [optional] Return type \u00b6 CustomNotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectCustomNotificationSubscriptionsApi"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#libicaopenapiv2projectcustomnotificationsubscriptionsapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription","title":"libica.openapi.v2.ProjectCustomNotificationSubscriptionsApi"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#create_notification_subscription","text":"CustomNotificationSubscription create_notification_subscription(project_id) Create a custom notification subscription","title":"create_notification_subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.create_custom_notification_subscription import CreateCustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project create_custom_notification_subscription = CreateCustomNotificationSubscription ( custom_event_code = \"custom_event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel_id = \"notification_channel_id_example\" , ) # CreateCustomNotificationSubscription | The new subscription (optional) # example passing only required values which don't have defaults set try : # Create a custom notification subscription api_response = api_instance . create_notification_subscription ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->create_notification_subscription: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a custom notification subscription api_response = api_instance . create_notification_subscription ( project_id , create_custom_notification_subscription = create_custom_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->create_notification_subscription: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters","text":"Name Type Description Notes project_id str The ID of the project create_custom_notification_subscription CreateCustomNotificationSubscription The new subscription [optional]","title":"Parameters"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type","text":"CustomNotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details","text":"Status code Description Response headers 200 The custom notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#delete_notification_subscription","text":"delete_notification_subscription(project_id, subscription_id) Delete a custom notification subscription","title":"delete_notification_subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to delete # example passing only required values which don't have defaults set try : # Delete a custom notification subscription api_instance . delete_notification_subscription ( project_id , subscription_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->delete_notification_subscription: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_1","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to delete","title":"Parameters"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_1","text":"Status code Description Response headers 204 The custom notification subscription is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_notification_subscription","text":"CustomNotificationSubscription get_notification_subscription(project_id, subscription_id) Retrieve a notification subscription","title":"get_notification_subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription # example passing only required values which don't have defaults set try : # Retrieve a notification subscription api_response = api_instance . get_notification_subscription ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->get_notification_subscription: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_2","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription","title":"Parameters"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_2","text":"CustomNotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_2","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_notification_subscriptions","text":"CustomNotificationSubscriptionList get_notification_subscriptions(project_id) Retrieve notification subscriptions","title":"get_notification_subscriptions"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription_list import CustomNotificationSubscriptionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Retrieve notification subscriptions api_response = api_instance . get_notification_subscriptions ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->get_notification_subscriptions: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_3","text":"Name Type Description Notes project_id str The ID of the project","title":"Parameters"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_3","text":"CustomNotificationSubscriptionList","title":"Return type"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_3","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#update_notification_subscription","text":"CustomNotificationSubscription update_notification_subscription(project_id, subscription_id) Update a notification subscription Fields which can be updated: - enabled - eventCode - filterExpression - notificationChannel","title":"update_notification_subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_custom_notification_subscriptions_api from libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_custom_notification_subscriptions_api . ProjectCustomNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) custom_notification_subscription = CustomNotificationSubscription ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , custom_event_code = \"custom_event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ), ) # CustomNotificationSubscription | The updated subscription (optional) # example passing only required values which don't have defaults set try : # Update a notification subscription api_response = api_instance . update_notification_subscription ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->update_notification_subscription: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification subscription api_response = api_instance . update_notification_subscription ( project_id , subscription_id , if_match = if_match , custom_notification_subscription = custom_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectCustomNotificationSubscriptionsApi->update_notification_subscription: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_4","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] custom_notification_subscription CustomNotificationSubscription The updated subscription [optional]","title":"Parameters"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_4","text":"CustomNotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_4","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_4","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectData/","text":"ProjectData \u00b6 Properties \u00b6 Name Type Description Notes data Data project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectData"},{"location":"v2/docs/ProjectData/#projectdata","text":"","title":"ProjectData"},{"location":"v2/docs/ProjectData/#properties","text":"Name Type Description Notes data Data project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectDataApi/","text":"libica.openapi.v2.ProjectDataApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. create_data_in_project POST /api/projects/{projectId}/data Create data in this project. create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. archive_data \u00b6 archive_data(project_id, data_id) Schedule this data for archival. Endpoint for scheduling this data for archival. This will also archive all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for archival. api_instance . archive_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->archive_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully scheduled for archival. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_folder_upload_session \u00b6 FolderUploadSession complete_folder_upload_session(project_id, data_id, folder_upload_session_id) Complete a trackable folder upload session. Complete a trackable folder upload session. By completing the folder upload session, and specifying how many files you have uploaded, ICA can ensure that all uploaded files are accounted for. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.complete_folder_upload_session import CompleteFolderUploadSession from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | folder_upload_session_id = \"folderUploadSessionId_example\" # str | complete_folder_upload_session = CompleteFolderUploadSession ( number_of_expected_uploaded_files = 1 , ) # CompleteFolderUploadSession | The info required to complete the folder upload session. (optional) # example passing only required values which don't have defaults set try : # Complete a trackable folder upload session. api_response = api_instance . complete_folder_upload_session ( project_id , data_id , folder_upload_session_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->complete_folder_upload_session: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Complete a trackable folder upload session. api_response = api_instance . complete_folder_upload_session ( project_id , data_id , folder_upload_session_id , complete_folder_upload_session = complete_folder_upload_session ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->complete_folder_upload_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str folder_upload_session_id str complete_folder_upload_session CompleteFolderUploadSession The info required to complete the folder upload session. [optional] Return type \u00b6 FolderUploadSession Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The folder upload session is successfully completed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_data_in_project \u00b6 ProjectData create_data_in_project(project_id) Create data in this project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_data import CreateData from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | create_data = CreateData ( name = \"name_example\" , folder_id = \"folder_id_example\" , folder_path = \"folder_path_example\" , format_code = \"format_code_example\" , data_type = \"FILE\" , ) # CreateData | The data to create. (optional) # example passing only required values which don't have defaults set try : # Create data in this project. api_response = api_instance . create_data_in_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_data_in_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create data in this project. api_response = api_instance . create_data_in_project ( project_id , create_data = create_data ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_data_in_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_data CreateData The data to create. [optional] Return type \u00b6 ProjectData Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The data is successfully created in this project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_download_url_for_data \u00b6 Download create_download_url_for_data(project_id, data_id) Retrieve a download URL for this data. Can be used to download a file directly from the region where it is located, no connector is needed. Only small files can be downloaded, otherwise a response with status 400 will be returned if the file is too big. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.download import Download from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a download URL for this data. api_response = api_instance . create_download_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_download_url_for_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 Download Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_folder_upload_session \u00b6 FolderUploadSession create_folder_upload_session(project_id, data_id) Create a trackable folder upload session. This endpoint can be used to ensure that all uploaded files within the requested session are accounted for. This call has to be used together with the :complete endpoint once upload is done. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | create_temporary_credentials = CreateTemporaryCredentials ( credentials_format = \"RCLONE\" , ) # CreateTemporaryCredentials | Temporary credentials request options. (optional) # example passing only required values which don't have defaults set try : # Create a trackable folder upload session. api_response = api_instance . create_folder_upload_session ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_folder_upload_session: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a trackable folder upload session. api_response = api_instance . create_folder_upload_session ( project_id , data_id , create_temporary_credentials = create_temporary_credentials ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_folder_upload_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional] Return type \u00b6 FolderUploadSession Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The folder upload session is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_inline_view_url_for_data \u00b6 InlineView create_inline_view_url_for_data(project_id, data_id) Retrieve an URL for this data to use for inline view in a browser. Can be used to view a file directly from the region where it is located, no connector is needed. Only small files can be viewed, otherwise a response with status 400 will be returned if the file is too big. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.inline_view import InlineView from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve an URL for this data to use for inline view in a browser. api_response = api_instance . create_inline_view_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_inline_view_url_for_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 InlineView Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_temporary_credentials_for_data \u00b6 TempCredentials create_temporary_credentials_for_data(project_id, data_id) Retrieve temporary credentials for this data. Can be used to upload or download a file directly from the region where it is located, no connector is needed. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials from libica.openapi.v2.model.temp_credentials import TempCredentials from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | create_temporary_credentials = CreateTemporaryCredentials ( credentials_format = \"RCLONE\" , ) # CreateTemporaryCredentials | Temporary credentials request options. (optional) # example passing only required values which don't have defaults set try : # Retrieve temporary credentials for this data. api_response = api_instance . create_temporary_credentials_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_temporary_credentials_for_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve temporary credentials for this data. api_response = api_instance . create_temporary_credentials_for_data ( project_id , data_id , create_temporary_credentials = create_temporary_credentials ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_temporary_credentials_for_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional] Return type \u00b6 TempCredentials Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The temporary credentials are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_upload_url_for_data \u00b6 Upload create_upload_url_for_data(project_id, data_id) Retrieve an upload URL for this data. Can be used to upload a file directly from the region where it is located, no connector is needed. Only small files can be uploaded, otherwise a response with status 400 will be returned if the file is too big. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.upload import Upload from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | file_type = \"fileType_example\" # str | (optional) hash = \"hash_example\" # str | (optional) # example passing only required values which don't have defaults set try : # Retrieve an upload URL for this data. api_response = api_instance . create_upload_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_upload_url_for_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve an upload URL for this data. api_response = api_instance . create_upload_url_for_data ( project_id , data_id , file_type = file_type , hash = hash ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_upload_url_for_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str file_type str [optional] hash str [optional] Return type \u00b6 Upload Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The upload URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_data \u00b6 delete_data(project_id, data_id) Schedule this data for deletion. Endpoint for scheduling this data for deletion. This will also delete all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for deletion. api_instance . delete_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->delete_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully scheduled for deletion. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_data_eligible_for_linking \u00b6 DataPagedList get_data_eligible_for_linking(project_id) Retrieve a list of data eligible for linking to the current project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_paged_list import DataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of data eligible for linking to the current project. api_response = api_instance . get_data_eligible_for_linking ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_data_eligible_for_linking: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data eligible for linking to the current project. api_response = api_instance . get_data_eligible_for_linking ( project_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_data_eligible_for_linking: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional] Return type \u00b6 DataPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_folder_upload_session \u00b6 FolderUploadSession get_folder_upload_session(project_id, data_id, folder_upload_session_id) Retrieve folder upload session details. Retrieve folder upload session details, including the current status of your upload session. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | folder_upload_session_id = \"folderUploadSessionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve folder upload session details. api_response = api_instance . get_folder_upload_session ( project_id , data_id , folder_upload_session_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_folder_upload_session: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str folder_upload_session_id str Return type \u00b6 FolderUploadSession Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The folder upload session details are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_non_sample_project_data \u00b6 ProjectDataPagedList get_non_sample_project_data(project_id) Retrieve a list of project data not linked to a sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of project data not linked to a sample. api_response = api_instance . get_non_sample_project_data ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_non_sample_project_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of project data not linked to a sample. api_response = api_instance . get_non_sample_project_data ( project_id , page_offset = page_offset , page_token = page_token , page_size = page_size ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_non_sample_project_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] Return type \u00b6 ProjectDataPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data \u00b6 ProjectData get_project_data(project_id, data_id) Retrieve a project data. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project data. api_response = api_instance . get_project_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 ProjectData Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_children \u00b6 DataList get_project_data_children(project_id, data_id) Retrieve the children of this data. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_list import DataList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve the children of this data. api_response = api_instance . get_project_data_children ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_children: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 DataList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of data children is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_data_list \u00b6 ProjectDataPagedList get_project_data_list(project_id) Retrieve the list of project data. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of project data. api_response = api_instance . get_project_data_list ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_list: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of project data. api_response = api_instance . get_project_data_list ( project_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_list: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional] Return type \u00b6 ProjectDataPagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_projects_linked_to_data \u00b6 ProjectList get_projects_linked_to_data(project_id, data_id) Retrieve a list of projects to which this data is linked. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_list import ProjectList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of projects to which this data is linked. api_response = api_instance . get_projects_linked_to_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_projects_linked_to_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 ProjectList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_data_to_project \u00b6 ProjectData link_data_to_project(project_id, data_id) Link data to this project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Link data to this project. api_response = api_instance . link_data_to_project ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->link_data_to_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 ProjectData Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The data is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] schedule_download_for_data \u00b6 DataTransfer schedule_download_for_data(project_id, data_id, schedule_download) Schedule a download. Endpoint for scheduling a download for the data specified by the ID to a connector. This download will only start when the connector is running. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_transfer import DataTransfer from libica.openapi.v2.model.schedule_download import ScheduleDownload from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | schedule_download = ScheduleDownload ( connector_id = \"connector_id_example\" , protocol = \"HTTPS\" , local_path = \"local_path_example\" , disable_hashing = True , ) # ScheduleDownload | # example passing only required values which don't have defaults set try : # Schedule a download. api_response = api_instance . schedule_download_for_data ( project_id , data_id , schedule_download ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->schedule_download_for_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str schedule_download ScheduleDownload Return type \u00b6 DataTransfer Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 0 The datatransfer which is scheduled. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). [Back to top] [Back to API list] [Back to Model list] [Back to README] unarchive_data \u00b6 unarchive_data(project_id, data_id) Schedule this data for unarchival. Endpoint for scheduling this data for unarchival. This will also unarchive all files and directories below that data. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for unarchival. api_instance . unarchive_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->unarchive_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully scheduled for unarchival. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_data_from_project \u00b6 unlink_data_from_project(project_id, data_id) Unlink data from this project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink data from this project. api_instance . unlink_data_from_project ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->unlink_data_from_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully unlinked from this project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_data \u00b6 ProjectData update_project_data(project_id, data_id) Update this project data. Fields which can be updated for files: - data.willBeArchivedAt - data.willBeDeletedAt - data.format - data.tags Fields which can be updated for folders: - data.tags Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | project_data = ProjectData ( data = Data ( id = \"id_example\" , details = DataDetails ( time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , owning_project_id = \"owning_project_id_example\" , name = \"name_example\" , path = \"path_example\" , file_size_in_bytes = 1 , status = \"PARTIAL\" , tags = DataTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], run_out_tags = [ \"run_out_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), format = DataFormat ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , description = \"description_example\" , mime_type = \"mime_type_example\" , ), data_type = \"FILE\" , object_e_tag = \"object_e_tag_example\" , stored_for_the_first_time_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), will_be_archived_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), will_be_deleted_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), ), ), project_id = \"project_id_example\" , ) # ProjectData | The updated project data. (optional) # example passing only required values which don't have defaults set try : # Update this project data. api_response = api_instance . update_project_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->update_project_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update this project data. api_response = api_instance . update_project_data ( project_id , data_id , project_data = project_data ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->update_project_data: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_id str project_data ProjectData The updated project data. [optional] Return type \u00b6 ProjectData Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project data is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 202 The update of the project data is accepted and applied asynchronously. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectDataApi"},{"location":"v2/docs/ProjectDataApi/#libicaopenapiv2projectdataapi","text":"All URIs are relative to /ica/rest Method HTTP request Description archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. create_data_in_project POST /api/projects/{projectId}/data Create data in this project. create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data.","title":"libica.openapi.v2.ProjectDataApi"},{"location":"v2/docs/ProjectDataApi/#archive_data","text":"archive_data(project_id, data_id) Schedule this data for archival. Endpoint for scheduling this data for archival. This will also archive all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"archive_data"},{"location":"v2/docs/ProjectDataApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for archival. api_instance . archive_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->archive_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details","text":"Status code Description Response headers 204 The data is successfully scheduled for archival. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#complete_folder_upload_session","text":"FolderUploadSession complete_folder_upload_session(project_id, data_id, folder_upload_session_id) Complete a trackable folder upload session. Complete a trackable folder upload session. By completing the folder upload session, and specifying how many files you have uploaded, ICA can ensure that all uploaded files are accounted for.","title":"complete_folder_upload_session"},{"location":"v2/docs/ProjectDataApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.complete_folder_upload_session import CompleteFolderUploadSession from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | folder_upload_session_id = \"folderUploadSessionId_example\" # str | complete_folder_upload_session = CompleteFolderUploadSession ( number_of_expected_uploaded_files = 1 , ) # CompleteFolderUploadSession | The info required to complete the folder upload session. (optional) # example passing only required values which don't have defaults set try : # Complete a trackable folder upload session. api_response = api_instance . complete_folder_upload_session ( project_id , data_id , folder_upload_session_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->complete_folder_upload_session: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Complete a trackable folder upload session. api_response = api_instance . complete_folder_upload_session ( project_id , data_id , folder_upload_session_id , complete_folder_upload_session = complete_folder_upload_session ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->complete_folder_upload_session: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_1","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str complete_folder_upload_session CompleteFolderUploadSession The info required to complete the folder upload session. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_1","text":"FolderUploadSession","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_1","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_1","text":"Status code Description Response headers 200 The folder upload session is successfully completed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_data_in_project","text":"ProjectData create_data_in_project(project_id) Create data in this project.","title":"create_data_in_project"},{"location":"v2/docs/ProjectDataApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_data import CreateData from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | create_data = CreateData ( name = \"name_example\" , folder_id = \"folder_id_example\" , folder_path = \"folder_path_example\" , format_code = \"format_code_example\" , data_type = \"FILE\" , ) # CreateData | The data to create. (optional) # example passing only required values which don't have defaults set try : # Create data in this project. api_response = api_instance . create_data_in_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_data_in_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create data in this project. api_response = api_instance . create_data_in_project ( project_id , create_data = create_data ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_data_in_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_2","text":"Name Type Description Notes project_id str create_data CreateData The data to create. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_2","text":"ProjectData","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_2","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_2","text":"Status code Description Response headers 201 The data is successfully created in this project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_download_url_for_data","text":"Download create_download_url_for_data(project_id, data_id) Retrieve a download URL for this data. Can be used to download a file directly from the region where it is located, no connector is needed. Only small files can be downloaded, otherwise a response with status 400 will be returned if the file is too big.","title":"create_download_url_for_data"},{"location":"v2/docs/ProjectDataApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.download import Download from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a download URL for this data. api_response = api_instance . create_download_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_download_url_for_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_3","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_3","text":"Download","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_3","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_folder_upload_session","text":"FolderUploadSession create_folder_upload_session(project_id, data_id) Create a trackable folder upload session. This endpoint can be used to ensure that all uploaded files within the requested session are accounted for. This call has to be used together with the :complete endpoint once upload is done.","title":"create_folder_upload_session"},{"location":"v2/docs/ProjectDataApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | create_temporary_credentials = CreateTemporaryCredentials ( credentials_format = \"RCLONE\" , ) # CreateTemporaryCredentials | Temporary credentials request options. (optional) # example passing only required values which don't have defaults set try : # Create a trackable folder upload session. api_response = api_instance . create_folder_upload_session ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_folder_upload_session: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a trackable folder upload session. api_response = api_instance . create_folder_upload_session ( project_id , data_id , create_temporary_credentials = create_temporary_credentials ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_folder_upload_session: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_4","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_4","text":"FolderUploadSession","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_4","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_4","text":"Status code Description Response headers 201 The folder upload session is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_inline_view_url_for_data","text":"InlineView create_inline_view_url_for_data(project_id, data_id) Retrieve an URL for this data to use for inline view in a browser. Can be used to view a file directly from the region where it is located, no connector is needed. Only small files can be viewed, otherwise a response with status 400 will be returned if the file is too big.","title":"create_inline_view_url_for_data"},{"location":"v2/docs/ProjectDataApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.inline_view import InlineView from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve an URL for this data to use for inline view in a browser. api_response = api_instance . create_inline_view_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_inline_view_url_for_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_5","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_5","text":"InlineView","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_5","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_temporary_credentials_for_data","text":"TempCredentials create_temporary_credentials_for_data(project_id, data_id) Retrieve temporary credentials for this data. Can be used to upload or download a file directly from the region where it is located, no connector is needed.","title":"create_temporary_credentials_for_data"},{"location":"v2/docs/ProjectDataApi/#example_6","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials from libica.openapi.v2.model.temp_credentials import TempCredentials from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | create_temporary_credentials = CreateTemporaryCredentials ( credentials_format = \"RCLONE\" , ) # CreateTemporaryCredentials | Temporary credentials request options. (optional) # example passing only required values which don't have defaults set try : # Retrieve temporary credentials for this data. api_response = api_instance . create_temporary_credentials_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_temporary_credentials_for_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve temporary credentials for this data. api_response = api_instance . create_temporary_credentials_for_data ( project_id , data_id , create_temporary_credentials = create_temporary_credentials ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_temporary_credentials_for_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_6","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_6","text":"TempCredentials","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_6","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_6","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_6","text":"Status code Description Response headers 200 The temporary credentials are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#create_upload_url_for_data","text":"Upload create_upload_url_for_data(project_id, data_id) Retrieve an upload URL for this data. Can be used to upload a file directly from the region where it is located, no connector is needed. Only small files can be uploaded, otherwise a response with status 400 will be returned if the file is too big.","title":"create_upload_url_for_data"},{"location":"v2/docs/ProjectDataApi/#example_7","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.upload import Upload from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | file_type = \"fileType_example\" # str | (optional) hash = \"hash_example\" # str | (optional) # example passing only required values which don't have defaults set try : # Retrieve an upload URL for this data. api_response = api_instance . create_upload_url_for_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_upload_url_for_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve an upload URL for this data. api_response = api_instance . create_upload_url_for_data ( project_id , data_id , file_type = file_type , hash = hash ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->create_upload_url_for_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_7","text":"Name Type Description Notes project_id str data_id str file_type str [optional] hash str [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_7","text":"Upload","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_7","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_7","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_7","text":"Status code Description Response headers 200 The upload URL is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#delete_data","text":"delete_data(project_id, data_id) Schedule this data for deletion. Endpoint for scheduling this data for deletion. This will also delete all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"delete_data"},{"location":"v2/docs/ProjectDataApi/#example_8","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for deletion. api_instance . delete_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->delete_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_8","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_8","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_8","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_8","text":"Status code Description Response headers 204 The data is successfully scheduled for deletion. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_data_eligible_for_linking","text":"DataPagedList get_data_eligible_for_linking(project_id) Retrieve a list of data eligible for linking to the current project.","title":"get_data_eligible_for_linking"},{"location":"v2/docs/ProjectDataApi/#example_9","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_paged_list import DataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of data eligible for linking to the current project. api_response = api_instance . get_data_eligible_for_linking ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_data_eligible_for_linking: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data eligible for linking to the current project. api_response = api_instance . get_data_eligible_for_linking ( project_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_data_eligible_for_linking: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_9","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_9","text":"DataPagedList","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_9","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_9","text":"Status code Description Response headers 200 The list of data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_folder_upload_session","text":"FolderUploadSession get_folder_upload_session(project_id, data_id, folder_upload_session_id) Retrieve folder upload session details. Retrieve folder upload session details, including the current status of your upload session.","title":"get_folder_upload_session"},{"location":"v2/docs/ProjectDataApi/#example_10","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.folder_upload_session import FolderUploadSession from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | folder_upload_session_id = \"folderUploadSessionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve folder upload session details. api_response = api_instance . get_folder_upload_session ( project_id , data_id , folder_upload_session_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_folder_upload_session: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_10","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_10","text":"FolderUploadSession","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_10","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_10","text":"Status code Description Response headers 200 The folder upload session details are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_non_sample_project_data","text":"ProjectDataPagedList get_non_sample_project_data(project_id) Retrieve a list of project data not linked to a sample.","title":"get_non_sample_project_data"},{"location":"v2/docs/ProjectDataApi/#example_11","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of project data not linked to a sample. api_response = api_instance . get_non_sample_project_data ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_non_sample_project_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of project data not linked to a sample. api_response = api_instance . get_non_sample_project_data ( project_id , page_offset = page_offset , page_token = page_token , page_size = page_size ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_non_sample_project_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_11","text":"Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_11","text":"ProjectDataPagedList","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_11","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_11","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_project_data","text":"ProjectData get_project_data(project_id, data_id) Retrieve a project data.","title":"get_project_data"},{"location":"v2/docs/ProjectDataApi/#example_12","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project data. api_response = api_instance . get_project_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_12","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_12","text":"ProjectData","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_12","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_12","text":"Status code Description Response headers 200 The project data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_project_data_children","text":"DataList get_project_data_children(project_id, data_id) Retrieve the children of this data.","title":"get_project_data_children"},{"location":"v2/docs/ProjectDataApi/#example_13","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_list import DataList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve the children of this data. api_response = api_instance . get_project_data_children ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_children: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_13","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_13","text":"DataList","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_13","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_13","text":"Status code Description Response headers 200 The list of data children is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_project_data_list","text":"ProjectDataPagedList get_project_data_list(project_id) Retrieve the list of project data.","title":"get_project_data_list"},{"location":"v2/docs/ProjectDataApi/#example_14","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of project data. api_response = api_instance . get_project_data_list ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_list: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of project data. api_response = api_instance . get_project_data_list ( project_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , not_linked_to_sample = not_linked_to_sample , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_project_data_list: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_14","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_14","text":"ProjectDataPagedList","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_14","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_14","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#get_projects_linked_to_data","text":"ProjectList get_projects_linked_to_data(project_id, data_id) Retrieve a list of projects to which this data is linked.","title":"get_projects_linked_to_data"},{"location":"v2/docs/ProjectDataApi/#example_15","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_list import ProjectList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of projects to which this data is linked. api_response = api_instance . get_projects_linked_to_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->get_projects_linked_to_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_15","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_15","text":"ProjectList","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_15","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_15","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_15","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#link_data_to_project","text":"ProjectData link_data_to_project(project_id, data_id) Link data to this project.","title":"link_data_to_project"},{"location":"v2/docs/ProjectDataApi/#example_16","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Link data to this project. api_response = api_instance . link_data_to_project ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->link_data_to_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_16","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_16","text":"ProjectData","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_16","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_16","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_16","text":"Status code Description Response headers 201 The data is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#schedule_download_for_data","text":"DataTransfer schedule_download_for_data(project_id, data_id, schedule_download) Schedule a download. Endpoint for scheduling a download for the data specified by the ID to a connector. This download will only start when the connector is running. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"schedule_download_for_data"},{"location":"v2/docs/ProjectDataApi/#example_17","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.data_transfer import DataTransfer from libica.openapi.v2.model.schedule_download import ScheduleDownload from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | schedule_download = ScheduleDownload ( connector_id = \"connector_id_example\" , protocol = \"HTTPS\" , local_path = \"local_path_example\" , disable_hashing = True , ) # ScheduleDownload | # example passing only required values which don't have defaults set try : # Schedule a download. api_response = api_instance . schedule_download_for_data ( project_id , data_id , schedule_download ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->schedule_download_for_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_17","text":"Name Type Description Notes project_id str data_id str schedule_download ScheduleDownload","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_17","text":"DataTransfer","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_17","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_17","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_17","text":"Status code Description Response headers 0 The datatransfer which is scheduled. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#unarchive_data","text":"unarchive_data(project_id, data_id) Schedule this data for unarchival. Endpoint for scheduling this data for unarchival. This will also unarchive all files and directories below that data. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"unarchive_data"},{"location":"v2/docs/ProjectDataApi/#example_18","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Schedule this data for unarchival. api_instance . unarchive_data ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->unarchive_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_18","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_18","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_18","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_18","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_18","text":"Status code Description Response headers 204 The data is successfully scheduled for unarchival. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#unlink_data_from_project","text":"unlink_data_from_project(project_id, data_id) Unlink data from this project.","title":"unlink_data_from_project"},{"location":"v2/docs/ProjectDataApi/#example_19","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink data from this project. api_instance . unlink_data_from_project ( project_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->unlink_data_from_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_19","text":"Name Type Description Notes project_id str data_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_19","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_19","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_19","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_19","text":"Status code Description Response headers 204 The data is successfully unlinked from this project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataApi/#update_project_data","text":"ProjectData update_project_data(project_id, data_id) Update this project data. Fields which can be updated for files: - data.willBeArchivedAt - data.willBeDeletedAt - data.format - data.tags Fields which can be updated for folders: - data.tags","title":"update_project_data"},{"location":"v2/docs/ProjectDataApi/#example_20","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_api from libica.openapi.v2.model.project_data import ProjectData from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_api . ProjectDataApi ( api_client ) project_id = \"projectId_example\" # str | data_id = \"dataId_example\" # str | project_data = ProjectData ( data = Data ( id = \"id_example\" , details = DataDetails ( time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , owning_project_id = \"owning_project_id_example\" , name = \"name_example\" , path = \"path_example\" , file_size_in_bytes = 1 , status = \"PARTIAL\" , tags = DataTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], run_out_tags = [ \"run_out_tags_example\" , ], reference_tags = [ \"reference_tags_example\" , ], ), format = DataFormat ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , description = \"description_example\" , mime_type = \"mime_type_example\" , ), data_type = \"FILE\" , object_e_tag = \"object_e_tag_example\" , stored_for_the_first_time_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), will_be_archived_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), will_be_deleted_at = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), ), ), project_id = \"project_id_example\" , ) # ProjectData | The updated project data. (optional) # example passing only required values which don't have defaults set try : # Update this project data. api_response = api_instance . update_project_data ( project_id , data_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->update_project_data: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update this project data. api_response = api_instance . update_project_data ( project_id , data_id , project_data = project_data ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataApi->update_project_data: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataApi/#parameters_20","text":"Name Type Description Notes project_id str data_id str project_data ProjectData The updated project data. [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataApi/#return-type_20","text":"ProjectData","title":"Return type"},{"location":"v2/docs/ProjectDataApi/#authorization_20","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_20","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataApi/#http-response-details_20","text":"Status code Description Response headers 200 The project data is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 202 The update of the project data is accepted and applied asynchronously. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataPagedList/","text":"ProjectDataPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [ProjectData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectDataPagedList"},{"location":"v2/docs/ProjectDataPagedList/#projectdatapagedlist","text":"","title":"ProjectDataPagedList"},{"location":"v2/docs/ProjectDataPagedList/#properties","text":"Name Type Description Notes items [ProjectData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectDataTransferApi/","text":"libica.openapi.v2.ProjectDataTransferApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. abort_data_transfer \u00b6 abort_data_transfer(project_id, data_transfer_id) Abort a data transfer. Endpoint for aborting a data transfer.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | data_transfer_id = \"dataTransferId_example\" # str | # example passing only required values which don't have defaults set try : # Abort a data transfer. api_instance . abort_data_transfer ( project_id , data_transfer_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->abort_data_transfer: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_transfer_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data transfer is successfully aborted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_data_transfer \u00b6 DataTransfer get_data_transfer(project_id, data_transfer_id) Retrieve a data transfer. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.data_transfer import DataTransfer from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | data_transfer_id = \"dataTransferId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a data transfer. api_response = api_instance . get_data_transfer ( project_id , data_transfer_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfer: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str data_transfer_id str Return type \u00b6 DataTransfer Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The data transfer is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_data_transfers \u00b6 DataTransfers get_data_transfers(project_id) Retrieve a list of data transfers. Retrieve a list of data transfers for the current app (session), excluding web browser transfers. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.data_transfers import DataTransfers from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | connector = \"connector_example\" # str | The ID of the connector to filter on. (optional) direction = \"direction_example\" # str | The direction to filter on. (optional) status = \"status_example\" # str | The status to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of data transfers. api_response = api_instance . get_data_transfers ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfers: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data transfers. api_response = api_instance . get_data_transfers ( project_id , connector = connector , direction = direction , status = status , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfers: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str connector str The ID of the connector to filter on. [optional] direction str The direction to filter on. [optional] status str The status to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration [optional] Return type \u00b6 DataTransfers Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of data transfers is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectDataTransferApi"},{"location":"v2/docs/ProjectDataTransferApi/#libicaopenapiv2projectdatatransferapi","text":"All URIs are relative to /ica/rest Method HTTP request Description abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers.","title":"libica.openapi.v2.ProjectDataTransferApi"},{"location":"v2/docs/ProjectDataTransferApi/#abort_data_transfer","text":"abort_data_transfer(project_id, data_transfer_id) Abort a data transfer. Endpoint for aborting a data transfer.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"abort_data_transfer"},{"location":"v2/docs/ProjectDataTransferApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | data_transfer_id = \"dataTransferId_example\" # str | # example passing only required values which don't have defaults set try : # Abort a data transfer. api_instance . abort_data_transfer ( project_id , data_transfer_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->abort_data_transfer: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataTransferApi/#parameters","text":"Name Type Description Notes project_id str data_transfer_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataTransferApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectDataTransferApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details","text":"Status code Description Response headers 204 The data transfer is successfully aborted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfer","text":"DataTransfer get_data_transfer(project_id, data_transfer_id) Retrieve a data transfer.","title":"get_data_transfer"},{"location":"v2/docs/ProjectDataTransferApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.data_transfer import DataTransfer from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | data_transfer_id = \"dataTransferId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a data transfer. api_response = api_instance . get_data_transfer ( project_id , data_transfer_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfer: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_1","text":"Name Type Description Notes project_id str data_transfer_id str","title":"Parameters"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_1","text":"DataTransfer","title":"Return type"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_1","text":"Status code Description Response headers 200 The data transfer is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfers","text":"DataTransfers get_data_transfers(project_id) Retrieve a list of data transfers. Retrieve a list of data transfers for the current app (session), excluding web browser transfers.","title":"get_data_transfers"},{"location":"v2/docs/ProjectDataTransferApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_data_transfer_api from libica.openapi.v2.model.data_transfers import DataTransfers from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_data_transfer_api . ProjectDataTransferApi ( api_client ) project_id = \"projectId_example\" # str | connector = \"connector_example\" # str | The ID of the connector to filter on. (optional) direction = \"direction_example\" # str | The direction to filter on. (optional) status = \"status_example\" # str | The status to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of data transfers. api_response = api_instance . get_data_transfers ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfers: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of data transfers. api_response = api_instance . get_data_transfers ( project_id , connector = connector , direction = direction , status = status , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectDataTransferApi->get_data_transfers: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_2","text":"Name Type Description Notes project_id str connector str The ID of the connector to filter on. [optional] direction str The direction to filter on. [optional] status str The status to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration [optional]","title":"Parameters"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_2","text":"DataTransfers","title":"Return type"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of data transfers is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectList/","text":"ProjectList \u00b6 Properties \u00b6 Name Type Description Notes items [Project] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectList"},{"location":"v2/docs/ProjectList/#projectlist","text":"","title":"ProjectList"},{"location":"v2/docs/ProjectList/#properties","text":"Name Type Description Notes items [Project] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/","text":"libica.openapi.v2.ProjectNotificationSubscriptionsApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription create_notification_subscription1 \u00b6 NotificationSubscription create_notification_subscription1(project_id) Create a notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.create_notification_subscription import CreateNotificationSubscription from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project create_notification_subscription = CreateNotificationSubscription ( event_code = \"event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel_id = \"notification_channel_id_example\" , ) # CreateNotificationSubscription | The new subscription (optional) # example passing only required values which don't have defaults set try : # Create a notification subscription api_response = api_instance . create_notification_subscription1 ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->create_notification_subscription1: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a notification subscription api_response = api_instance . create_notification_subscription1 ( project_id , create_notification_subscription = create_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->create_notification_subscription1: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project create_notification_subscription CreateNotificationSubscription The new subscription [optional] Return type \u00b6 NotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_notification_subscription1 \u00b6 delete_notification_subscription1(project_id, subscription_id) Delete a notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to delete # example passing only required values which don't have defaults set try : # Delete a notification subscription api_instance . delete_notification_subscription1 ( project_id , subscription_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->delete_notification_subscription1: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to delete Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The notification subscription is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_subscription1 \u00b6 NotificationSubscription get_notification_subscription1(project_id, subscription_id) Retrieve a notification subscription Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription # example passing only required values which don't have defaults set try : # Retrieve a notification subscription api_response = api_instance . get_notification_subscription1 ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->get_notification_subscription1: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription Return type \u00b6 NotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_notification_subscriptions1 \u00b6 NotificationSubscriptionList get_notification_subscriptions1(project_id) Retrieve notification subscriptions Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.notification_subscription_list import NotificationSubscriptionList from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Retrieve notification subscriptions api_response = api_instance . get_notification_subscriptions1 ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->get_notification_subscriptions1: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project Return type \u00b6 NotificationSubscriptionList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_notification_subscription1 \u00b6 NotificationSubscription update_notification_subscription1(project_id, subscription_id) Update a notification subscription Fields which can be updated: - enabled - eventCode - filterExpression - notificationChannel Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) notification_subscription = NotificationSubscription ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , event_code = \"event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ), ) # NotificationSubscription | The updated subscription (optional) # example passing only required values which don't have defaults set try : # Update a notification subscription api_response = api_instance . update_notification_subscription1 ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->update_notification_subscription1: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification subscription api_response = api_instance . update_notification_subscription1 ( project_id , subscription_id , if_match = if_match , notification_subscription = notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->update_notification_subscription1: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_subscription NotificationSubscription The updated subscription [optional] Return type \u00b6 NotificationSubscription Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectNotificationSubscriptionsApi"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#libicaopenapiv2projectnotificationsubscriptionsapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription","title":"libica.openapi.v2.ProjectNotificationSubscriptionsApi"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#create_notification_subscription1","text":"NotificationSubscription create_notification_subscription1(project_id) Create a notification subscription","title":"create_notification_subscription1"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.create_notification_subscription import CreateNotificationSubscription from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project create_notification_subscription = CreateNotificationSubscription ( event_code = \"event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel_id = \"notification_channel_id_example\" , ) # CreateNotificationSubscription | The new subscription (optional) # example passing only required values which don't have defaults set try : # Create a notification subscription api_response = api_instance . create_notification_subscription1 ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->create_notification_subscription1: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a notification subscription api_response = api_instance . create_notification_subscription1 ( project_id , create_notification_subscription = create_notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->create_notification_subscription1: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters","text":"Name Type Description Notes project_id str The ID of the project create_notification_subscription CreateNotificationSubscription The new subscription [optional]","title":"Parameters"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type","text":"NotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details","text":"Status code Description Response headers 200 The notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#delete_notification_subscription1","text":"delete_notification_subscription1(project_id, subscription_id) Delete a notification subscription","title":"delete_notification_subscription1"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to delete # example passing only required values which don't have defaults set try : # Delete a notification subscription api_instance . delete_notification_subscription1 ( project_id , subscription_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->delete_notification_subscription1: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_1","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to delete","title":"Parameters"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_1","text":"Status code Description Response headers 204 The notification subscription is successfully deleted - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscription1","text":"NotificationSubscription get_notification_subscription1(project_id, subscription_id) Retrieve a notification subscription","title":"get_notification_subscription1"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription # example passing only required values which don't have defaults set try : # Retrieve a notification subscription api_response = api_instance . get_notification_subscription1 ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->get_notification_subscription1: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_2","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription","title":"Parameters"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_2","text":"NotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_2","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscriptions1","text":"NotificationSubscriptionList get_notification_subscriptions1(project_id) Retrieve notification subscriptions","title":"get_notification_subscriptions1"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.problem import Problem from libica.openapi.v2.model.notification_subscription_list import NotificationSubscriptionList from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project # example passing only required values which don't have defaults set try : # Retrieve notification subscriptions api_response = api_instance . get_notification_subscriptions1 ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->get_notification_subscriptions1: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_3","text":"Name Type Description Notes project_id str The ID of the project","title":"Parameters"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_3","text":"NotificationSubscriptionList","title":"Return type"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_3","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#update_notification_subscription1","text":"NotificationSubscription update_notification_subscription1(project_id, subscription_id) Update a notification subscription Fields which can be updated: - enabled - eventCode - filterExpression - notificationChannel","title":"update_notification_subscription1"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_notification_subscriptions_api from libica.openapi.v2.model.notification_subscription import NotificationSubscription from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_notification_subscriptions_api . ProjectNotificationSubscriptionsApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to update if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) notification_subscription = NotificationSubscription ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , event_code = \"event_code_example\" , filter_expression = \"filter_expression_example\" , enabled = True , notification_channel = NotificationChannel ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , enabled = True , type = \"MAIL\" , address = \"address_example\" , ), ) # NotificationSubscription | The updated subscription (optional) # example passing only required values which don't have defaults set try : # Update a notification subscription api_response = api_instance . update_notification_subscription1 ( project_id , subscription_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->update_notification_subscription1: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a notification subscription api_response = api_instance . update_notification_subscription1 ( project_id , subscription_id , if_match = if_match , notification_subscription = notification_subscription ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectNotificationSubscriptionsApi->update_notification_subscription1: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_4","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_subscription NotificationSubscription The updated subscription [optional]","title":"Parameters"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_4","text":"NotificationSubscription","title":"Return type"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_4","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_4","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPagedList/","text":"ProjectPagedList \u00b6 Properties \u00b6 Name Type Description Notes items [Project] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPagedList"},{"location":"v2/docs/ProjectPagedList/#projectpagedlist","text":"","title":"ProjectPagedList"},{"location":"v2/docs/ProjectPagedList/#properties","text":"Name Type Description Notes items [Project] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectPermission/","text":"ProjectPermission \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str role_project str role_flow str role_base str role_bench str membership_type str upload_allowed bool download_allowed bool tenant_name str, none_type [optional] user User [optional] email_address str, none_type Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool, none_type Only present when membershipType is EMAIL [optional] invitation_rejected bool, none_type Only present when user is invited by EMAIL [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPermission"},{"location":"v2/docs/ProjectPermission/#projectpermission","text":"","title":"ProjectPermission"},{"location":"v2/docs/ProjectPermission/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str role_project str role_flow str role_base str role_bench str membership_type str upload_allowed bool download_allowed bool tenant_name str, none_type [optional] user User [optional] email_address str, none_type Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool, none_type Only present when membershipType is EMAIL [optional] invitation_rejected bool, none_type Only present when user is invited by EMAIL [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectPermissionApi/","text":"libica.openapi.v2.ProjectPermissionApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. create_project_permission \u00b6 ProjectPermission create_project_permission(project_id) Create a project permission. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.create_project_permission import CreateProjectPermission from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | create_project_permission = CreateProjectPermission ( role_project = \"NONE\" , role_flow = \"NONE\" , role_base = \"NONE\" , role_bench = \"NONE\" , membership_type = \"USER\" , user_id = \"user_id_example\" , email_address = \"email_address_example\" , workgroup_id = \"workgroup_id_example\" , upload_allowed = True , download_allowed = True , ) # CreateProjectPermission | (optional) # example passing only required values which don't have defaults set try : # Create a project permission. api_response = api_instance . create_project_permission ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->create_project_permission: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a project permission. api_response = api_instance . create_project_permission ( project_id , create_project_permission = create_project_permission ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->create_project_permission: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_project_permission CreateProjectPermission [optional] Return type \u00b6 ProjectPermission Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The project permission is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_permission \u00b6 ProjectPermission get_project_permission(project_id, permission_id) Retrieve a project permission. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | permission_id = \"permissionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project permission. api_response = api_instance . get_project_permission ( project_id , permission_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->get_project_permission: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str permission_id str Return type \u00b6 ProjectPermission Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project permission is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_permissions \u00b6 ProjectPermissionList get_project_permissions(project_id) Retrieve a list of project permissions. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission_list import ProjectPermissionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of project permissions. api_response = api_instance . get_project_permissions ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->get_project_permissions: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str Return type \u00b6 ProjectPermissionList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of project permissions is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_permission \u00b6 ProjectPermission update_project_permission(project_id, permission_id) Update a project permission. Fields which can be updated: - uploadAllowed - downloadAllowed - roleProject - roleFlow - roleBase - roleBench Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | permission_id = \"permissionId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project_permission = ProjectPermission ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , role_project = \"NONE\" , role_flow = \"NONE\" , role_base = \"NONE\" , role_bench = \"NONE\" , membership_type = \"USER\" , user = User ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , username = \"username_example\" , email = \"email_example\" , firstname = \"firstname_example\" , lastname = \"lastname_example\" , active = True , tenant_administrator = True , job_title = \"job_title_example\" , greeting = \"MR\" , mobile_phone_number = \"mobile_phone_number_example\" , phone_number = \"phone_number_example\" , fax_number = \"fax_number_example\" , email_verified = True , two_factor_authentication = True , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , ), email_address = \"email_address_example\" , workgroup = Workgroup ( id = \"id_example\" , name = \"name_example\" , description = \"description_example\" , ), invitation_accepted = True , invitation_rejected = True , upload_allowed = True , download_allowed = True , ) # ProjectPermission | (optional) # example passing only required values which don't have defaults set try : # Update a project permission. api_response = api_instance . update_project_permission ( project_id , permission_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->update_project_permission: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project permission. api_response = api_instance . update_project_permission ( project_id , permission_id , if_match = if_match , project_permission = project_permission ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->update_project_permission: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str permission_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_permission ProjectPermission [optional] Return type \u00b6 ProjectPermission Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project permission is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectPermissionApi"},{"location":"v2/docs/ProjectPermissionApi/#libicaopenapiv2projectpermissionapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission.","title":"libica.openapi.v2.ProjectPermissionApi"},{"location":"v2/docs/ProjectPermissionApi/#create_project_permission","text":"ProjectPermission create_project_permission(project_id) Create a project permission.","title":"create_project_permission"},{"location":"v2/docs/ProjectPermissionApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.create_project_permission import CreateProjectPermission from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | create_project_permission = CreateProjectPermission ( role_project = \"NONE\" , role_flow = \"NONE\" , role_base = \"NONE\" , role_bench = \"NONE\" , membership_type = \"USER\" , user_id = \"user_id_example\" , email_address = \"email_address_example\" , workgroup_id = \"workgroup_id_example\" , upload_allowed = True , download_allowed = True , ) # CreateProjectPermission | (optional) # example passing only required values which don't have defaults set try : # Create a project permission. api_response = api_instance . create_project_permission ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->create_project_permission: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a project permission. api_response = api_instance . create_project_permission ( project_id , create_project_permission = create_project_permission ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->create_project_permission: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPermissionApi/#parameters","text":"Name Type Description Notes project_id str create_project_permission CreateProjectPermission [optional]","title":"Parameters"},{"location":"v2/docs/ProjectPermissionApi/#return-type","text":"ProjectPermission","title":"Return type"},{"location":"v2/docs/ProjectPermissionApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details","text":"Status code Description Response headers 201 The project permission is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permission","text":"ProjectPermission get_project_permission(project_id, permission_id) Retrieve a project permission.","title":"get_project_permission"},{"location":"v2/docs/ProjectPermissionApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | permission_id = \"permissionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a project permission. api_response = api_instance . get_project_permission ( project_id , permission_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->get_project_permission: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPermissionApi/#parameters_1","text":"Name Type Description Notes project_id str permission_id str","title":"Parameters"},{"location":"v2/docs/ProjectPermissionApi/#return-type_1","text":"ProjectPermission","title":"Return type"},{"location":"v2/docs/ProjectPermissionApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_1","text":"Status code Description Response headers 200 The project permission is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permissions","text":"ProjectPermissionList get_project_permissions(project_id) Retrieve a list of project permissions.","title":"get_project_permissions"},{"location":"v2/docs/ProjectPermissionApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission_list import ProjectPermissionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a list of project permissions. api_response = api_instance . get_project_permissions ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->get_project_permissions: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPermissionApi/#parameters_2","text":"Name Type Description Notes project_id str","title":"Parameters"},{"location":"v2/docs/ProjectPermissionApi/#return-type_2","text":"ProjectPermissionList","title":"Return type"},{"location":"v2/docs/ProjectPermissionApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of project permissions is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPermissionApi/#update_project_permission","text":"ProjectPermission update_project_permission(project_id, permission_id) Update a project permission. Fields which can be updated: - uploadAllowed - downloadAllowed - roleProject - roleFlow - roleBase - roleBench","title":"update_project_permission"},{"location":"v2/docs/ProjectPermissionApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_permission_api from libica.openapi.v2.model.project_permission import ProjectPermission from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_permission_api . ProjectPermissionApi ( api_client ) project_id = \"projectId_example\" # str | permission_id = \"permissionId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project_permission = ProjectPermission ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , role_project = \"NONE\" , role_flow = \"NONE\" , role_base = \"NONE\" , role_bench = \"NONE\" , membership_type = \"USER\" , user = User ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , username = \"username_example\" , email = \"email_example\" , firstname = \"firstname_example\" , lastname = \"lastname_example\" , active = True , tenant_administrator = True , job_title = \"job_title_example\" , greeting = \"MR\" , mobile_phone_number = \"mobile_phone_number_example\" , phone_number = \"phone_number_example\" , fax_number = \"fax_number_example\" , email_verified = True , two_factor_authentication = True , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , ), email_address = \"email_address_example\" , workgroup = Workgroup ( id = \"id_example\" , name = \"name_example\" , description = \"description_example\" , ), invitation_accepted = True , invitation_rejected = True , upload_allowed = True , download_allowed = True , ) # ProjectPermission | (optional) # example passing only required values which don't have defaults set try : # Update a project permission. api_response = api_instance . update_project_permission ( project_id , permission_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->update_project_permission: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project permission. api_response = api_instance . update_project_permission ( project_id , permission_id , if_match = if_match , project_permission = project_permission ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPermissionApi->update_project_permission: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPermissionApi/#parameters_3","text":"Name Type Description Notes project_id str permission_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_permission ProjectPermission [optional]","title":"Parameters"},{"location":"v2/docs/ProjectPermissionApi/#return-type_3","text":"ProjectPermission","title":"Return type"},{"location":"v2/docs/ProjectPermissionApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_3","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_3","text":"Status code Description Response headers 200 The project permission is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPermissionList/","text":"ProjectPermissionList \u00b6 Properties \u00b6 Name Type Description Notes items [ProjectPermission] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPermissionList"},{"location":"v2/docs/ProjectPermissionList/#projectpermissionlist","text":"","title":"ProjectPermissionList"},{"location":"v2/docs/ProjectPermissionList/#properties","text":"Name Type Description Notes items [ProjectPermission] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectPipeline/","text":"ProjectPipeline \u00b6 Properties \u00b6 Name Type Description Notes pipeline Pipeline project_id str bundle_links BundleList any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPipeline"},{"location":"v2/docs/ProjectPipeline/#projectpipeline","text":"","title":"ProjectPipeline"},{"location":"v2/docs/ProjectPipeline/#properties","text":"Name Type Description Notes pipeline Pipeline project_id str bundle_links BundleList any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectPipelineApi/","text":"libica.openapi.v2.ProjectPipelineApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. create_cwl_pipeline \u00b6 ProjectPipeline create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id) Create a CWL pipeline within a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.links import Links from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" # str | The code of the CWL pipeline description = \"description_example\" # str | The description of the CWL pipeline workflow_cwl_file = open ( '/path/to/file' , 'rb' ) # file_type | The CWL workflow file. parameters_xml_file = open ( '/path/to/file' , 'rb' ) # file_type | analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline. tool_cwl_files = [ open ( '/path/to/file' , 'rb' ), ] # [file_type] | (optional) metadata_model_file = open ( '/path/to/file' , 'rb' ) # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional) links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ) # Links | (optional) version_comment = \"version_comment_example\" # str, none_type | (optional) categories = [ \"categories_example\" , ] # [str, none_type], none_type | (optional) html_documentation = \"html_documentation_example\" # str, none_type | (optional) # example passing only required values which don't have defaults set try : # Create a CWL pipeline within a project. api_response = api_instance . create_cwl_pipeline ( project_id , code , description , workflow_cwl_file , parameters_xml_file , analysis_storage_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_cwl_pipeline: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a CWL pipeline within a project. api_response = api_instance . create_cwl_pipeline ( project_id , code , description , workflow_cwl_file , parameters_xml_file , analysis_storage_id , tool_cwl_files = tool_cwl_files , metadata_model_file = metadata_model_file , links = links , version_comment = version_comment , categories = categories , html_documentation = html_documentation ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_cwl_pipeline: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file file_type The CWL workflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] Return type \u00b6 ProjectPipeline Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_nextflow_pipeline \u00b6 ProjectPipeline create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id) Create a Nextflow pipeline within a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.links import Links from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" # str | The code of the pipeline description = \"description_example\" # str | The description of the pipeline main_nextflow_file = open ( '/path/to/file' , 'rb' ) # file_type | The main Nextflow file. parameters_xml_file = open ( '/path/to/file' , 'rb' ) # file_type | analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline. other_nextflow_files = [ open ( '/path/to/file' , 'rb' ), ] # [file_type] | (optional) metadata_model_file = open ( '/path/to/file' , 'rb' ) # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional) links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ) # Links | (optional) version_comment = \"version_comment_example\" # str, none_type | (optional) categories = [ \"categories_example\" , ] # [str, none_type], none_type | (optional) html_documentation = \"html_documentation_example\" # str, none_type | (optional) # example passing only required values which don't have defaults set try : # Create a Nextflow pipeline within a project. api_response = api_instance . create_nextflow_pipeline ( project_id , code , description , main_nextflow_file , parameters_xml_file , analysis_storage_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_nextflow_pipeline: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a Nextflow pipeline within a project. api_response = api_instance . create_nextflow_pipeline ( project_id , code , description , main_nextflow_file , parameters_xml_file , analysis_storage_id , other_nextflow_files = other_nextflow_files , metadata_model_file = metadata_model_file , links = links , version_comment = version_comment , categories = categories , html_documentation = html_documentation ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_nextflow_pipeline: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project code str The code of the pipeline description str The description of the pipeline main_nextflow_file file_type The main Nextflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. other_nextflow_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] Return type \u00b6 ProjectPipeline Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : multipart/form-data Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_pipelines \u00b6 ProjectPipelineList get_project_pipelines(project_id) Retrieve a list of project pipelines. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline_list import ProjectPipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project to retrieve pipelines for # example passing only required values which don't have defaults set try : # Retrieve a list of project pipelines. api_response = api_instance . get_project_pipelines ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->get_project_pipelines: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project to retrieve pipelines for Return type \u00b6 ProjectPipelineList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of project pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_pipeline_to_project \u00b6 ProjectPipeline link_pipeline_to_project(project_id, pipeline_id) Link a pipeline to a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Link a pipeline to a project. api_response = api_instance . link_pipeline_to_project ( project_id , pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->link_pipeline_to_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline Return type \u00b6 ProjectPipeline Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 204 The pipeline is successfully linked to the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] release_pipeline \u00b6 release_pipeline(project_id, pipeline_id) Release a pipeline. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Release a pipeline. api_instance . release_pipeline ( project_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->release_pipeline: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The pipeline is successfully released. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_pipeline_from_project \u00b6 unlink_pipeline_from_project(project_id, pipeline_id) Unlink a pipeline from a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Unlink a pipeline from a project. api_instance . unlink_pipeline_from_project ( project_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->unlink_pipeline_from_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The pipeline is successfully unlinked from the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectPipelineApi"},{"location":"v2/docs/ProjectPipelineApi/#libicaopenapiv2projectpipelineapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project.","title":"libica.openapi.v2.ProjectPipelineApi"},{"location":"v2/docs/ProjectPipelineApi/#create_cwl_pipeline","text":"ProjectPipeline create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id) Create a CWL pipeline within a project.","title":"create_cwl_pipeline"},{"location":"v2/docs/ProjectPipelineApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.links import Links from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" # str | The code of the CWL pipeline description = \"description_example\" # str | The description of the CWL pipeline workflow_cwl_file = open ( '/path/to/file' , 'rb' ) # file_type | The CWL workflow file. parameters_xml_file = open ( '/path/to/file' , 'rb' ) # file_type | analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline. tool_cwl_files = [ open ( '/path/to/file' , 'rb' ), ] # [file_type] | (optional) metadata_model_file = open ( '/path/to/file' , 'rb' ) # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional) links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ) # Links | (optional) version_comment = \"version_comment_example\" # str, none_type | (optional) categories = [ \"categories_example\" , ] # [str, none_type], none_type | (optional) html_documentation = \"html_documentation_example\" # str, none_type | (optional) # example passing only required values which don't have defaults set try : # Create a CWL pipeline within a project. api_response = api_instance . create_cwl_pipeline ( project_id , code , description , workflow_cwl_file , parameters_xml_file , analysis_storage_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_cwl_pipeline: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a CWL pipeline within a project. api_response = api_instance . create_cwl_pipeline ( project_id , code , description , workflow_cwl_file , parameters_xml_file , analysis_storage_id , tool_cwl_files = tool_cwl_files , metadata_model_file = metadata_model_file , links = links , version_comment = version_comment , categories = categories , html_documentation = html_documentation ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_cwl_pipeline: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters","text":"Name Type Description Notes project_id str The ID of the project code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file file_type The CWL workflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional]","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type","text":"ProjectPipeline","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers","text":"Content-Type : multipart/form-data Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineApi/#create_nextflow_pipeline","text":"ProjectPipeline create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id) Create a Nextflow pipeline within a project.","title":"create_nextflow_pipeline"},{"location":"v2/docs/ProjectPipelineApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.links import Links from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project code = \"26bUUGjjNSwg0_bs9ZayIM/gNvb6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_d/9rEoBi0LnU8SsOWJ7wYrcziVQdt8mV/xbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZ/pezJ0-VmLSUTLYyW- e_jxxzpBvw-y PuSI-13 AOsiPRVvnX/Dhh58EJzzOxprDzE3pjHRAkK7vI7kjcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGx/ARc6SZKg2qVU hA054g00j8CXRM4JZgexx5VBmiUdb8V-5tS7Ce-8OP8jM6QXap /eHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8/6xmSejA6BG/ RDxxWc493/sJ JFtLrxtNb3BtpHGNB33FSliYEaSDC3Jwlo9Aq-OZySuGXBwuNL5/CjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGa/Ex5as4igHCaWKgfGuN6Yogo9e2f/FQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z/LtIx RE8z6ZbHjzn3coUV uTlEXw3Z8KLTvaqhteQp/wYU8rf85eyxCXQ02l2UfQbPWHwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9O/CpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3LB7Nke4pyL/Xi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7/Tuj3iloSmvq6ptMXpaqw/8RfvaYMfrqa8yWUbjaew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8/maC5It9ZEZjIoZP9V1EjbA-tFQvgKOFpHUcVNnqDdEconiUhJR_OYqv01dQetO3oDTHS/dhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0NNGhiW92gAEuiml WoiEW-tztii9q3K407VNjp2/dt_M_wxbjD/ svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hnv97bNkt/zITop4y58kMdi7sEjYIZXQNIxG2UN7cFEvraG_8ul060s0/5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD3EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXxGcpcof84rc bTU20M/sFqt4zswj63S37gymcb35PFmFooUEItJpWXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsg/_EkphsTdYD6 2t z_dodcI/0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08/suXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSUJGA/LlmJPzj1b1En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd334AbRwr/Mi1qq8Bvr7r73NXsLH6lkp_YwgeBZkfv7a/ST19XJTe9 4t GIqXuFdDA054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YY/7uU6_-VpRO7/bVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GLgdkyb0ofYJLar/JrS4gkeTAfK5NMnpgtwWLpKWVb8A uQa TKwyJvJPBgILfXHpRfA79W/rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpEX9wjR SU K0GOwW4TgaO1NV6_Hx-5jhuPYUigm/kjs38qptZPjGbQcMS6bq4jio68n_hxYgCm- ZxK_7Ms5LyP8NoYNV/5v-C_I7qzUMpSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL/2YhTDLRif4BX0k_kxk-VTa/v2mlM18SfVTJxm/MNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei0m5Frn/pLvFqwhHFvdn0kEWtwPAhULVh_u/c m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW/S9haQD5URfy5N6p1WzVMayhyMR-SvV9SGVex/n1pAweI7fGmRoxCM8VmNfxxNbe6O Ln10mBnKCgioh VZvkRvi5EEMXVVsdwg_JxPfEnUjs12B9i 0/OanmyHg0KxZM4gTTHjvWVKda5vsnl_K8sqaGcq8qCXsTG-8cP1XA9ows/MpYvDZkhMpyJxm RHbnjj3fr5A4P_k4/R6Fmv1o ZffqVg0_RVFy1PIZv298M77Wo3uGmZRRyDYRDL0hAozGk7Udpw1SajX3Zu Ww1W/UFT NBeiP-tIjE9xdzTM_pHrocy/5KjHDRdTZAo_hC23nN7F4jJC4GEXUxLPVbYDbHcj8dmH24UJ/9OCj/j66vks3ufL3puWTLeYvy LxrcfMGOz287wNkvaSAm2TpaDvDHBUztHEr/P3mdQnMlQ0PNTnBrzkqKF5ga2hiiA4xBVimfFXFRwtuOyOA27i9ZHMlRpj5K3CdOdQe0cqd 0v8a0eSaahJC/rtHiW-4Jkx-PmRceOVTnS12- De0djiFCoKOX8P2Z2mOmjAJctTLMKx50RkE/dDeZ8um6ScEAlO_e14NH8zd7pe0OpnyHHHn-1LdCEh GY0WFBLrykLVt_Eg0VYRJlGy7a4-9ppnZamwIgl75JvIDOdYCX Rm8/b1sGOcuBUUUO2upLwyihQHF78lr tmzHSDRz4aUN5UwCCd2hR6gj729SGbxPIHD0GA1HYufEstgPF-f6/x5bqQ9HFJRLok_mOue3t5N6Zxz80EmrQyi2XYFWbuCosNC4k8CiPUgXCUK3Y PG9LXQX/bKlS3OeRHzbb3h30Vw8VbnBfAnzfn41ieRBR3XyfW2RzibkK6joH9oJt/088go8cC6iLTka7J/eHhHLZns3UCWg PHaWjCVmQKyG97SE guu5Uxk5_1lLE_0fDvFFZnA4o z0gHNFXd2vedvSzXMzJX YvfcW0dsWr_3MqJkwezeT8/d/qK8GZnMY0qy4ghjLvgVD4lwHa PqhQTpFa23Y4I9Q1-JHQGaH3R/MfGjMallOem_6e5Sc4qg1VsagoV4WhcCfcpnrcpSF82NK6gSw7syxr9SApFEqY/_87NPQAdLRImwO4VVCCRAAzXzK7 7RfPO_w4STXneQyIGz2KS1RZRJQmb-ZZ3Psev_91up/G0yN5CtfllGDVHGAuDjLBHvpTowwmscZRz2IuE9oNsbobbaYxGw/yEpwapNEoG44S1v8/XlXQQzStWM3h3 Xg_MDAB0/ sBwcy71jfgQ5oQoFxmzyON6uuun/zRID 4YnldIPZ3mMJC8UFNKV0Ew/zVzD4Rybat31YvaGHd59EgPPeFIgY d6hPCWzZZKenVfJZ7LiGN8 ifBhGb8fXNEEKjeb0MDUjL_o7lK2oZ/GFmG78Txku8YxhVzB UOtFa0FX-VeD-pjdEk0usBh7oudSCXb4-n4L WoMJ9q Q_IlJkAp9edsSoZdKoReORA/gADXtfQeJ89KNPmsuxYaNGjxRKk5yR3pEM7qsfytFXghLPdrSyeX/r5ZLbT_bPDB0iWzF79OL6NpfO7eGT341enTclONB 9qoHwCwQDYsLM45y0SDap39 Si0k-PBfu21Gbjc2/rzIbg1OC5jaTO_Od7A3q6he2fzuaYkzE4LFgY5AyJe5tVwF-GF-Nst5l8kepCTzbF/SMOavIr9pjNPa-Xlm0msPJLBqsuPveAF5l6XNn3S80IKf9nPaJZ0kteZPsOl1s6kr6/mtPu7RYxUVWoG7zGGpVaAHHQn5Sne4NERX9KgW8_dbQ/lih0c/N-buW ycCV2hNZK0GgfYuQ CsUpqQKBWftKoQyWk1hOQTPzSVvlqUyUwCqTcTi/XBLV5yVQY Z4dM6VQuwopudMwpXsN7eUtpU4mO5vglD1v/Py4guMJtXLRm1DFA7/nl_hblGOdleQ8IzqsdgauKF6pbS0qjG5SThE7xk5Il_Hx6qkkS3TJWpNz 5671eMBh-LE1/_0Dto-r_PSn8O1Xo_Ge4HCtirnkX2x6Dk2htnlZOr7Ag6U6kjvDWIASogsKIdIQY-eLOOjM8nvcayL 9vh4gqC8TvlEB1-AqN/VOdUaK8y54Z6ZUOEIbnYv38Dj2U/Mh_WFjJyaf9LqKmW6Nvj_sIdCxm_zeebQ-yW0L2c8p8gFW2GHgf J_AIhyCvxo osaw/DDu1i27Hqb5DwEg4amO4d7YmKEJz-lLe-Qyy/QA9kY 1m0nNNuWVq0AY4hBv4-8k/Q9E0ICZ5bOjsEpvSiOPHNyS-454qrj7WZswCIxVP _wycZJmIuda-HejROOm2Sjg82OBeGXJEACDxxLZWiLtEiMtoU3MP2yyG4de/WcPT0/vWzPYPOpXcURlm4x1Jx5eN1FkdBer7bS/-/4GCE0QAXs2 R5Ntl4gbmC/nuDi6P4s4iWVUcO0lWkxk6otrSuf0IvOTNq-aI9TczuOI5fwEPEcexk ks/qNFwHw 7f8b9Bavk15mnIQglk4aafBuj-nKHRnABMTvgqSp9tRrrk4aWly1tET/Vt6wOlFKPgk9UOSb2973Eymp0oF7FvkZJtA0X/Ei5s9zDy73NMiNXAR3vYdU0EBo0bUejRQtn/UUz0yQC 5lr 5E-r5rvcQKfn7JTU805_OOhF9EjuQ 5zANT1emGfn8efzZpUAlc5BRJeT7O6Hg8E YHA/ZfF7fnE4U8pE0 UGKtEMpgPAHO0l2ixYfZvLu__QZMBmCIvZhKs4P708E4c1hAWXXZpVJo4/Wy0Bd_FBpCkzdETlLvWKbDvGNjjRKw3n9FwG4N/tH/Cv6-GK-eOHreXJwVwK1_1tSXQEiu3fV13sNxnKegpBp0/P-h6UNgGWoafz-u2StU3fEV99WxQpB5emgx2FB-9K oXvE2PPBM9hhu284VrlmdI7kT9-7/4Rq-jprOVhRvp-Ha/f-iU41Lc7a0IHiSWnR/6cEA-4r63/ulBottcHG7uJLRx6D6A5slCrkQePUCc93qgyJSSlYJNcNAtQb6IdeDqNrQNKwrkYrtKyt9/bY/oOFOCbSl_hf ySfW_ngGS9 sxHOznqq SluFs7rdlvtTYFQ-xkQ1k2l8CbCYvs1R9iAdRZBE_FRpvrVXAl9rzU3RrZMNXaiA/fwAV9 9MwbVnKV2XbDtxoGFxpVFfVy0dJ6GONp/Dkwg-VVm- 3IlNBt IyhrdkTyL_17jz3XYY7 xmfS25N9rwXQtpRcaxNxDy3FSISLFaQaTPUVFzKw/uJo1X- v2y/z1kTcpBwbP96mQo5mFH4ESAE6qO66onE8ZoG9ax5pYQKlxayOOoIuvxqTir-mKBuF1ASDKK51v/t0kQs62HkJC01AYXnI3j_yLLeR71o31varsSejxJLJrJFpDTXqdtmeOg/_wXpcWwGVbAzmdhRqOtIcXUwjuvGOJcMzMBgiE9KwZdpzGF2maj0tT/SFTzXghQi_Cjt-Nhor7e87ukCNbGqLn6KpLP/Ld14c4GY6cWWPyUme0B WCDSQahyT_CAIklaurpCHItBeyEWbjNpFwkY3yhNqTeLemKveCxYAwl29A1s4hzHLFGQKwN/SrEi5FYLDDNZBaJJWC-XAAUD2cers6q RdhsQyuHAlZ5eVD4EaZkgk7Q1dhsy X4XLFIlLk77/u2/lW8FbnTqoZWR4PacufreO3ruRjjJ-WHt4-4lGQA0D1QtxC366rUb4zO-5RsVXHcvjFc8LFaka4MqZFIVPl6S4Ajck/ooELwPR2 q eCAECf3OT4dEdWx-QvQCcW8S9K7TjVrIVa6TB 9Fg9VRNnfW6lK6bt0ot7bxaLX3vHgHVx72c1Ne7SP1q_GT9z/RMFX-NTozYo9E0lPszIqCOPhYzXEnN-_GL97DycbysEtnQDXjJaXqnRHiQo4QXQZOJV-7vf2emdtzItWinmYdQNHzkPjG5f/5e-trE YAGFyYHvuT/An3k2TMIAptw8pLUCBg80/BNaG4n8-Ngnq5rkEse uoBn2rUODu xP4NBJ1jbh97YqOnO/oAPFXtrRDfX5q2j-Qy0oXtcgnQfngwUIZwQ3RVLd3O/n/o-ddtEU6T7W5Rx8/B/5WWiBRLZXPbaHbaWEsi v7yPFkzBVwn6l4K-Ke_TLL0X58EH4CYUXD9Qfj5ffuZF4EypsjNvjY8aG/nI6zIpMb1MEBbUzAeHR lQ7MXzA3KB9uDDtKwP216gW-LEl8MMdCaE63GzRSqdyTTGt3yNbq6cRdfO/EdFFrnMlYSWIlZ_-U1AAc4VVfx/0NYxZ3AqTtPRoH5/vXBxx3PXOSALRA/guNxD7a6H87Qp /F99khP/Bh5HLKnFQUt8usABE8v9rU3 t-GGkM_/37JLL4X2N1hG3UMaLUWafVdX_3S9FETUew6HTvLrwNRKJCe-_0qiobzPnbWZA/ikKycF4zBr5wXzqivEMX2lWQkgnB _RlD4YeLB9q 2s02vCnylkpWzYCcYZJ_-wjPR/oIr-hG_uoGN/MCj CpwKcwgsF_GIeql-oNizRcEA2zh89r-O/ZOeB18Tvvtfuk cMqwdFrxVl01OhaZOytVPPnb7Nhg_hb8cu265C2HlTNCfnb7S-fFkoDKYYxfYfgpLdLnX5IszhYsbLo4LZEV/DgVrImSytvbdsx5mRH2awIOS VhFUpMwN55XaNDhMIJSMG3Zmg8zM4MVWtUJNviQWjHRPdYpquv4dDwW3JGXudqPYvjxgiT/OxMKa4iDKQ36WfDhH-VqP-tUpamSEz zB_2n7XgOlFjwp7xJCRwRA3Lni6seamxD-KXWvWjjB2FdefJNbdWvA/daY6ohicWSEZkccudWjqM Rmm877Hzp4SLn5_tIi4rFRWvzJY9LrwZSgTA6NSc-LA3P_Ibv77GKIktNO/vjbIZk_12hDGhcolG-YWW5aobbDQOmyvNBhdP 8o561HpyYJOvqaZrwVMT2FozMQu17rwYCOYHqLjABQZHd_O/B2L-bN41MJ9j9NoPYiWDbdo4Ag 6t-_EVQdU/ycQ54Y2ed4MvEnMWw5Mien5vLDXHQ0WcBF/C3dx/N 77rK2ZWf4wUEnoSUnf3 knfVBJsVnQVRiVpAPFRKOY2Y4BCF4 SyQeSas GE8S37W7ViK6YQjw46Ntks/MRaaa_DNEqBluiC0ev6RjbaBRLF-Mb44lTOqS0Bf9/HKEsj-9PfhoYDRS2KAjJ3koEk6qB7p/0RL4zLFwvtnySdYdQVOM9L24rjkb0cJ3MomV30zh/R JnSfaLq8aN8POb_bjVnH3twmXfxh1VTtobeWyAwSqEbaLi6dTYyYFV8DXfOkZb7qJcCZ-b1DAq6 vx/Jbr3Q0ZfSwp0NqoByfPDOdichOlupQAjcS_-DFsuZSJfK 4FxHe6HaHQz JXRMc_pXCg3NFRy1R06j3hYoAQJL u mkejGIv7W/2zNrFyeiRTFmGPrjFsQ4E3299qppe1EK1RMO9GguUfafFFYHB awCWj7f-Q6bMcRoud6n6EKdz7vl_/iY9/vI7tg 8BekUsfGPEDBJIqjwF2vHIV_b73rnOfjJ3dS7QjDusYt9BZLHfYMdysTHD3T2DB1djsVCH0eLAs4_lZp7kFZIRVKefL1/lY-Exw3yZkOzTw7q/5KiUwpwzq4AYsI601mG4r5hC2xtwVpTsECCT3323bOb14oLRx/fxxljxh7TS51UBOBJ5r_YStLVNn_A9PExWWSAm/lGaK gCzKs0UDsE-Bw5iGe2a4eTJyye6u_UKwQGBQAp9nKVNi6qJhnIno4Edvej/coipbXZi8I CyIB83c_TEpKihE0zRSiGw8Fe2UXi1IzDzbTQt1K2O-xaQYKmOxm0W7Dntom/qDeaLn6mqZQKITQifYQDVJ_bJqgWP-ZZo0mCzMr5Zu6dGY_jWH/_2vzi9_UUvB7ZMXx8fFFVA3hiU9BARjPFwZl4AD5pue/a/yYvbwp/7qJ1YcU257bbbBv/JL8yP-GOIc1UQvcj8Jr/K_TPb8uMe3HXVqQjGJ6olIXu_42ZF1f8Y9n8cfhkkXJj49HzZhb8EiNnatB8_naR_jFb26XSPDU4eIbi2wHYKiED/rFpvhYINOldJrNy_hvkOHBSab4ggKBjGtenXbPpBC5HRCxAEqHVyQ_FYNS4gs9cL_7ZfNawYKF/onTnDZFDE1YCfQd RhX5Cj_UzJ6R6a9QJ6NYYw2ZG3l15Izsr51J3dn4q1nudIIsZkc u4e4zyCbZ 9PcysdWR3yryQ_9Ki3/jp OTxRfayV_3-Bz3q8ZaeonS2DmJisZVv2kZlHgPQJSYllvq3SzH AynpqvKBG41o VBg9ra 8rQ7R2OmNrrzs/HQQPhPwbWWvuKijhVUk_ticUp2Cl8kR4an_ezbiJKM8dRtjxCZ1ScNf/EIrkxlLUGXDoQ063NMSEEYZXv6 6/mMVi/QzZKvgFg14Weu4 xfZwtvs0h5s0zwq8IjP2FBmWt snPs/vrCZGY5hn BgEAbwq5R9v9aD0BoH1AUuqInWb49A/vf9DUp5K kUKmKLfFIMdBsvVMjGyS7dJ9QVJw1xdbztj6lkJ1rY7BYdkQz1FpQNEQlQbNr8l1raKHS/2yR395R0MC_QArwLwdBaTl0qrG8IZP4BfV7QeMyE-YGYaV7jLLXJ_AtwNWVK_GHW-P1t5l7-qwQ/N/aV/lJ3mPMW7Jdgdi2 j7X9M3ha5nq7lbtjD7jMz/_d64MyoBI6x6LrTwLMZM9ENvk rmDOHbw9Em61PpxSG6R7rs89xT1 S0ZhXP6qQ/k8rXRTU0RiT7SlEpHwwxbrw95a80aUSOybQJZLpRGxFpC0TK-ZfvXMi-Omfcnk9Sg /CoFwlJ_fvXqQD--dPpolZvyGpX6DofZKEIizXvZBf07RSG_LZbG73hc0FwD y1fm2WDgpjlZkcu9oaJOd3BGpbtic0Xq_I/rYcqe3HeH4V8ut8oAVWf5Iuvwys06l7mLfmcaJ-EQPqYMk5Y1KwVk8vY nPdijm/IUuMFkpq o vKsYVWlWd--hoyPoXIA9m09f MQ-MnKEgk2UGity7q9IpcvL670WgqVrMG_PN/IwXOQ1IDdbah QhKFooMxxyQSlki1KeYpdXFhpwmR0CV1SS1CTR7/26 KS2 RTA7 IV1NIkh2BrUtUzXYiAl2ijs2Td6aPQn5gpb3EC2nrWfOXkVI6xO_JH-f7xAZyE6XLrbZxpJIzd3nUx5WfTVLcBef/ZSXZF9jyZtJPUm6zef7e5Yl_njSwW3Zi2CwWBzzRt9HBbrRIFVRiNAqWt0CffDqWYoR9NY ZTfgR7kVc/eeROxBbJ1295h4qN_rFp-8fOk2OLH44XTDiwMTJZAGBEvOCUm-KwXjqxQPIT8VfoDgfibr3W1QIuOtFa379W4_CqAf/d8nZUrJwzYuSKcPJdFw_I0ueLXNWAjtO/cCHgKVsDeoP24-HU1BI6Ja_FF8 b/EyzI29u55QouT5QyT/qWMxCxmLV-tTkeaY5 eY--mKfkfS5vNmdyluztSUxZ3fLqhZuvkJrU2Lne6XRQU/eArMj2aSJLAv6WAZliC/qw_ks5BitQpuJKBvqdxEF Xy03wpo7w3Nkxgl2ba459xA/XF7cdskxr77GZD9a1r5CqBCnDQQ08MLA_-pqbpzwymOk8j-5RFuBhc4F7pJdBPRLUSR 1xdEgoX9oqJIaH8ldu/nLe o11Jq4DcYpLtHVg6w rPdfn2LvL Ls7wLq4j2C6hJfH_nTbVIIE41rJqBi8OEZNvk5CEwUoEqMS4/5qAJ4QeH6zt0UO/1Nuiy2sVOuhBniEaEHX5DcAb25WFATw2O9i6v44Xp_cEzk-sJHXyB-5vrKxny0Vzm4T2oC6Uylg/POsLQadpHjdELunTNi-R6Ovpav2Ue54Il_A0d94d2rNqcDeu3gqiXzUBT79fEGrIEhPYAMF5dr-z30YSlaUokGW3U/HVfogZlRDqF5UJ/CGRw0Vcs_2pmmEg5r2/IXnIBCGEq1foGbRNTPgpVFz M8SV-VsPMXlESogCdkHUTjU77tLKjUF4Ji/csm I8UDlDZKHlyTr0v2q zklI-4/vgDrFsPfqF-sixBjQpz2yAMSLZ7uVFFZJnZKPDOXDU_04T6VhAGQpD8mQmlmQ/PTZSnjWdHsn1Ksn6Qvy0Cm0r38U2p9bgZb0_DJNaxarBAla50KbnmvWGbnzeWQuBPdPn562T8g-OT lC41Nq5/5lGxtN fikNRvKa9d8rYnFwKRBUquvj1CM4iKSRNVL7J9Kf5mxGYLubm/0ud4aI _ybdL2x7kavyLnaRy30tZOZnMIIJJv6Zz9Kzpfl-1k5Tw1CPy9xc8i1ts T8rxTB6nHoj885ei8KjZ4PE3yq4p/LrxdW0PjlO-HbSjWQMtBQagHAkWkJFB3jAKMRMGBZ DLzDYLJUtFvCZ-ED_G31PYAaxOAcZdv ZcY0RZ _MH/lnpRDEFOUNGiFhuc10bUL-bB_x8b-TMr/ZyZaRS0KFc51XN2Byio1Eo_EWeX7VIIAHvxb0 TaccufeHKxzH Y6/PbHy9lGusknJZd0LjffvDj_RcIy3NwoPmrvbnwRvaeC9/PmH1g0lGN4TaQtfTRm4qXhdJsrUwU7thinw5uk-l2sk79hcumuORW/1aRdTVKWU6pDH5IH1Jjb8KwUDLl2 N6yVxwN60O1wpXiubXRpaQH1GNGOu-_Q/HKqJz5bstvfsXUY4noqH AWzwAn2NtYAJGtGv27sWYpqcYPqH8B-Awa9OcGHwd1GKZp3YlUw_J1IJwQOMe_yHMd1SBc/gUloNw98-hXh-FCg-GTuPiEYfUp454IFOX1F/G35Hq8LPyveuUOcRq4k90wq36o0fUYxJ4LsVOksHNZEGbw5K0kQ8H2WB4BNzTadFCl7G9f1VmPYRjRxo7XNcXXr/4SDfOgUEA4Yh4xjmbF7/GjQy-_Rxg3gzcpVAIevn8Ri1RqUuVteR7/1oJq9WYwgsIrVDktGe Eze7z91IIfbT05FHHaB87pdzrsGk9sCxkLDo9J26iQ7 yzg4jea35E_JkxkRpDq/xpJwecRFIohAE8cACo6VF_xFw3YBKibHx4CnMYiliSXtivgEvu/ISl0Yg7_q53AB5W7LTUCyFoamJqX9Jav4KKkCW4JwpOm1P_l5gQMMxUqUurJYF2Rsk4pJ3jVPKNVoUa5gA5GIOQP7tLp86qhAUY/V1Fq1Iedc9hYaBY2eAdG 6Zb6yZKQ TtgYSr_2M/uKSViGHEo7UQICAHraIar59UjfOgTD91RaZ-p3evQZUfAuCA3mz8sU0zK6c6Ky y3Bs0piAAQs0wjZv-yHbjbFwBfWVU am Sh4/D5m0lEHIV6J/vA8eBmXeMWCsHbcEDnTFCRzjjp OjCS0Xs_6BaftEVIDSvhlP 44jk8i/ysSD8L2SOgD_ZmxLI9XAiCP2kN0gpdijyH0repaGSOu7vt/qPb9PabxOmx7hp6c7f68mblGroUw7fPHxCbEk ywzNtm4ZVS3nT7MeVstDl6e n07g 1X9lSHoSyaPC4K9mobXX5iu/w6-I0 ENWYLXX_Ypz6sECiMpeV_DBLZ3kEBt0XnAtQZJv6mcPAaAxyZu2es868g_ldVVaBAkHl_c3VSK/bP/YJp6W3HCdEolsRFB74lZUlMJNT0_isTj bCeA7/Grkb Mr9NtARL_mr9TvRDrSa5lthX9aUyWvLIUTpkofZpz9B3m5rI32kp1Yun8-od/pxoelqcS8dqKBG3IPepqrR1L1NYr-idr5Kb_7Wmj2nFOMi4f4GVSWlMz7t/uy3iNFkyOINdl0fXCRDI/V7EcFpyLgGtJlfmertyCE5CaDqWD9DQfYPOue7N6 8bUglgQdI/uAMCdyzRXg7XQTDARaOOiV/9tV2XjAgYKcntT6mt VciJqDaSussFLGsGkw/AP1ym K3NbkqrNlQj/nNZ8p_sITBJA8ap2BKy_P3a8WzsPyYHBmnd0sxf5m14AuCmnx5kyVc3eF23NwALSdI4z/uuccOsmSOQ3OV4pYeX0T55BRFLr9rBW YgJ7laD_4WrO5L8qI0uwAzOqikTdW-czwDKN2-LJwoIpWjy/a19xrj7tYhyhISpliMCv/7hy2PkovXD Tmyp2EynOJnHVpWQthsLzcqd0x4KNuU4HKOje--tFoTgNOrHK0XiRI2Dy9RKwmaHmhL_g65TC8G/ foLaKvKZh-Q6bvFjaAbnvWR9BXAnd1qik2yI9p/YneaDd5LuWAV 8vJPEfIubpn iIySovPYIXcE64Fq6HNr79nkxiDl40N75VJ/f9vvkDBjtXr1Z9I/ ez1neGkqV3aLH-H9YYTpCgvmf_e4ujPvkQJdCKPUXQFvT0Tj7nTk4H0IzD7k3FGp7Q67pn3HvCL1lGA7E2q5pNKQ/o6g9KZZbYxLAvWqsssBUuWL3IEKuUYsWT2Pk6-yJac68lNxA8FAqtGCZ71CObrzNNIW7qb9pBw4I/027TAagI5SMcqeuUUaiP0XobKi3qDGf1AV/94dCtbQNhNOQQIQJcCRDRY0x05Q/gcak_aLtHZ653FJz5rc7l7cZMYYSC62zVoaaBXQQOp1rl EHiA/RW teFo6BDf46oC6izA83pLPTLnoDJIfaY0TJoUYrXr3xlDv_fpBi /u8isL7UPVGPjrKUYsGiTNJclhafd2_ZQ4bRMK9ylq7XmPyN3pJz3_zOvYbst-Qbf8SiiRIpP3CicHO4RWXrwxFMaQa_VFaz8Sv/eGQcBfRfKpOWLoiyUPjU/yCksfaEPLgFx Az2vBSmB2lz1mpE2O78hWg5sE9is3UL3nCOQkdmdmuuc oSaMu_PV4OdbgzSSJYTbGhosJP0BkA_/EAEt8ZruSyzI5-p70Ccr RrI3WoQT4XW_1MVwdoje5/oAJpuu5t/OzPIrf_Fd08CZWlyyHI03c92E7IflP5CGqPDKS/i_NA0jeeHLwER7ldsGH5_Ki4a51F3fscbH36akkGCfXJ2t4f1s8w 0cZ78qL _Ta5xU9J2-9AD0y/G00hN5TCgy9ecGH0kGdhhp4MXQ6an94wVbx1odL-IJ_YMPeOcT6/3u6zCgpN3KaG PbhlhIk7crWNN0OQCWJlU8sE273utWXQ6kjYYDZajuw3pEntks xuP3jLvMNSGyM0/u2SyT25eGM-XoxNeBHsnwDqbMJJc39ko6VoQBQ/8eVnHP5cEX49wT5VMwQ0rnZPhdn1cCg5vWTu0ny2jKFhOLaNbg6/8I6XJExsVJwLO/X3rqK yVSwvihVyPIdpvAG0XNb1MD4Gu74NPd2N8N/DzBcwlusudFK10IDnidj9mhqX5BlDkot7d3AZYD8hxJpDplzEKSVOb5cDuR-apc/M/6zatituhx tJ1hi/HEpAtvmntUo3yI3MOFxozpySW2k1XOSsKSIS7ww1rmeu05A2/mXxipEHjd2I2cyijK2q-BD/AlGdAiXLZJ_Y9ObeaSwuYGRwm5-iBhs8VdUtYyY2WxFhXqL-XfalSus9eR73auLtk pm7b5ZRw_iiGrI0I0i9Zs/e7FTIa2Xv_VLKm_FHItnDZfLVQRrBNGw8rI2gO8tGQQRdYFpG7gz7l40MWLUoK_Ij-wDdBCOoRNPSWtj1Kd6Xi/FaJ3Knxxp_3PsHNrMy6TqW_fzlNGNt0X0c2BKA89Mhd0PNd_Mq4a5QUHTKT/glK31JHV7pzGD8trtPsY5Tr/5AeJE/JSZed3V_fJVvg0/qJ/3ea6Ons/j_p 1DsG53OyG4uxujMrKdTY2VNq Q8ike1xP2U LpO5/KGPnn70hKkR3hu06QOs2lHYtfifWQ8tY8ArNSu82 _lIOqc-ZGTS6W47O2Q kjNAOnlcEjefvm-5d_z/gFi /alD8ziyrYRDxJVt5TzUDosXnl_6wzkb0-P/1ovo3lWYJTwHdFVzxOnmTOsdRn2X1Gm7DZJIHgeQ1a3yRNJdnSaFH44FEqNnQet_hgVLAfD-xo4IzcWxJhtUFrzhjbLUvFw/EK4dzHEcNBEVsMg-i-SbnffH6mUWFO88Odu NanyuivZs1ZsOXNjhxUPZbKaJSvj_9MFKyTqG2AhkB-Jm28sUlomDUapd/VZ5UdEQ1-IkWrTM PHwjbraxrZ5LTyREc_Yvg09zRy/jK1MVxzcbxXJeYHizGo5lWYra2Ilyu-gFxK0FbQ4hBLICOqU6qOzN8LkTsIeDo1O8B9BUpt91-p/EGvCoTJyDqM9dKIl1enZQESdrIVDgCfA0Pq-EeqyKt6jgTJaA8mkXH92/wxWTzkFM8dOt9STDnpFVNsTg8b_SWWL45H5CJY6KwZyDAZ 9L3TgrALnkXEAm3NkNrOi2cKn7wydYBKr/lYs9POMAARUgcEN0GPQ0ewixEm2Dg1qJz2UfD5Ox1TMTK-ySV8dm9sIJu3im9cEc4hELeJnnktc_ggc9/8cb01ttru/2NmCgn9NvxikqM72fOqI/q421uDdt8T73zVimKDQZxJ-RMsxLTjhoLGUVtWv16u_uOGEb2eiPPBmbYO-jzZ-dLX8lRjjYonAe12PcYU_FoQcYmHjD6Xw03/iAi2_ rNDpAKzDS24o9IqMZlAIr6Ogn8O3ntXMOpOb00QXvKizCb1XetDq0sjpyX4bK/ayw5BHXLv2SIF9g8AT5S1px/WTm/syVhOMpn/w_fJwgAo36VWIb1D6MHneWKI2wJ5Qomi0cNsST5EuHsKENM2XAnvHQlGN8fjHGVKWoQPMlSFvfLUPDwbb8nxgA/rX1MfIPOuYf9E8q/FLR4eGyEi8fh/Eu6GpWEQ4Gkzu5rFtdqrm3o_TByxBX2LI1 bj5xXZn_-1H-muDwmtagHcjHuQT9GKdJc ohpSJ_WPDrzv_T4On1PN6/ctzFC 9c0R2gS06wmkv3DpW-wtwaP1oj7csYJ06BUa99AkZCT8UAGQ/q2SGckmQr5NuB6Mv3FG3DEmSMNiF2Fr/ku80YzuPMNIzlKWnuheXzE L8T_vNNZ2OC3G0snCOqhJolz/ECkZiG76rnG3lt5K_wKdIlH0xwXwEXsWrfjxp-LcRqb1LHO5 pTWrU6awnqszbmFC/4BTf8J8fDF ymCZ3tAOs-ULyKNJOat67FHzIiJJZDBucEp/UfR0fxhOur9iuCiT 78B_Sa-YcQx_vlq-X4s-xPPyjSCqyTQqQiSC/th2C_JrS7Qi3ulQyJq5MuHGTHPbQnSmtOOujE-ijtLy8aQHGzp4U-SG14Sgtcq LLTFfnUQEV4EaArkPsEWdV0yw/ggBzhnEPdfbGGNGb875C3RxKzRSkvpvmxBjAgTAlMTlvcCP2-oLdtB9DqM/BUCgLg1XezjxHk1H4GWlO-pJRNll_fK9TLCgFlw1HBz0EsV-q9VxClNvmJo m0CpqK_fFl_BEnMkwX7OLLBIp7uc94J2-Dq95/DmrAuny_tCLDOL_eX9c7 orgpCycqyzTWH wBxBlhKCqiCjeEC2Esc/Kkg1stgxpSsxtrk/vGZJTbJ/bL ta-oyxeHWjinTnMY1rLJEiQJGrpA N_cYcJ9BKaTX8kui-gGuLp1L/egM9hwzPTDSUjabKON-4UjiW3p2kluF7EU88bF8j wQCzDKV1_uGC_wxmm/eL5I5ccmj_1o8emEJwssuwt0te4HnHiOFu4ILNxB3vFBBGVDQHQrGKq5D6SkX17s 0VfSZ7KxEIOO/tp /0yQW6o8GZ64u dIpVTxxSlj96/S oKQ/lE5OqoUVqYx6q XlUxkGFTPoM_MxboDPJHnfgMS7P7pIWu7ec zQQMXlQZnhLh058z/Jhnw uVhAYcnJ64qcba4Vk0NNc-WAa4 uI-VsdKfszH NC5NzJ_33ZAyjo8hLOK/2pZbDMR13zbZZmZa/-8VaJV663 uRPXSj8ed4EaG2wUNJx411gBc-ISTVuBZ9SmMk/xh2hN4LGyKx5pRclEbE25A4GAg7bF54bGXGTjW6byRxwAbdWzzrvqUxUVfRTkyQIxAs218RtI6qn4 fKTrdLhC0NGCXgbgWjAj4w/DCpcRJIg5lB3Bff3JBVR_P2z4YW1m5Atxq fwyI4UaTTyq0xXuQTjDEzohqU6G6JXqk560berw2ODP9R5r9fsUPR/X_3oIMNqwO5eobvawz /mWwIyi- CMGFR4QmpDcN/9L/QXENS8HeGiTHdfkkwaeECsh/jdv0WoYSxFMYPrKh6m-wFu9Gh03yG6oJ-hU3XkoLiFI16v4UcWPUsQVQnRUYZ8F7PSLyXoBgSlAGb2MVMfaXPQotVY3VYSD/aJMgcZCOECgwArLjZJgrl0woV-_o47-LqveNTGXDQoFIVg-PerxIReYBa1YxlKePdUGguUgxNQubHJaAqUatDDOsmZ5bXbA/mYchC9nR6flxNdKcv1sdOMHAbdPKyygdxLAJ2RT9vBO6S3/7DXhswwYICt6eAyFK9Vb8OxnbcI_IEopN_rcx5_EMPEvX QvMlHN2Av780YCPu1O7YIOk/JYyJ9XxkEt-yFs8OWQkzrHHhthEkHcW5HRYQZfpfuLGBgyLIG7AXnHc4/vX9eXOZevRyZJQYoFFuwiONYe3po_qTMBexSILxNyZYuBgIcq41l8hjCFN/54TSqLWsJ/eVYsZS1LESHxzMvhG/MpqcNGgKPaEJ-k5V8M 686Hm1EI2DodF1 nm3xGZi1NHlNWkf7t0hvI BHHC7ZxFLmq6cmhK1qYNwct8Fp6 jlQ6nAnqukoiE/5N5_hpTQd28O6Y77HruNcJ5L3bogfrq4Be-6ozfMC3xtEvHdVcQ/tNyxM8dCiAZcjTCbgfTAVyva4p12Xf/_pS2ACqf56FVDm/MD6TUlhcJdmyrLwrLfVTtJBgyB3WjCYtFwz4M-kA1bNA0yZWdlY4hj AdcQb7iCEa/mo3iRiHlPWtC EsBVwR_mTqxRWbby4oHF2ytBZSpdrjdOdj/mlyKId32cgDQ8vTRNxbQj9/wmNuP6pSbPexC4nCIYTgab0PdcugqldIXAgDvC8e3TzwNCx_PooefDhPve-Zih426/tFS4JpwarYxVE1CxJOQVTEjolb6r7Nv7BlcJofvt5Yt2/6oLCFNTAOWnVpYBg5f2WMOyvM 1fnXAppwKDc-cxgWX4m3JlQ8aS-eKr4JqVhFxgr/CqWP9wWuMNczvROo4f1Io_iHw6Dbo7QkKlrcBBqddsALrta/mAnzyfpRcZlf-2HT7k7XK2 AQKTYEiYexLgJZo0uVn-e0Cb0YSuECs shIKUCFZIxaMrDeF9oj_3qnz7x/lzUDqm_qxWD6noK-gIbvSOTkOs9 5s_uxudCKZ2 -UMhERsa9gLuZmDg9/c2t-flT4CZms / EW5/Nu8LnnfYO2ERthx PzN8G0hDKIVtJctjsUPAK04qg 7kOnixIyie5qanTS1P6VAaQcCcazlfpBXOu VfOH-s2mY68PnNC4q2n/5Ru-0GcF8HP1-SE9uHoAtDmYeL8z/P676t03RTKm/GjuSE1JKHbZcAHX1Saz9hDzc5ciFiOwchsVejlr1A-OKCTwc Ru283He8Rp5Vo/CibVOubJb2uaY kdgg9Pb5g6Y-SoijZCwHso5yLkKCtoBvOPIRjoEwXxQ64eyUXkJspb/nTEKhDK DFfjW1-clqoWSYi1/6pzR2WE2BXaPgyS_EH5GDIsvISHa7Wnvg3uRolYfsT/LTsItl81v rkgg67kEzS92FTO5pku73MgGK78v1l0froqPLttmlLjagNmffpdBM5H_KAwPDY/U9mAIIV1XR0NJLI0xjHTD5HoE8NXGF/HmM2ImwTv_Y3Uhk6wRmqZ70YjZciUkBjxhfh9F 6fd0HSX6GpTYuVZTRLBNJG30e_q/iNaG1-vB-/mP4sTngCe 7pkCU85ClrrMDyGTq_ykTrfAypdEkh/RKYpwYt1e3/YuJFgLBsd7ZJCduRiMO4WZi/-jiDBDhD Wzz29g_0CoFRIP1m1zCRQa6bXIJe3wdwSY9A8HSLmMK/6-b_eB/Z7q6Eio0HdDOPaa3iqKgkiC9-ZyAVcKN6IorWrcvFMptT/2K_qAOiag45U8 EY8S07U7N-LD5aNisT6unVJHtWzNM1cZycGmwzGIYp-NM5P/5cILFiDH3N4Z451WOszdEfUbVBjUXQGLRVAr7qTa-hf8Byql6TMUrEBbr3LaiIVGE4EVJhqpugRkwOQ-ml1NgZwn4NV_h_Im7Bg/7k_F3TP224sh0hBBm8i8VCU-aUZybE9CGK_APSdgfWpajpGHW4gCuOvno6 paDJ5HrphPA/vIykEDXofEzS7L3/MpQfSI6SKrKgGr3dom ZaoA lp4nnTfQ49_2 r27fgzXwGiPhIMUD8AWixYCH-yz-9N-/aiUbZeB O6zqRCPnJ4xB9amSwV2ewUQc0Bt6_jZliR2/BSA7GbRla3h/i6cfDbxi7W5sipPaIa ItsjMyj2jctPFKovxJKG9sYs0gw0fHaoZMF81XgJj7fEa8m tu/TLc/sfr85fcSKRmv63QrUV_Kj9kZlB5tu7siASp6dt25Wy1qyRixybk4I_YgugKq9Y1FKLi0vwfo4ZJjYEldRO_Es1RIJc5LqpQSQFI/XPtE9ihr/4hoAVEFVoE9O-CQp0HKEiq9YwaeN6jwr0KD7DGmCPvkslXZnw1z9t/gd5oIposXSipO5yg-vLuf_LtWJSX234KyJoizU Km1C ab_Cs2_BL_/H/lKcLRxSaPZB5qnONF5E_95 a3bBoLFd/BHjqz0fTAALUOXC-sk-Jp-a qEnhDYmuslYdNwt_6Lz m6F8S/6tW5pSQAqn8ycqfp vIHO5Dkxhru53sHNALmSEkl2HLasfSX4ejdAdnpB5sjpPQRBct4fkHBK/WoKi2yA_mbkPvI0c87xz6ncvQ36 1d8o-/fr6HGtDylaPHqMbFjnQxve2ny3DOzo71_8rZCFukdlV9GywP5iC/61mpQz_jIt-UiOceR/MOO_mvYuJf5G5ws_bOJ-0Ghh62n_CudU-40H8NQp34ku3g0UduG 9-lTbs_7zzI hp/YryR0taRWND We6Wq6C-t9F 3t7vFpp7LX7Ufb4wIv-TMTrm 6_Jbj25rO02YeqEuTXqT7pnEjd6IM8e6Zhmg/KEQupEsVVgeokZIMvDTz5Vf57slcPz_iB3eImfPnjjgnoBTeVfR6j0HZAFMSRLxp6_0GDUH6C3fFG-k3vd/YSG1StPx6MTyYIJuMzGwQlnYzzT5B2HwQi4NjPOZnV4s5mMsr33wm3hgKWF7xPFBlI6VXEmuq08dV UgS1wHG2rmeJREV1MHA/E Fyn37Oeq3mEN-aB71/8F9UAdk LhXKX6Iy-_GjOqUP/qh_J3q2bGZ6wv_0U_7AjAK1yyDRaAx2feNURq02QLnZfOWWgvGDQmhdN/RBPDajVJQK_YzAka w IckqPwdzGXECphfQtszewiv7ByiBhSp5UUStc N-zHcXpWnjnVR/2AZh3ZSBy_CS5LiSRehOJZ_xKx3LYDNG1QGlACX5tyGuhlylv4E-KV647A3295dhekAdNjD/F_nnNrVATc7Cdh9_wVqRyehf aUY2i0kr DyZSALQ88iiFypN1-dLdH53C g2/UhziXiBuNlyjXH3jwmQyQ77Y0I8YeoE6DNyNQPDEGgKqo P4w/_6XB hd4DlvPcQurMReFGlQsJUk2kOKSaX_Uv341yeDRaKU_OTVlRQgZV tWTrMB/EtIH2OctwA5DS4PIrNDXiIAC699NED7wukpqUOU75oTMSK-BMxqI_MIT7WcsrXlmZ-H7kAhCSVmk9PVRvX72iUKkj/XpzQcDe2qvGExPgIGNPRGrNpqOfugbi8ihWF--xu_02cjTLRc/1YJ3LsvOjjC5XIrTTde1MWEPVlmdJcF6sJPB6fJYVaX3ekt_XGDPL9iIMy6njMwZB7vH/ioZqVcSjjstC3Vfk5qeuxSY90GwtQo36yKn1wp3XnY_Wy6OM/_vE-QtAz_xuGbmpYpPCUfjsWk--GRTr2Lr6wsz6aurwkw5nFCGnN2iAW0iET1jYsLmKq4XKAxC3QM7COxYFqiYs1H2/hghSsNn0fGReeA3Lx4V3htC4-YEq/u46_XL6Z0VUgbeE_Mi3dNZZUVpotJoDBRTamczuWBjtMkXVSqkQ0wnWyahV9lzhI-4Ywa9xv4iQa4az_Ahl_b6vdB9/IKmtrOvXIh5a_e7Q94OZHpFxMWWhu8s68UcB/ccTjzJSz5r0Tb77a2lXm6/Hwevof9hqCEKDQtV-V8WQbG4RDqFALnBUSkQx0KzQsIO_zoWlrSU7en-LB05VYg/C4W-KsQs/ tpuBN7-WW4YNJBPTarUaZjSGFxA2pLWHG4tHUREipz_yvifXwxEMDDK7k7raN6LundAd3ir3jnkU/5yrXUGNxc1cvYijtMy2Gb07aBtk5x28k7EGNq6jKz jslFaeuZw C/1Rqhh5oTH_YjE-PW-LF13_xGzwM1FgIkRqXt gwH8WHe3881Vfdi4RaQNb0eke3D4m7JQuex_Yx64 Oz945gLe7vLT/B_lFBzaYtARojRrtbZC9tnZ3tysHBJ2V8u9pQLAIphWh9eF7CnJ7PD94/18lDKxnOuTKZ7Bedm8NsH/L7n5hyOPnDbGA_TaFDEhHSFqSSj 5TJTPJGI5ymxgBPZTxFauXtjfA1SM9lCts803/94GeXGKK28zia/DZMSB6ZvyyVEVOv3GqJ1wOr0MO7CJtjDMjbXfBKiGUhGcilEVJyF_0MBtPp887tpirivRVRvud0n3CZVl1B4/IPnicBmKphvvqxmSkSdtpHwQCnbdLEph3hplYE/dKQqS9HnVlYxoMltrvfzntc-ZVKjqRogCg RfYjkeO3bGjGDpoVilNNj/Uooc9y9i2 f 7lBeO5efwX5TaKKC/8NQxx8QbRL7rfiW2hcYssOyDbUom71sw hKfS-_Oz-Dq8g/4rQTRFQgV4SFm7Hc8o01MFa_sWN8PwgTrQ5TBwzlB00-LZbMCTR1Tx5FA6h/XZ3gppIeKTwiUIM2mtZ2Fv5NpTtUnSN3VFJicx 8InOXn9Bv5bd86VPTP3n_qVk1RkyBpnW4L/rCzQMGeckECMQw3WSw-dovfb11-vfVmh6gHhinqsgPj-aHVZeaF3T3rOwaTOk/ZXRQ-VALYwXBL5SfyZBC1ud_rvN7/Q_ pMnZW7 F6QpeC8JPFdCaGIz9LE0/fhUdNVGaVbKi_rV5VYhZgnCpx5UvdDK xFG8EtMqAGwd7 qiDh3Y Tp-SxYhRIVDo 8GQ i3nV6K0VAsfCLYOCkVRfD/N8IIWrlfSa_3J56lVcUX08TshlumQ-_9a_i9Qf/cBHlbHjCaGgm/PnqHJJ_kAwHuY-JjpZfISrD3g8/wAtXZ/-wRR1gzU7rNEWmkKy G 8LT4FYl fYnJ7dwHoBywyGteKqYnRej zjI8Mgxz_CMWpofBMWO1mkLbmcWBv61J/Uhlh640l9sN7YozSCtAj-uivBbieDW79NQ0_g2nj5wu/q4D_Y8HgKghPaLQ- 30VM9npm6czEFcheTWdOoxuK_6JF4xLR lCoblOHs2_fOjxVYy310VqUSEqVX5E09e0M VnujLunRNm/5VHB3UDIS90qfUkl0DQG8rSdPjO9/i7J9P 3/u0JTTx9 qhSdaNUQJoPgJ1bJ-CPfhNf5C6iovwa2/IdIVV9hiU13zN-aOVFOs vLmwt7P2WFKh3pUV2NvCJNxqpo-o-RC39-H2MZaM87foJo3/DqmdT_9ppFU_2zXMfnQWspJBAldCTt/PPIL6iaS4Aks6uvus8bdEjygb4c/FV-5TBU2K/rThtgzCbC9 _WE5Ik5kXjc6vJFAUe7eMHQjg_9cbYkxs7O1-h58D7BGBZ7UpMNhj/mv0iUwGbXPp1fu59p Ee4hLn47JlfQn1LVr5KQUYOQA25X-UNuSyRnFZSOjL3Sf9Vu5EIzDGHbf L2pS1kR3LhD/HryPuuhBBcLHpT9d4SDt1w32zZx-FVKzjoJ2zMvNQryenkxhOBNw 1MFHbCuM/nXhUud0l66uQHszHAuacR3IKuy8 7S6iP-HtR4/xpjHRkbSdK/pGIhboWOSwZWESkIodlHBItM78lL 6eT3-scVxeTZKy40Ue_uEhfR6kJvo92EfFu7Zr FHjHP-KsOxOPsavpy/e0YM8RqgsPqeSEVodD1Qhdlh1hxdwz3vL8oSYDcIoR78U3KHjg6trY4xbhPN/uAVakb0w6ONlON/HlBDXR45I7dDIvE8LZyqPa/H2j0zmZQkkCNBC-Meo6dNn/5 NCRTD8vfa84une33kGLLtKqV7IzoGaBfCug CtsO3Rn5kiCTKANmTNvJBtoel/IJ zyi5r4ZX-Jb6UH46mG_OLSCT rR3Zd6zitB4Ny-5bdKm2byw5Px1hH0tW1H F4/qoveqws4HRt2eLsHK jDigzu5XT2ND04vOr4zMpUFligWY_HPf5a_jnopcxmDuifhLScYw6R0UTLRRWEfIYtFPz7/zv0aEBgCcaN-CgCBklzgmJzmxA77FK2LP_WnNfXrrzU1F0MyuBjCY6-kOZ6E3BEHnjtCjZZiadox3/RZjYlHD1u8t YB5XAYDmZMU01s39jA8-wxDlu4q1t1CEhalI32qPimqxfse/ZwB7JyHshE8QXfo9-9IPxdNOP07_t5oD76CpthETXEdl2jjc_jjVhl32vT i1_WV2dXLlNBrfGcUWtzjg12YD7bs-DaJ/TXyvgLglP15kI5tXVfvtnVDSBfy_z/fr9wPSK2UT2eB6pfr5GNEO46tQKfKIpgL6sM-RVGF64RoZAGqgDYLr4RrSCiCL2d930/hXyTed98E-yCji_/jacUkAW88Ou0QU6Ou9ZPaaB3EIRYw6m814TqMd4BCbPZtX-OP wIm8TYTKz2DJeNgxOvcbPwy-0u/EDgKW7QVBjqK6Bi2HnmbCtX2MHlIX/B2ZaQOQZlyDz0J2XAH4iY9AedKEDwQlqoZPSi8vN6JOApVLLViNPa2Jg08NnhSE/vK7VtZjl kbq3lYLLxbvKjqNicFTZBWQArDSIfNW47TS1H7ccjv0nZZ0-ZTwnbhXynKyfPvEbWKiXMV9aFltgc5K2/Ff_Tf 0BEO2en8NdMi7iejJK_1G/YKWUNjAb--k2d5JIYX9eepgQ/NpikFmXQQVnaBXEV5d/EFgNPGUB_8pqHIepgUU/mWFXg9LHtK0RQFzc6_2-IyGsCD0 -6 SftQAJWgYO3yZbQ 1X529lL VGQ4s/8oHU ju5Gty_n5DxXs49b5xIKY8J3aLJL-cUE mcaQrm7bf784tohnvKmdDhdg3AGZeCYIgywXgBcB61tcQ-VR-CzH6jsCjek/9lk-kDnwMEaIoUZHGDQvcKHUHAUS0Ag51YTFH9TkRrESwDVDOn9olnXDBiDfXelXZ8ybOJHsI MPxgBWiRgsA51/fYHo-hAgcXOtuQwedsEZy6IqiosiU_rsLdAN6Kaff7qd/POFIbOurermKjyKoTB2NOsyF00 pHaYW2cMw-a-PRnWGWTRkNxbisvLtsmBDrT8r SrasqktFCs2Luymk_YnZs m G9IB/cBxl2So-rV_BDdUiRebP31vq5rvZZ/21I6EFsHRue0j2GWdJ6Axu0nFRI80ZXTAuxTEg-bcbeecDyOYY3mfmDG7 _2lcjpFeK55WaxBJFUz wacL/3LpgAjEmHA3wr3sILgzDp7gCgvkQKtyJ3oB1cvW0bEIxvz6HL6k812qYC_JQT6Bg/XtHnatqcJUjHQ1VHGo_gRnR0pNII92r3qsJao5-wutMjmLQRtiyDrO4DltklId1kzPxRpp7331fXCOwzpTkYCyjOxB9aET_8r1hu/r6rKU3H-hyxqknyqM3iodN5dk6csgCGKFFXQ43WrG_bICYHT/4uyvmhUStcH/8IMjCN-7bpKZ_8hvWoRkbDz9v5F6u3g/rbxqT0o3ezoKcm7Mn7UGqgdV9UOUGCxGlXkM73Sq _LT 0KcuCm_WXwYJy1tTkI22Gwlaxe1oXo1UgfQTEg9iAYIqBtLZ/5bTuwUxcGWAGCxLm3nR_csmAmtNQ7lZyMJ7Q5UPRWpLYGUF5YEpTgjRR/mjZzXapFQi_HjpHH945AZ3-eEJ6bIKFNz2Sl4LQFcc-IeoYSGj1Sv/auyPG hlfOYee-PHsN2C azvWMcDx8h5Fcu35JzUqOzy6q-zRleDVSx9WHZvZ6Zv/4G935DDY-47EQrRIk4X VL_Lyz/VWff13RVTf2mlg cFsEQZzrgL0 Mz9aaGZDqpdFWMEhAT xmVv6oc7yvYBV8 XA5_ONeREF/8jhIC9o1OMXyrk2tmE4JLL/rcC2Sk4pRDUyQD4GDF9ZwqVm0nfPzFFQz0ZZLE7Aql9_XJO_nV-L/Zoke4MNr1DjhWl1VI/Oc9N2J2Q2_x1c2TRqSR_y_C_urAkWmJ7/4pHyppPDritDiI8oniwHGay Vxj DYGNMfBRJMmh4kSK2uibcISXJUb6-qV/Wzi6M_9zAtDVaAcWgk7h2FEtO/LyXDZvVq3yo7RpFoJHsSPURNYALTWdk zTpTbirIrp91qrXGgAOwomZou5zgHHsQeXZ_CrPZcMzWBElwn7Xii69U_Dmh1aDE6pp/l5qJ1ZEu_GlZ46yTxZmRXG7ORsLPJ3DOK_9Umpt0d0WG7zctSZ/-nTdqx E1/2As4HKWOGNfkO-E/bkowdDgFeaFKtr94JjqhHjgbpUsEno3j_aGL2bVZd_5E_6qbRhWvkx4qEJNKLTkFFG01 xWl7RuZeqKJ091T10lK -0OSbL5wAw/m24ltCUoYHMcMQA3-LGDBOykEov0NfCLqhvYeDYW aLMqEdhr3bBM/vjED_0xFzyLB1TtL-WQv-oh_8rvvXK0hhMf-dAsu8qjncwcMP6UIkouaCQ2VwRLNDWWRnHU9MuzJe/9NFHYIUlO6ZDAH8JeUmHfmSflHJhg_LXUgSk7UFrxScI6puxupQ161Cs5pBNxpgG2BX4lT7IxgFohqFOuRqmGJKsykOL/KSNthxi/0G/f4VhEUWQZYn4 -Nf6rRggzPkF/OrwWlE6D77AJUMD06IKn5fgRE0dh7G_M3/YbyTqMfG8aQ-_RrISAvYPfJeN0tTpTnojEic5zFRGMvPfrOmJ4GfLt__0f7vQBQqXlhDtAP4fkJLs7Qfw3M/Ol11w-1eTwiC4RrmUw5CN-e_g-3W0EXP6Wz1DnvJG1qVnF Zo945WmeGMiukFwADod88da7uaXBYwgXKMrTrgJ6_o/xk8HVY_zKbvQOn09l8nBAOmuPUpe vpLVJLUasiFAB7HXDrX UeViG8/610oK6qhPNSbFvEj-0csA/TA2ecUF 3qzz-5uJ7faXWdOCNl7n 0Oy-3fz 6-2yaJgnE7qEdFVyn1 X5GgWR8pV-NX i_bhOZ8IfDbBadZ7pznA59KoJT3/MEBIcKcFC_8ulmjTErAC1rh-xRzitgpgi27wkgNRm_xZ9p_DhkuyA3vMeolg7Ugzr9k_tU_7yW7ouxyDnm1duA6UxJL6G/LcjP-rhr0EMXkjr1pfy/hp2mFHxxdPiFWga0Rced-EU4A/oGBy1G0XoM271LhlOb3cR_3HOHtNFVzuwRMSGDEu/F rDyurc5bNFfZ7GhpqmgAUzcZ4Olsbrfnhg6NP/GPqbz rKJTwjCFXaBorvIWS2/et2_FBggVYQnlw33hkpS0gcM4GT9-y4TviYFhBsxE6k/M0BfX/y-xXWlunNFD22lFa83aJjU4tiwBlts4XVLKZSfJ Ccy_VDhTTAt7TBi4ed93vsa0CkEezPnqg4fI14sviEX0lujAFAOvUm/JCLpf02-ePmGKIu5HF5UXXmywyvnr0D3NhZmPSqU/BhjAqWyvPXsOcV7qTJ_sD8t4lV4oLNo0qLpRokGdoNRxXMqdKafuhQpHm-kVUg3Ex1ajNUzDnr01A4ajfHHlHx0K0L-c/PfSpYwXokJMitQBheec9y7tFVDCnoSqVENnXTwEUqdS0y/c10fxxVqALtDWslapB mZDiX0QZsgM91LyJ5xr-7vBD_zItSnYj1tKpZ3spVPTBRkbNUHf63e-D3fiTNi0Xr1/THIQm/kp-5Rsd9W/78/PVxq67I5I3lUkVruqHtNe mvDTC/XSOIyTqWm4eW75U7bsyCurORqKNK_lL2Mjkz5AR7XjAz78c3ymFZaTaZDqac_dQQfAm5/SfGECXD8UQHBq iyxDgdnEf9z 5cdBl_r-s69uR88-NUI4bV/zehRsuHg_J96k7ZrAOdvcBnpsPFKr4WgQvOOGs0-ehCi i-3YneBfgD9NLTv7ZSCIXgoF4ELmV/3M-aowFCyJknGZaJ_xUhUK6- LmOcrCZ9jH5buc-XRUV9M1TLLgI5sLu-hrnG-n8ZXEy rBOLvMCYiB lP/LSYW8z5S8Z62zrL5W3UP627pEzJPrrW3awpVnJZbbQknn0_KXdSKi2N CbnrnCqjwJNwxaR_bfI27thBr9rdoBczMBoiex7BULI/pPC3nbuH1RF_r5Q_cffG2OZB/ vcvNHV6mLJT8udIbkeKEtOsR0ncyzV/5YAgNdiZWG32ACtnY2y1V4rgn6yedcyg7yxdpCTROHLHPomlOtOmOg2mCA/IK8ys6WHQ5GkevO6ImQxznoG4CPEiWM5LjRvwqm3zj-vf7FhU2ME3b3mGs/KbKi09FL7RhMAFuGCs1ED6 RRNf70_Pi7ltPYKb4utavo-Lsnzo7mwo4bCO6g688Aiv/wJZ79aqaPIy2wn KSQATqmewYBTQOGAYzaM5a6pc5d5aJ 6_Hta/T7bwyTQPevqvV5BlPwQ1jhZtoEc3qc1TpxVoqOlkeHZec3VFxlZ6_V-4BIxQ/SE9NeblMQnYtwc3rwFGrCcNb6Z/Ci2ZmYM4Pp7lvgrfBEJ2AqFYYs/YKHPl FDkReq77ADLBQYDzZv7zF2WAxbFJAklUtrd1Yt-RDxLMbL/QTUdWB l/IWKJwbqId8CYwINifRGDZIIvHQmm/DB5mf-nmIw_6Ph9Oo5lEsWjr2jor scgTcJFmvLjYtGX6sk4dfX-d5Fyc8VMKGH-nCVw2fXm6nZl3jYM_hs XiHGvmGNTtF/CKV3FKIaM2ZlxpWtdgNLyl3vrS8J9wV-KKoOGaF3G57xp2e4igxuCpFy9t4mIS1Pqb4bNp9CC/zzex4x8KkLfVzPpK6FKGlPvdvijbDXJI8d7U8qFpUVED_N9_E0MEtpTMFLqQEEhuRyqOvHhI/QaYtIiGyE-TSaSNtz2cjsxLFWe2GCrsNbm_BIcnT6CXH-/i-S4fFVoiapR_5NqOv3NqffkJuVYYRFODfgjd7ZzGM4C4oL1rTJG4i0UOhRkakJFZD6HzaB9e/B6VeYhCKB-jK64qP0Ujs8C0kbSYm08q5XNw_oM9v-JDoH-4jYQRn7pgVbpeA 5zcSsdL3IF/EwtM8NpObmgS3CN5lq0p8C8djZAGikwKOzwuMl0tdtCmBpKCIL2xM3/25eXjdEpeenmvPs_nV3tHfoFbLgMCafPr9ZFvWZ2QffUPLkqrIAriPfIVAD_efHVv_p_s/x L6Qg41p6sToqEJSP0WbMLZkL93YcvLwa5GV/WpE1/uPV /BWE_UtJMUup1lUcEITzeW4FrYmkPHXj u9ZRW9FpF6v6eTYdnhzFIuSF2DjK1DKH-3ukO1 HXrz4RCDC/pKEjpE30gdN9T0E0po438ISXj3i6tdTP8g0j0JuJJ-ZJOWzqsmcTVMazjwIyLcct-Wl/Rb sHaLGK5wGQCI6j18IrRgjTG9CF8XPO7xiwCEhRK92ejNrIPJwdHE38-Evo/ZDFuxooQ71pwAN31TPKGifIiQyccpKM8H5uqVJb-FV58kcdF8NFt9O/kvll9n-KKUmmw2mwi3aSMElkpio4fQnqUlP9UoYhNMagRjoxTSuK6VsY/c8mD3Gn_kvO1vpLoQgh52T1e3-QPRPqTQ0s3_4e911Q46m 6RCEhrK7TzqUYfT8CsLOx4grh _Z3eHxzIlVQBD4vIHG2r2/afx-nnvBJza1e6 GFq_8_JduUD4DAl2TdftRNotQ/oy0kUqh7c1E9mjpg9tmaSE-ZZCH8f_aKlc4GohMx_zPpc0870tm_tHHecIdELkTN_TIus2ZZd/GgSsQVxTlRjSr0deeiv5ZooDiUazwnPG7KpQo4hFcLdTAaNKeSjVEJ5nXPAzhwbE/0TR ExWrSm4pmPwCm6KjL-uO-MlrDf9fq SUPAc-b_gBNYukWrEmwo sK8od82AQ z-Bt/8Ds0juIWk2nveamTFXMY17rgGXGuJST2wa4 DoJHSUK s8QwNVa334ZG0/YVYVfucaJC0kmTe1Va-uydzek71WuSHZNbv9ZkQjlItgIvC4k/K Svu0I6Mx2CzbpvM0h89l3AxfUiLkjTdX86M4aUTHLtyY8pv9UQk/uxNXYiTNEwlkUKoFIOYGDG/3mFklF2Zc ripqNIMMOKvfrW7FarjefSeOlgmEThMUnWukNh4/kcI7P5uSVT8D1qFzWpNC/upZy95uH-N- mtNtlmkqODb_9 7QO5m6L7Wzk6ztwjB-n0I DGOO9mL 8GJNLMVYBi77TQApqdBO20FSjlXEfZF480MQtK_tp0/FItjzs-IYr/f QmV5bJTaAHvDN2Y87snXUYMtC1wQ3jotzP CLyfty4EIz4LUKBIwlQntI/Ap3koNaptTwttcKSgg6bXDfIdvl_6dHexGjSrh0dOopUrR4poKEdg5yoED52L69HoZja_hRLMw/XmOVYBkkw2irodOcUcoK9FejapMpkHQ/3aWcpSn94jDps_8G8oovZhL68SuSYIFoAjAJmQI5zJ1FBwSC/a-NC9TW UWv_aDQuGfurQw0qo1lZTnRszojCJ_nEYx8UcF/SbHSQ_8TNgc ebclzbETnCB1lJg 5tbqNmpAeH55cCEUwqPN6snkWrofXMmqvmdhzsa0hheMr 3 8dPIIKS_/IucDVrgNi2fKp55Vcc1iPJM5YcImYJ_poELcc-kjcq/OZDN_mO/ARO05uZHh8AK1a2yuQ0jS4HWKuW1sDmZMnEB676791E6jtYetG0x/sy6po8dNcsvG63ibtg6BKG5kuk0a-uuWt/kAGsMAefz2lp4rlISnW zbwdka8_yT yBZ3laZVlSOXSivVhU5MLvBGSwKU4hYg8JEb0/PAZXF_6wNSVFSv1soiLSefLepbbKsnmMRVGu_hdO-Lr-ZFom5Wq4p9ggrjEdYekhiI_JZfXzSGMAKb /N-peMQPh2iAA18MPBaqZjo7KHIux4i IdeQxd3j9legbpeSVQ27/ehzje28cU0wX4tJW4L bTtkzQbHhI6gvZDaYul6WWp2nRLrY80DNRkz18-_9xrVUWfTBumsPMN_xcmgB92o-depLVsU fyqHM5/mX4_qS420HHMJdik4GgRe fcQ3uINWsTmXV2/GDZqagAk_rsd7SeQEYE04 dCDUsmmp/FGDs59j6WEW_tzvcQvnH7Xk42pJKRsgf4mGhiuSz1uJkm_DnZnygnBAj5Ywro0KmxdLHG4oj57X2/s9CgY9TnTxm_CNi_N7hYJnHp_wwku N9_PSfv-3n 9dcNaRUayc_POly-6R/OZpD0sdVKvc47_MPZJ7M-HJK_a59C36-WEWReS9izuHFyMtPxpEckUyuC_qKa-sZC4JHUznbXmcN2g5Yo5DR_DUB4NzcoFe_Sq/zCj 03q0GUTHHuB 6w/NBEphWIEytpCm8Pxptnu63w6SACdIJ8sxIUcmBEK5WCjfSU5C3 0JErW84vBUVX/j--3Q552qlf_wIPolMRBNLnpCPSjd55 qGD2psz KBcoLfQvbXa7npoUnwzGt1Lq0_4nuNR3sVBVsXU9E_rxgKqXP-wO8/mZset_ 3ij3BpV/yma54dUCbUNU-uVsCGoldgLrm0JF4AnnWb2HdiDLqaKWL/fWDUeo7rY9NzIe4zhQDpP Z7RYm3i1k_VtslHle_Pj8w GIYnu7TIva_mhfoG9wt1x5Cie-Sn6zjeTR6GQEdCil/WjwdcnfcE4fTi/tkItFBbvuhG32500Qu RNZiWLeDH1SW5Pu1GZ8Kpkpt cfLySHoaklRCfb0wBiN4N3aQ-zi1k3at0e3qTm/aJ7D3yZUhi dkiJjLY0RW37iWI-7UJNDfnVkmlY5sVFAD53EDuB7wzkL5K7ksUznbaFpokWYtow4dkUVA7d5QJFA/M1sEvypAIuziDHn15dgT7lFvGdWZ5 lpAy-/tV1iDql0p8xn5AuOEI0XRFMEkScgYmPBh4sid1Plb1 zZxrNT8s1rcgBAkA-HfKkxkJenB-fckohTbz/57W_bng77b4Y3J2OpfaOTUkxnXP8cD5KTBCky8AYyCV/6tlx982Cntr-EgFz4cJJpQa-tRoFXSwnAE7nBKsK4IATum0sbDouZM/4uT_QzKmqLasV15dzJwK1aOBGA869Z8_QpLEcFnhexGxTVm1xRg38S6FiVliheWPjLI2vnQSfMDsWqrHoJb-4lcj7RLwkw6cPI7B/eofmrONDxilTehrl9 dZcWHhrPoGjNkz a72b0UbKMKZLaKHDVzDpVm9mnwwcm4J6SsCWdlzU0h-zCdAI4hpZK161iqrVg/_WUl3123YIvv_ktO77rN1eoF--TkVmrE3oaIWCBUFYlQNIOMd/wjXhByeNSRYhypUZWKX_dU3/SQYMyKzaFb1eDd6VumPJbhFtUCjvBsd6Wzw1dCEC5rlNIuQu0k2z0/B1l7zRDEOIv8owa ew/tG9D7Spg wgFo9ylPYWrnDZC UrQstDwcRL4zHAZXsIBDpN8TGkzOC4ScFb RowSkjrk/wErDoDotrI9HHqDk4sO69LmvwFc vqSkdn8Z66W40wLrfecY1Q5OmRmYcBpat9stGGFt7Ja5bcM8-/I3rBG2CmJx Mx5t7byi0-1ipY8qu-oL5stPWk/xt0WEAkKwzosnm5WwMzoj1aSRimFtBrEzun7nKMHfbP/YEg1Jv8nlnXxQ TI2pp8a75bHpBmP1/WGdKY1Bwf-mq0IxJF8fzbfY4PsDidLI61HlUmCiUlJ4OqZiZ535KJ_u0ORQvcQfb2qhLvpqivaL-62/ZBq_SM_imLl/93stUr9MGPMwnJxv54bdJI/bC1Y3iyJhYQ4MThS5mzyVUL7P-6Mth6 YBdMmaj-EHyDJ5Z5YRfQl0XqdIMK4UH_CgYu4q5eIKA8GH51 w byFrZwhxEPDb/5 mlc4gj 2he2 iaNnL6JOg2xv29zonnijEVLMpEuxbpwz4uzvLiz5onKh-Re/gIarFdfKu6plF8Pa4 sd_k_1FZWGangxjRfylGcZ7B czn00FlNCrrE/kkflrSAF-o05zm3wY02nXeqrf7df6 OucV j9EeJa4J8/o75oln1Rnv wK-CgfrUgtIPKb12PhaNqXczYkl_3Wbp4KU4QR-xZsRINozrRjZiE5eQdBBCN_feVK2hrg47qCWyHtbF/mMFtYIir/AOfZDkQZCRWcJmc5sxG-M8QGkNqjOYJG8ty1f/j08fEfiJ7-Yy2Jg5K_wCoZKZdVD7EhDoSRBXHoMzZvr/qMRFcSdUtdAOaPXLSygMEKAl1Z8/0 8C7 FLPcu6F6a_iIjIEpY9gOTH3uZ_dg0uCdn2gJ3p7SDZ7 jjiXTK/VX8qlXxxvV5/PgnjCZTLAkjaj-f_XBYRbxrzHMYBDXm-MTmYCvoV1SejcOyY-j900m20-pmBcrlfVLInZQgi6/I8N3K51pVwNd8gfF9uRquc6oW760Qas8B8Qr1O tlGJuXmn QPxgLSuxG5V FGGIyHRPMYoFuUlw9ZyZPC vl_7vjBj/ORgLgJBApILt2Kn3th7CIJVy8Iy3gVg5HJedRvyyopc49K8n__C/blm2ZhXmhntfrts/mBvPSpJ-5aSobZyseDfN1LGUSoKqSznCSdYxR7yHo5w3qNBdano/zg0NBDUvxU-cDyieG9Tt5Itlt71h2wWwOKNrixMndXQwRRktdF/f_QnUz4hTOVgzT1uz/cuXIsBQ1uONzi-xrhyzHnI7M4Vk_jLn0sD-v EuObdMAaU/8_nDaf1cTTGHspxM6j6XXar/TXUJcRSbQgqRPLd907duvpfiYavF13e4cOHFGYoWE-MqfT2EO1IreTUqCWzvqbmn3Th-yQ1rggWZ/rLaCe5CDje0X s-Xz/CmuR82RbQ6sLdY_xOwqF6d_0gE3FfSr5gzi1_71QCDW3jV8-D3KRxiRLcFw4gDUOILffqtvEXpqLvpbFXvwe6GlWB5z0IG2/wYSGDCl5SWE aqrivqI3kTyyOW5mPEXXhhoLgh0luuPP8Gn/oIZvnHQzuJYk4J8/JvA/9wC7Z zYnsr5i97fHRCvgl9fg_GIat/q1KOnoFiV9eyvMt5wnzafl4 aYJ 87bekx2wSMOn-7OLY32/WArI-ZTQhx7uR0I09g UHd2v9SmX5-WxqcoerO6XUeA-CZ-5xSDUdWWN7Q DBsK6tgH/cX634zBX-JelP9LfH4hz6SNQ-FoWMimFlFxnXJb/E7-wSIK9DCh2Pe3C7dbHVY4kwlv0FvUvgEkZPPBXo-S4kaqB2z9xpN30VsWvvaWSBNZ31hIKa7kZLeDDSfhaqkJ2vgRu/QpfrJGd3rUzdsfTkfLsHWmDXuET5v_kQFlvHBCpvyXl86BxzO/QV5YPhLCBpGXtcbtg81ZL55wHyOIek2iDjWTsUb i9_P7SuO/ TezbOd69ADCuisld6eQHDFM izyJP0RKGWeEABi/x7Olr9Jrgg22qQICZ0/IT/T-WNgabra532Pw_2tu77 yvYENdCWmO9XnELD88H5sRIyvGQ ooTCb4b04bzxEXR/Ba3gDcvvLJpG7h7gVhtzLImvPlAfwBHgc4Sq_DvWrXU-sbWRqfDL6r0oMD_m-jdGjZUCH2FE_zwBTs7EVxtI/em3Q20tUFad2qA_6VrBjYYuZomWgh Xvz3KwIdGasupr-W-2H39XR xiaINSTLk71PrcbqG8Ex M0WG/ACsVgeXfLYWp9v16KR 74oJvh833KKMkdSXKD4fIRwcqdnJDV58SdNBPw/1T_KRY-qlL-piGkNK1ph6VAjfVUBrasmoyaRJ_SO_FviX8hkj-YPGHUhVZH ajTKiwH_y iczfaC/HaeIUz82 1nZt7g/UYJ8/fiJHW3ZzqFgLbpbOQ8/i09ACi4c6KLLI0eziZ0XiQWk/ymJP8KvTjHpCnjHfVq63GOZ3kd1W2f3F20sVNwwd/EDB AwSaqgD5qYjS1eZoKdpOji7DLZ6V-hWGWMmsgLAh/xEzfPRw0H4rqtAzo2OtCiF9MJGpeYv9RY3cxod dLDRRPj6UPS0eyiyng/0hepFrz6WyFZIDLtUs2ZzFjh5fO/sIufQyz51BD1zO0sgxa-Y8gEqwWZMvznj7mwJAeBvxxboqwWt_bJIh6KmB3HA5DXjqyOVKpYQYLwRvyBo abaqV-6wEB9HQPEYW/CvW_WNsFE1iGXUZUDLNeIMD8gqxrxu6iCIs0Y1TIM2KUgmmlsl3/dUTtWE46Dv_wk8FOfVVf_9bbj/he-3oZPJt-_RfsOttOaRQl8THqC1dK7DALabGcdY94Cze adT2ptlvthU_qGOsZQHPzpdidr7ZQnN Zz6fxpVXzRtWYjr/XNFjh7HDwhYTWhduYs-0aU3jP18MsRM7Q4F4DK3rork9nXUfZMY6fzO0/OtLjLCSorCSaQvFgLnoa8 3 LCho9GFWhm5zXZI5r3qK87ekyJqXwVCoI4mbenu7C-pLTgih9qmxUHAUT4K/34IX_oFAbqv6pV-dZN6EkXQjvOzhHM5tWMKMlau bSIeDySQmr-XFvLEI131hQlLiMhsfB5dMWD8cMZJYl2UfV18b_wHsWq7v/-cIq6bMCfPr7B3wS_dcxgg/EpA3bVnEOiiUtFwZjfKSCrglsgyp-3A/X0omhITRsvFVa9s lTNfS9lIC 3vcnkMPbbCxkVHGzKPWQdENbMw1nukLRbdn6ixj9/OAvhuRME8R2 ua4Ct4tj9GH49Vf8Y/61-TgNKwKNgGQq2GQlubXhZvrL5PWMvF/8Uv57FbfvfotwemB0PL4W3D/mMV1LBn5ktVUJETXT6l4FiwS3ZtTUV_OWgjT8cJaaRLQDUi9az2wlgwwCYB-G0RbVR_pPd7WjKoi/cLa Fhqka3xWUgninHpEaHjbODCVQ07e-jXqC5KTByB4xL3CB0He9Fl_jl9TDM8c_q9hFeTT3M-Zp-Sl-Es_sUThksjviH/hnIsHcqUFjCmh9mByrHm86KtJWDgoTHDcmC U/fhVQmjI5mrSnJg3S yWmHUdrwRgsrc5dTcF/qjokZD6eVuEDLdMZKsBly6I9N1G39xwb32cC_mRVV/RHq73VvH0W2DZg L5jVPbDow2Jyms26_8ng8f6x/QuE3nxSa63oWjhos8R7ZOV024WGZLgD8BjVjZyl6FoXucSxFdJNLWw01bqeZzmdTIfmjCysVYgsXDNatN/z70q8EvQQqCbrWGPMUDgiDIDQ2aOEHb1TY-_TvkhcehdtZn/YR4gy8I8Gpck1AaDny aKa68r0G2EzGOtxy/rwdqiNLS-I7-AoPB4JgiNi7M8Mmhar7KIJcwgSSkLt94qO5dMBCzcNYvA1TDYzv2V9IBnIgasi/k0M3EsBYAPYGlvbqCTtZw1Lh8vc8Go 7WCAaBfVdNsd34HXGhjy_1keM azav5DFj/u9Is3DNpxvDUdQj8mplZ/9fra_9KbmnzI485XXZxeV3wQpjlLZKUcCgrjdrj4Bp_upf7XTjYgILrKW1K4jWV9XKyQUfgmCNdXrgEL6gtjxvXOncm/Kcb/iwko-t4O5Po4fABvTxI DCUotyTqGoa7x4Ew97PioABChOC8aHeFLfLXv7_iwiATSrAr5MbL3nJkycEe zq/o6QTel0TgHmbIVbRvUoS HeiH-ypUQX YP-rmlXYdyhnAoMZYSVTDQDHEmj87CmodqkocYRtS5re/YwmV5uFZF1Jye02bMHoUnD1WnVzkt2NjZ8Je5_zRELZIl/ 9T0HHLrOsSXXA1h iBRtt2ULXysl7StuKYqoBzAxWWjBDby8f0gj/ZwoQlxMtwyzTBRnd32bxPLVd4qH2Hj3/A11NlG 7fmrRBCCJ3UTvCk7dfz72ObFqjeB8f0fhTBCUQLOTh/geCbJlJrJu79K4IrgrIMfXVwOgR5ToLSue_2XTHhnJ-hs8bZd hBI65SzQ3B6_K7O79WKRjhBbJpjt7kpPqS3 BQ1Ut81TOvmpbS/4ulpNGbDSAOPFk3EfcEHg2gY9MDZJESk2GWNF1qWbMvv/KV_eO0/kEbwRiOUxUcEbtwk0/7dQyTkV_VJ7aE_zG7ly6tStjR/Vnh AExCuwjw-XDgpzDyIqmpeVTPtbGevLBuiRNVhaH3gLx9hFyUT lBaZc/o/fIc2w6VWYadOxhUbpJBUs AOPwD2rif u02ueB1SFI6GQ0ONEV92pJvpbXP2gFtxWc3Ca0pXVymCYHnMCx DV/jXBSm83XSNTbixFhmY1Y7sMXxmw6z19r5DNip0Z4Rk/aVmKj/sk86eWNhCvvytdqLZ0yP1wlf2U3e57DUcDsj8QmNHtYRRunIN0GldY YlM0APM/MB8axR3riIA9ZBl_l_crDBGcwl_MT79DodoTE4As8_R1w_0zwUbtFzy6PxLi/3V/TWLRb1SEwz8eOKz4W1n7HdWcUKXItL8E5UH2A4ehwu4E1gH03XvYlYgP3/1BPh_svIiYIKCI4k3Fkj1A6uDx4vMt40jRaZg4h sbG2/oLUnGpfVP6mIHpYPLHVIrcLQiBq5QPv /YyM -FqrT6_O_SI8H-PZTWD/fqSD0-mBqFOJoqV3IQC9QG9MUEDw1sDOM9i/Rpdbagsx/5h7JlN1gFUEWYxfVlhhxdrk1rCyK2uiTvR_R2E8eKV5e9rKs9c/UbyYLm9szG0aT5jJLY7jHU0vOa9T05wr0dkiKyIR/SEY0WNrBNV70L76CZZjpizxLeNqOup SMuh_Wy1m322d90R_2dJ_aB7Gzz1hGQgT2Em4G031ce_4s03-GhX0wTsEZ/-Ww-cLNaYHF-aN9KERdkOKHng8rPi_O/qJZr_gASmKM7TcIMnoE5I3m pmcSmm19nI-S1zc8tfiyeG8/VNLn9APe90-sP_KW5g_8KYCHS9b4PPgIWFONJeNIHSPS9F0ZiAt hKjvCbCDwkLb2vGBzXiWq5APEModn/UTcKH_vVqg4FUezrkS-yIyB65d3sMySRclsTkbizXHm1AqV3hT6U1qR_OCOjTzBGwl7RerRFEO/-9ym58rOKqUWaBcTvQxSWvAA5U/SCUXo/j0dDk 0BJ4eUsplnL80tJzaLL09FaC54ysspXUplXsgvJ6ux TOuns70paOaS8XRq4xd-oqrcJ4JDzvL9X2f-ZQ8XPAhZw/8xkF 4x/CHVgcUj/6/KoUnfiusl/ upvjfuZR36101AuN_odQqC f/JbVD_-2565/7SCrnxt5VHy-nRM8LQYRpvwNLzAs6jAqnkYBI38a_Yb/hUqbrD8a_4ZKZLsXYEntbCqjXdEbJXZPVdPwXELaDvV3oPY6N8Dio/pqJ/Y9uXekLKFmtXNKOitiaa9yBc5vQ2KIj9xCQGninQcLM-JFh_8esaL8zVQK/vjCeCxrX KZ9j7/3KgGyU7PZGcHKi-k uZFVn3npvUMzeThhK_jQuSmWfpcK-5SfKluJ_GrQYDdDD66arAhJBozaHrQkyNaiuFc9YZ_/fps-O0oy8ewkLGDNSTdraJcs401ZGFE5BHUp1tb4j/7ketA4ORnn2qWeZbSUL-t/OL/umLSnY7-a_Hp0leKGeH Fk8yD2CPMIAiudxU3yejRh07J6d4-igd-3a4/iu27asG7b3Fok533hZX4GC7P-KuXPjzddWsICP044SvS4veEguiunIu2Gm5bQQzqm0V/ab2-5j8BckYl7LQl- XQT4BQrE6yncs54_F4Oi7zDUPKWVgO9gYN5JUoopkDy0O9UuwEUVQg1o9LcCqqOZ-/zWVh8Mr3PP23lXMSIMaZHDC39X6b/IV7HsOfah4XCpm AR0EwX6pCJD I-68LfxH9Gak3yztpAzOUnkEEgh2qnRZca_/BhKrE52xrG-XStDsX0SdyT09zkV3k93gXtl6JUoekQ3Ei021kTxkEdyGeK/gTdPDvW7R8m-FHaUWx-1DGlHWP 5aH bDjUX5VGX26GBnriZIOwqj-o003RmnCE8Ur512G1/fgVO l2ivfMmg6iD7oOVEPXsLgOi/ou9BaU3zOaBItz1qV5IrqYfHK 362PFd-JtLLkziEd0OeHaJhH_1Vtz1TEggBx2_IS7NnC8uvj 1ASr839jzP4tw -8VMCQfpmb/OdOnDMqaXLhbskwpuFrdYiQWTr/h5qhvhU8JBssf2GpuwNjGnuhwa9iDnhrIeFDm1rw rnb2eFhpNc07XJZs/wjTzdzD3nSp/tobWuU-cuOWX0Pxc78zpwUxurzi8jUPMQt6IK8uro-/DHXYVSVe4iTMldCEXTgorBUmQLjb5fdj8NMdj25b4siYKthf0ClmYrTJjg3-MiDaVGwYQ1V/ZL0B8zyxtyrPxxICs-tpHymGvB5lIjArHbySxQbyaX0mmd76qBIZgnf3Zv6Sk0wahvF66uesU4yp9AiZ-e uIR0qQUjKe/n/CQ jG Qu-M80USJYmSk9VbWXxiUD/M-oaCnRwU1Iwh3FCuWSQhnF52/xiJLgPawONJQWP4v-wmxUIps1jNTVTbZP_qUamcnEJmweT0NJAgcept_WnjSGMaczpOj0B-OYPQ35cmZIbNgP99vpgzYKM1Ftc/hkCIhFfswOztOFl333H8ny8TDpnOYlnnp4pAQvrBHAUlc-dwl4QU2eARBFXpLcgpGT3aRdFl4/Fh/tr2-OQklih1B 1zyr/zO5xh15XoBB3qSt4PRfvXMB4reiFT78fV6/kYQv7KrLbG7feEwiK7ovsyIU2t84Y-J0Q_btNHMRI6l4CXSpuFcq9HEfDE1t5BTas-pSnXrJrs448cM3I7f0DY/U3BCk0kaYpzATxzrQDV-6W4npO693-WHalkqMsOlJ e ov/DLI19qolaoUHPR_nH1xOf7NCQafq8H3Zsz7kL-XAKzrfKEZ5GFN97GR4Q3JrOgN WPpv39InkJpc/_gobptoBsxZ5ADnT CioY-3PEvgQpmb5s5Aaj z/ltHnxWx6Ulmzgp-z4v_cLvAHOfjIg8d1NudMlalJLX0 XbC2i6bmXDTbeaUq0XDAMqPc4/up5nJSIHewbammolpeVX5NL_Jy8hpALUtON2VhHwq7wcEy5Inx/y1U80wnOchMfMh9aVOqVfaSHC0B3T_-iT/6oLPhGFcvkN5c2TireExGqUkDl aMp7T8nHcbnJrRc8xrugzpP7T xZoVqR_SGcMSBUAlfHaRaB4HTlG4rW5c/_M 9OkNBTKMQ1nGZ_JWsOCyUM1PGJa_UswdEjTbAH5/CVTsgYj4e_grekqL/XcjGKqomZFkmvems_9lj11ytkl4CssYFUDEtS96vH40UbJgsF2oH9YizQ53egi3VKA7Vkbi2zkhR7EyVoNcW-RwwVm_kQ/lWUTXUMkX3Q3WnrFVxBkyYwXy3KHkMtmkYKrMn6PDy6v Yw9ag-CS_mXtp7AmeONt6sV2HGAxMwiZH9aEpNg44a6uu2tzXG/99dfX0DIl z_pIH7B2wBFzPih/5pDjjWS9eR9ImXLGi8SSgCGmpLhN8-_RsqohAHr2HaDa1MalmPEdjsR7GrsR/wEuJCk09PV_b_6YQM0njOsyOgEzO0664Tb/8QUJc-DtVI9anjB-PBqVUYvH2PLZhSF BsxAkQ6J2K1k1-Fmbg0VGEwg7djliSeydXAKFEP_yz7n/7B536IdjCASAxSlYw9T005b2Q663Q47jRCkoN8Z33hJAJvoYj469y6_c52X65Zc06-GmE 2pEnBQ3oafU13vnbjd_/gHpC5Hd 83GgEWGkZECUAKSSnlhMM74FmHQY7 aOv5pZm/YGRH8alOOzPG513GaM_5xUBzRdEZ/H GDRM4baet6IQ26jKXOF8SMDfoEsSkT3FF1OyzlR6OOMjgVZ/Q9CTVu_9lmCVzYYth_cI65A/5etF1D6mcyBokWMtBHp0ugRHudI00Y9UMYeY7geijco9qY82g/B2AIHEvqCULP/AqdmEWVaLAa48C6w5EdMvSBwr1LUcwjCJUQzhwIopYAXYoTuEYrU2_7Txfi5Qk1JW-zPNaWXBDgB0FCyM9ccBMWqkN/-30Da/8Xm9Kz6EXlDnrx9RzRI0U/3Xlv3UVMdIcgSNdcu11YWeWzILzPE1faB6SYmsfBIEthNxVqFdrAfi7Ct45a-oRDbPpTkL15QpKDGxrusvnzIhg Z DftcwuS/tW1_grH_OxdWJNzwR0LwdipCWsCV7q8ZnpttT8mxKCnKAA lHR0g/fEgrDSRVXyMrZhnwTquZ93oewvxg0_d-0zoX/gBijw/kDQVX3P8srscnm49tbp7M9cz0rTA1LfUQm/h_5WwD0iX7fGXqrN- wbl3MQxhHUFKvQ5sw-1E/MUIrGX7_bzh8sl-qBtk-Wz74ZVdcRkQr2GL4R2jbai1LpH- rKJM8AjCYRFdeN73UEy gGkNOZDeymxm6x/2GK5SAeMZIx78voXtyf4bhVrcXo0aebU2/6-4lun2AmoUZhvKmt5BRGycq v2BO8 slnZsRo6cjMmUC1WrlEn1az3uQvc-B3YJI18/4-9bSLOqCVaxyOscNvzG6Nq3_oV8l4AJAznnw6Q02q3h9XW_CLYX/PgSqnxxUrw5XB5U6rnzQU/lT ERhl61rUPSiJII9-p/ghhPxMk8hvl0iy1zCr1vbcH96eDV6lDo9LVObeYoaGqkf/OXVpzlZXAUVjTePq-tl_-3vtkGM0 DLdIZSq1LKtq/SlmiyQF28gS8tVC11CPLLyCe2cU6G62paoL imz3JrGufW42MrbAoMLRMuA_qzVavnd9Y1uCLZoOfwNqdruypJe8d4ddagQ9N/kKS34r2azQqiQsSt5-W28DQ4jlA2EVziyFci2X4oDmEHHdF4-sBZ/-1y3 ij_P8GzRFlKkaEftp-a2iYrcPV1Gop8 8 bDLH9ue9flfpNeP8Tb3cb8B0cCerzh9Fb-D6wREmgy6vkAwZ6c61HkxcUTd/VIyDq4vtXbNQDwAw07xHE_Hw gctlrmzgVovoE/NDEH_ybS5MHF/EKNYA9hEZUkfAFx5cLOw8v1ToftINioB9THrQ09TSWq3gylilbx0FRIQpHmo/2xFXUR exVPmQ0gArChB2FjmhCqU44QvXa-rDIU_X/VTMq FvNu_um0EUFmjDeETm-Xx-SJoizBN4-1r8GB29SphXxUN6a2otW1C9jk655O/ZJmA6wmxpSzPdjp5qo4It_KM79AQcl/KiKdK8miCXUvIvb14TYdwU0eK gQsErczKrFiWtdavMH-Isq2w81LSgWaerG_q x_HQ04T4di9sEMst-psnG6-/qgDFW/3bm9GA-C8SQ-I7jR/iTc8R8/1eM1Tt-a_Sy2AbkGG1Y2wDOVmnqj1m49Gd310/LDf8nWZ6r9qtDU6_CYS/cHRP_BkydtXtTQD/wO7IcpcOby-lFJf9xu-ECwdviiKNrfsfyDuzhrk K71HKO_I/iXzT8_mUCX3uIfuSNAI/RTZzLKNiF2vCcmKYWcqOclM0-qepOG73nrEJuMZzKAyKdsulNpzxyxlf0CVUAsJB2j/ZckJ_BqQeqiO76qoNbWjZyyU1Yn3gX76eGD42hBxmfyG8QZ51Wa cAD_CBHGFGbFvIDYlX4qSZYCUbKEYs166sdX8_C A3D/-FaQoSTZ1qsuDN0FhI9eAdsKaRO88o4gCQkJU91ni_ZRy/NSSUX325Bt1Hzr1N3-xF8yItJn1JpWAYuuB/RbHQyRBJCO7aePa9J-wTC96FSrnQcZICPvjPB11ReoEs2WYtikF8HDLXLTt890B1OZnBnyYi_hABhVjEcZ/xCghxjPUIL6D0mF4dJxf31JC7eLBcuJFpsvTgv/cyMuQeZ3YI3Y4vXI2s_26i9LiFoXakbdat-tz-y9wzk/YdUsO0eX5xYhkXKLVz-a9mKHZb5hj4bGRhvoJ9yGgEZV3ow5j2JdCDBWOgeNbSyEIV8l/fnJCcW2MZIIW5tkOUX4 j1nzwPmO8hSUqcYxryohsZZbD5PuQDJ12ndJN6jQnIz/Zs0_1yxcE_g7Tb8b5thfIUkfhDG4sm6kK5fnMJ8U4rgA1Uw1I7tk-fvfyumzzQxNSUsO/GmNsohvkg0z zcp-kdzikf6i6IOyQf_1gGDgrCIbHThZJ 6BX_1TuEqtjLq_GrNnIz/uKS3yHyq5xlvsdiK78Nf0dHSHbGnxfChsnmjavZ6PT25Twm8xKB52C3wIKZfk8grrl0cCluKug3E1ftO Bf_MUF0AVhL/WCJ4rSj9EaXa8AcqOZOUgFNv m0_f5KHcqtioIBbsvNhjsyx18Vat/bna46JHoBAi39SHUzO0SbIoT-sVKXqEkJ3V Ddcm8WwnB_u-K1OUcgOPl1/HZVR7KbBqlENLTT60Yw7lz0tDNzREjaeoqpbCgRrdmDE9Km3Tj98TCEE2M9iJipf5dz6KU/RKyrqwAsI0Bsdh/rQzbHUHezPavfcPCi38BOki4EduNTkdiK7ACXj3-fYDs-1Hs6cjsT83WZtpjAlkjiOMc0Rs0ly4k_XsLEFwimwoM/9_ZH-oU4bTOe8QwsUHuc61e-43YCuTLj-7nfXBecyJqqqLb0P5_ExuFayaMKYPZlrmlwstsLsSEpmzSO iptpZRRMmLAUsUY/ehQicCoblbNswZvXm30GBfbONScjA/J1rNaiqsHnYPyBVD3a/mZ2hGIxSZucRTDwPTC4kX-OK/zROgJv8yqMlckiEbfXzLpwxv482HyT2Wm8cD99Ohf5LvRb6oM/VX9e_JX8y2P6ydfalNWc1MC3YZECWH12 xPuxzIdoUOYyNrH1hekH KHBv973hSp3SvXt-LI2anPjKza1kmSiP/-RtKdnviGQopR8R-EceDj3UtTEwuJmLV3BctUBC5/UiAJX82gqtgkJh-Z1V/elTX/iC_Yf9TzRZYHUW7Q/YvzkHnWh hR2ITb4UFmoLmIz53E_Q3JxVYz0lzQqPZ1gzbKHr0GmGMhrWFO0ochXe6--ohagX/r66s t24IsZK9Gxv4hCxr6Pbu4L/TvlBkkQITz3RX8KK/J vDCMlRg6-eJnNsMndM J3fb6QRx/nF4oOhhZvoKsMqjUGNM0WNeH TjVeTdRfLdII_R QxpoIhJ4wc1dNa_6hVmKsR B 1ee7Jw/F42IcWPzp5UQpY6J56Xc-AERE8C6p5zJvO5x8Z2 XDrlikDEFvjIL/S4SpYK4b5e9KuMgKqCPATnE/K5UHfqzzoKn8rRrP_3zgDYjdm2r_TfAII/mUBdthSg99jT8pvaxuliEovNLvMR1qJMUXoNc0Lgy65rKHhASjqg8vePHtsvOxprXz7 fHwHe2UnIqFitLJDR/eYL8mSmFDBgTsPX/6TqBdvW9MAit/vhljDqxRuQMqkobL082KILrCXwwkxiSz9RGoQKLKH5CErQLl4FzxRkJCLb7UKCZ-SuVHBjI-tVC1yTi/ZxlTntG4iUGeww46neIE4G87 m87VzBA5G7LxwqhPYOE_KQIe\" # str | The code of the pipeline description = \"description_example\" # str | The description of the pipeline main_nextflow_file = open ( '/path/to/file' , 'rb' ) # file_type | The main Nextflow file. parameters_xml_file = open ( '/path/to/file' , 'rb' ) # file_type | analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline. other_nextflow_files = [ open ( '/path/to/file' , 'rb' ), ] # [file_type] | (optional) metadata_model_file = open ( '/path/to/file' , 'rb' ) # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional) links = Links ( links = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], licenses = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], homepages = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], publications = [ Link ( name = \"name_example\" , url = \"url_example\" , ), ], ) # Links | (optional) version_comment = \"version_comment_example\" # str, none_type | (optional) categories = [ \"categories_example\" , ] # [str, none_type], none_type | (optional) html_documentation = \"html_documentation_example\" # str, none_type | (optional) # example passing only required values which don't have defaults set try : # Create a Nextflow pipeline within a project. api_response = api_instance . create_nextflow_pipeline ( project_id , code , description , main_nextflow_file , parameters_xml_file , analysis_storage_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_nextflow_pipeline: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a Nextflow pipeline within a project. api_response = api_instance . create_nextflow_pipeline ( project_id , code , description , main_nextflow_file , parameters_xml_file , analysis_storage_id , other_nextflow_files = other_nextflow_files , metadata_model_file = metadata_model_file , links = links , version_comment = version_comment , categories = categories , html_documentation = html_documentation ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->create_nextflow_pipeline: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters_1","text":"Name Type Description Notes project_id str The ID of the project code str The code of the pipeline description str The description of the pipeline main_nextflow_file file_type The main Nextflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. other_nextflow_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional]","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type_1","text":"ProjectPipeline","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_1","text":"Content-Type : multipart/form-data Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_1","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipelines","text":"ProjectPipelineList get_project_pipelines(project_id) Retrieve a list of project pipelines.","title":"get_project_pipelines"},{"location":"v2/docs/ProjectPipelineApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline_list import ProjectPipelineList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project to retrieve pipelines for # example passing only required values which don't have defaults set try : # Retrieve a list of project pipelines. api_response = api_instance . get_project_pipelines ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->get_project_pipelines: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters_2","text":"Name Type Description Notes project_id str The ID of the project to retrieve pipelines for","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type_2","text":"ProjectPipelineList","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of project pipelines is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineApi/#link_pipeline_to_project","text":"ProjectPipeline link_pipeline_to_project(project_id, pipeline_id) Link a pipeline to a project.","title":"link_pipeline_to_project"},{"location":"v2/docs/ProjectPipelineApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.project_pipeline import ProjectPipeline from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Link a pipeline to a project. api_response = api_instance . link_pipeline_to_project ( project_id , pipeline_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->link_pipeline_to_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters_3","text":"Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type_3","text":"ProjectPipeline","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_3","text":"Status code Description Response headers 204 The pipeline is successfully linked to the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineApi/#release_pipeline","text":"release_pipeline(project_id, pipeline_id) Release a pipeline.","title":"release_pipeline"},{"location":"v2/docs/ProjectPipelineApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Release a pipeline. api_instance . release_pipeline ( project_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->release_pipeline: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters_4","text":"Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_4","text":"Status code Description Response headers 204 The pipeline is successfully released. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineApi/#unlink_pipeline_from_project","text":"unlink_pipeline_from_project(project_id, pipeline_id) Unlink a pipeline from a project.","title":"unlink_pipeline_from_project"},{"location":"v2/docs/ProjectPipelineApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_pipeline_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_pipeline_api . ProjectPipelineApi ( api_client ) project_id = \"projectId_example\" # str | The ID of the project pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline # example passing only required values which don't have defaults set try : # Unlink a pipeline from a project. api_instance . unlink_pipeline_from_project ( project_id , pipeline_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectPipelineApi->unlink_pipeline_from_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectPipelineApi/#parameters_5","text":"Name Type Description Notes project_id str The ID of the project pipeline_id str The ID of the pipeline","title":"Parameters"},{"location":"v2/docs/ProjectPipelineApi/#return-type_5","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectPipelineApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_5","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectPipelineList/","text":"ProjectPipelineList \u00b6 Properties \u00b6 Name Type Description Notes items [ProjectPipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectPipelineList"},{"location":"v2/docs/ProjectPipelineList/#projectpipelinelist","text":"","title":"ProjectPipelineList"},{"location":"v2/docs/ProjectPipelineList/#properties","text":"Name Type Description Notes items [ProjectPipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectSample/","text":"ProjectSample \u00b6 Properties \u00b6 Name Type Description Notes sample Sample project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectSample"},{"location":"v2/docs/ProjectSample/#projectsample","text":"","title":"ProjectSample"},{"location":"v2/docs/ProjectSample/#properties","text":"Name Type Description Notes sample Sample project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectSampleApi/","text":"libica.openapi.v2.ProjectSampleApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. add_metadata_model_to_sample \u00b6 add_metadata_model_to_sample(project_id, sample_id, metadata_model_id) Add a metadata model to a sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample metadata_model_id = \"metadataModelId_example\" # str | The ID of the metadata model # example passing only required values which don't have defaults set try : # Add a metadata model to a sample. api_instance . add_metadata_model_to_sample ( project_id , sample_id , metadata_model_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->add_metadata_model_to_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample metadata_model_id str The ID of the metadata model Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The metadata model is successfully added to the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] complete_project_sample \u00b6 complete_project_sample(project_id, sample_id) Completes the sample after data has been linked to it. Completes the sample after data has been linked to it. The sample status will be set to 'Available' and a sample completed event will be triggered as well. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Completes the sample after data has been linked to it. api_instance . complete_project_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->complete_project_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The sample is successfully completed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] create_sample_in_project \u00b6 ProjectSample create_sample_in_project(project_id) Create a new sample in this project Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.create_sample import CreateSample from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | create_sample = CreateSample ( name = \"name_example\" , description = \"description_example\" , tags = SampleTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], ), ) # CreateSample | (optional) # example passing only required values which don't have defaults set try : # Create a new sample in this project api_response = api_instance . create_sample_in_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->create_sample_in_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a new sample in this project api_response = api_instance . create_sample_in_project ( project_id , create_sample = create_sample ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->create_sample_in_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str create_sample CreateSample [optional] Return type \u00b6 ProjectSample Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The sample is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] deep_delete_sample \u00b6 deep_delete_sample(project_id, sample_id) Delete a sample together with all of its data. Endpoint deleting a sample together with all of its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample together with all of its data. api_instance . deep_delete_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->deep_delete_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 200 The sample and all of its data are successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_and_unlink_sample \u00b6 delete_and_unlink_sample(project_id, sample_id) Delete a sample and unlink its data. Endpoint for deleting a sample while unlinking its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample and unlink its data. api_instance . delete_and_unlink_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->delete_and_unlink_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 200 The sample is successfully deleted and the its data is successfully unlinked. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] delete_sample_with_input \u00b6 delete_sample_with_input(project_id, sample_id) Delete a sample as well as its input data. Endpoint for deleting a sample as well as its input data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample as well as its input data. api_instance . delete_sample_with_input ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->delete_sample_with_input: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 200 The sample and its input data are successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_sample \u00b6 ProjectSample get_project_sample(project_id, sample_id) Retrieve a project sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve a project sample. api_response = api_instance . get_project_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 ProjectSample Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project sample is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_project_samples \u00b6 ProjectSamplePagedList get_project_samples(project_id) Retrieve project samples. Endpoint for retrieving project samples. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.find_project_samples import FindProjectSamples from libica.openapi.v2.model.project_sample_paged_list import ProjectSamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) find_project_samples = FindProjectSamples ( conditions = [ FindSampleCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , match_mode = \"EXACT\" , values = [ \"values_example\" , ], ), ], date_conditions = [ FindSampleDateCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , before_date = \"before_date_example\" , after_date = \"after_date_example\" , ), ], number_conditions = [ FindSampleNumberCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , lower_bound = \"lower_bound_example\" , upper_bound = \"upper_bound_example\" , ), ], boolean_conditions = [ FindSampleBooleanCondition ( metadata_field = Field ( id = \"id_example\" , name = \"name_example\" , description = \"description_example\" , field_type = \"TEXT\" , required = True , multivalued = True , filled_by_pipeline = True , fields = [ Field (), ], enumeration_values = [ \"enumeration_values_example\" , ], ), field = \"field_example\" , value = \"value_example\" , ), ], full_text_search_string = \"full_text_search_string_example\" , include_deleted = False , user_tags = [ \"user_tags_example\" , ], user_tag_match_mode = \"EXACT\" , run_input_tags = [ \"run_input_tags_example\" , ], run_input_tag_match_mode = \"EXACT\" , connector_tags = [ \"connector_tags_example\" , ], connector_tag_match_mode = \"EXACT\" , tech_tags = [ \"tech_tags_example\" , ], tech_tag_match_mode = \"EXACT\" , ) # FindProjectSamples | (optional) # example passing only required values which don't have defaults set try : # Retrieve project samples. api_response = api_instance . get_project_samples ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve project samples. api_response = api_instance . get_project_samples ( project_id , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort , find_project_samples = find_project_samples ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_samples: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional] find_project_samples FindProjectSamples [optional] Return type \u00b6 ProjectSamplePagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The project samples are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_projects_for_sample \u00b6 ProjectList get_projects_for_sample(project_id, sample_id) Retrieve a list of projects for this sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_list import ProjectList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve a list of projects for this sample. api_response = api_instance . get_projects_for_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_projects_for_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 ProjectList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_sample_data_list \u00b6 DataList get_sample_data_list(project_id, sample_id) Retrieve the list of sample data. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.data_list import DataList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample to retrieve data for full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of sample data. api_response = api_instance . get_sample_data_list ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_data_list: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of sample data. api_response = api_instance . get_sample_data_list ( project_id , sample_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_data_list: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample to retrieve data for full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional] Return type \u00b6 DataList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of sample data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_sample_history \u00b6 SampleHistoryList get_sample_history(project_id, sample_id) Retrieve sample history. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.sample_history_list import SampleHistoryList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve sample history. api_response = api_instance . get_sample_history ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_history: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 SampleHistoryList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The sample history is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_sample_metadata_field \u00b6 Field get_sample_metadata_field(project_id, sample_id, field_id) Retrieve a metadata field. Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.field import Field from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample field_id = \"fieldId_example\" # str | The ID of the field # example passing only required values which don't have defaults set try : # Retrieve a metadata field. api_response = api_instance . get_sample_metadata_field ( project_id , sample_id , field_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_metadata_field: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field Return type \u00b6 Field Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The metadata field is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_sample_metadata_field_count \u00b6 Field get_sample_metadata_field_count(project_id, sample_id, field_id) Retrieves the number of occurrences of a given field. Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.field import Field from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample field_id = \"fieldId_example\" # str | The ID of the field # example passing only required values which don't have defaults set try : # Retrieves the number of occurrences of a given field. api_response = api_instance . get_sample_metadata_field_count ( project_id , sample_id , field_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_metadata_field_count: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field Return type \u00b6 Field Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The number of occurrences is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_data_to_sample \u00b6 link_data_to_sample(project_id, sample_id, data_id) Link data to a sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample data_id = \"dataId_example\" # str | The ID of the data to link # example passing only required values which don't have defaults set try : # Link data to a sample. api_instance . link_data_to_sample ( project_id , sample_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->link_data_to_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to link Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully linked to the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] link_sample_to_project \u00b6 ProjectSample link_sample_to_project(project_id, sample_id) Link a sample to a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Link a sample to a project. api_response = api_instance . link_sample_to_project ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->link_sample_to_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str Return type \u00b6 ProjectSample Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The sample is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] mark_sample_deleted \u00b6 mark_sample_deleted(project_id, sample_id) Mark a sample deleted. Endpoint for marking a sample as deleted.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Mark a sample deleted. api_instance . mark_sample_deleted ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->mark_sample_deleted: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 200 The sample is successfully marked as deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_data_from_sample \u00b6 unlink_data_from_sample(project_id, sample_id, data_id) Unlink data from a sample. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample data_id = \"dataId_example\" # str | The ID of the data to unlink # example passing only required values which don't have defaults set try : # Unlink data from a sample. api_instance . unlink_data_from_sample ( project_id , sample_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->unlink_data_from_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to unlink Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The data is successfully unlinked from the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] unlink_sample_from_project \u00b6 unlink_sample_from_project(project_id, sample_id) Unlink a sample from a project. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a sample from a project. api_instance . unlink_sample_from_project ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->unlink_sample_from_project: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The sample is successfully unlinked from the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_project_sample \u00b6 ProjectSample update_project_sample(project_id, sample_id) Update a project sample. Fields which can be updated: - sample.name - sample.description - sample.status - sample.tags Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project_sample = ProjectSample ( sample = Sample ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , tags = SampleTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], ), region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), status = \"DELETED\" , metadata_valid = True , metadata = [ MetadataField ( id = \"id_example\" , index = 1 , name = \"name_example\" , field_type = \"TEXT\" , values = [ \"values_example\" , ], group_values = [ MetadataField (), ], ), ], ), project_id = \"project_id_example\" , ) # ProjectSample | (optional) # example passing only required values which don't have defaults set try : # Update a project sample. api_response = api_instance . update_project_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_project_sample: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project sample. api_response = api_instance . update_project_sample ( project_id , sample_id , if_match = if_match , project_sample = project_sample ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_project_sample: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_sample ProjectSample [optional] Return type \u00b6 ProjectSample Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The sample is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_sample_metadata_fields \u00b6 Sample update_sample_metadata_fields(project_id, sample_id) Update metadata fields. Endpoint for updating metadata fields.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.update_metadata import UpdateMetadata from libica.openapi.v2.model.sample import Sample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | update_metadata = UpdateMetadata ( update_single_metadata_fields = [ UpdateSingleMetadataField ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , values = [ \"values_example\" , ], ), ], update_metadata_field_groups = [ UpdateMetadataFieldGroup ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , index = 1 , update_single_metadata_fields = [ UpdateSingleMetadataField ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , values = [ \"values_example\" , ], ), ], ), ], ) # UpdateMetadata | (optional) # example passing only required values which don't have defaults set try : # Update metadata fields. api_response = api_instance . update_sample_metadata_fields ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_sample_metadata_fields: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update metadata fields. api_response = api_instance . update_sample_metadata_fields ( project_id , sample_id , update_metadata = update_metadata ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_sample_metadata_fields: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes project_id str sample_id str update_metadata UpdateMetadata [optional] Return type \u00b6 Sample Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The metadata is successfully updated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.ProjectSampleApi"},{"location":"v2/docs/ProjectSampleApi/#libicaopenapiv2projectsampleapi","text":"All URIs are relative to /ica/rest Method HTTP request Description add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields.","title":"libica.openapi.v2.ProjectSampleApi"},{"location":"v2/docs/ProjectSampleApi/#add_metadata_model_to_sample","text":"add_metadata_model_to_sample(project_id, sample_id, metadata_model_id) Add a metadata model to a sample.","title":"add_metadata_model_to_sample"},{"location":"v2/docs/ProjectSampleApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample metadata_model_id = \"metadataModelId_example\" # str | The ID of the metadata model # example passing only required values which don't have defaults set try : # Add a metadata model to a sample. api_instance . add_metadata_model_to_sample ( project_id , sample_id , metadata_model_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->add_metadata_model_to_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample metadata_model_id str The ID of the metadata model","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details","text":"Status code Description Response headers 204 The metadata model is successfully added to the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#complete_project_sample","text":"complete_project_sample(project_id, sample_id) Completes the sample after data has been linked to it. Completes the sample after data has been linked to it. The sample status will be set to 'Available' and a sample completed event will be triggered as well.","title":"complete_project_sample"},{"location":"v2/docs/ProjectSampleApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Completes the sample after data has been linked to it. api_instance . complete_project_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->complete_project_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_1","text":"Name Type Description Notes project_id str sample_id str","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_1","text":"Status code Description Response headers 204 The sample is successfully completed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#create_sample_in_project","text":"ProjectSample create_sample_in_project(project_id) Create a new sample in this project","title":"create_sample_in_project"},{"location":"v2/docs/ProjectSampleApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.create_sample import CreateSample from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | create_sample = CreateSample ( name = \"name_example\" , description = \"description_example\" , tags = SampleTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], ), ) # CreateSample | (optional) # example passing only required values which don't have defaults set try : # Create a new sample in this project api_response = api_instance . create_sample_in_project ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->create_sample_in_project: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Create a new sample in this project api_response = api_instance . create_sample_in_project ( project_id , create_sample = create_sample ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->create_sample_in_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_2","text":"Name Type Description Notes project_id str create_sample CreateSample [optional]","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_2","text":"ProjectSample","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_2","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_2","text":"Status code Description Response headers 201 The sample is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#deep_delete_sample","text":"deep_delete_sample(project_id, sample_id) Delete a sample together with all of its data. Endpoint deleting a sample together with all of its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"deep_delete_sample"},{"location":"v2/docs/ProjectSampleApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample together with all of its data. api_instance . deep_delete_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->deep_delete_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_3","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_3","text":"Status code Description Response headers 200 The sample and all of its data are successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#delete_and_unlink_sample","text":"delete_and_unlink_sample(project_id, sample_id) Delete a sample and unlink its data. Endpoint for deleting a sample while unlinking its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"delete_and_unlink_sample"},{"location":"v2/docs/ProjectSampleApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample and unlink its data. api_instance . delete_and_unlink_sample ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->delete_and_unlink_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_4","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_4","text":"Status code Description Response headers 200 The sample is successfully deleted and the its data is successfully unlinked. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#delete_sample_with_input","text":"delete_sample_with_input(project_id, sample_id) Delete a sample as well as its input data. Endpoint for deleting a sample as well as its input data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"delete_sample_with_input"},{"location":"v2/docs/ProjectSampleApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Delete a sample as well as its input data. api_instance . delete_sample_with_input ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->delete_sample_with_input: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_5","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_5","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_5","text":"Status code Description Response headers 200 The sample and its input data are successfully deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_project_sample","text":"ProjectSample get_project_sample(project_id, sample_id) Retrieve a project sample.","title":"get_project_sample"},{"location":"v2/docs/ProjectSampleApi/#example_6","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve a project sample. api_response = api_instance . get_project_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_6","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_6","text":"ProjectSample","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_6","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_6","text":"Status code Description Response headers 200 The project sample is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_project_samples","text":"ProjectSamplePagedList get_project_samples(project_id) Retrieve project samples. Endpoint for retrieving project samples. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"get_project_samples"},{"location":"v2/docs/ProjectSampleApi/#example_7","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.find_project_samples import FindProjectSamples from libica.openapi.v2.model.project_sample_paged_list import ProjectSamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) find_project_samples = FindProjectSamples ( conditions = [ FindSampleCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , match_mode = \"EXACT\" , values = [ \"values_example\" , ], ), ], date_conditions = [ FindSampleDateCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , before_date = \"before_date_example\" , after_date = \"after_date_example\" , ), ], number_conditions = [ FindSampleNumberCondition ( metadata_field = FieldId ( id = \"id_example\" , ), field = \"field_example\" , lower_bound = \"lower_bound_example\" , upper_bound = \"upper_bound_example\" , ), ], boolean_conditions = [ FindSampleBooleanCondition ( metadata_field = Field ( id = \"id_example\" , name = \"name_example\" , description = \"description_example\" , field_type = \"TEXT\" , required = True , multivalued = True , filled_by_pipeline = True , fields = [ Field (), ], enumeration_values = [ \"enumeration_values_example\" , ], ), field = \"field_example\" , value = \"value_example\" , ), ], full_text_search_string = \"full_text_search_string_example\" , include_deleted = False , user_tags = [ \"user_tags_example\" , ], user_tag_match_mode = \"EXACT\" , run_input_tags = [ \"run_input_tags_example\" , ], run_input_tag_match_mode = \"EXACT\" , connector_tags = [ \"connector_tags_example\" , ], connector_tag_match_mode = \"EXACT\" , tech_tags = [ \"tech_tags_example\" , ], tech_tag_match_mode = \"EXACT\" , ) # FindProjectSamples | (optional) # example passing only required values which don't have defaults set try : # Retrieve project samples. api_response = api_instance . get_project_samples ( project_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve project samples. api_response = api_instance . get_project_samples ( project_id , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort , find_project_samples = find_project_samples ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_project_samples: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_7","text":"Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional] find_project_samples FindProjectSamples [optional]","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_7","text":"ProjectSamplePagedList","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_7","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_7","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_7","text":"Status code Description Response headers 200 The project samples are successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_projects_for_sample","text":"ProjectList get_projects_for_sample(project_id, sample_id) Retrieve a list of projects for this sample.","title":"get_projects_for_sample"},{"location":"v2/docs/ProjectSampleApi/#example_8","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_list import ProjectList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve a list of projects for this sample. api_response = api_instance . get_projects_for_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_projects_for_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_8","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_8","text":"ProjectList","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_8","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_8","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_8","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_sample_data_list","text":"DataList get_sample_data_list(project_id, sample_id) Retrieve the list of sample data.","title":"get_sample_data_list"},{"location":"v2/docs/ProjectSampleApi/#example_9","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.data_list import DataList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample to retrieve data for full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional) id = [ \"id_example\" , ] # [str] | The ids to filter on. This will always match exact. (optional) filename = [ \"filename_example\" , ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional) filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional) file_path = [ \"filePath_example\" , ] # [str] | The paths of the files to filter on. (optional) file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status = [ \"PARTIAL\" , ] # [str] | The statuses to filter on. (optional) format_id = [ \"formatId_example\" , ] # [str] | The IDs of the formats to filter on. (optional) format_code = [ \"formatCode_example\" , ] # [str] | The codes of the formats to filter on. (optional) type = \"FILE\" # str | The type to filter on. (optional) parent_folder_id = [ \"parentFolderId_example\" , ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional) parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional) creation_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) creation_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_after = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) status_date_before = dateutil_parser ( '1970-01-01T00:00:00.00Z' ) # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional) user_tag = [ \"userTag_example\" , ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional) user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional) run_input_tag = [ \"runInputTag_example\" , ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional) run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional) run_output_tag = [ \"runOutputTag_example\" , ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional) run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional) connector_tag = [ \"connectorTag_example\" , ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional) connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional) technical_tag = [ \"technicalTag_example\" , ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional) technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional) not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional) # example passing only required values which don't have defaults set try : # Retrieve the list of sample data. api_response = api_instance . get_sample_data_list ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_data_list: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve the list of sample data. api_response = api_instance . get_sample_data_list ( project_id , sample_id , full_text = full_text , id = id , filename = filename , filename_match_mode = filename_match_mode , file_path = file_path , file_path_match_mode = file_path_match_mode , status = status , format_id = format_id , format_code = format_code , type = type , parent_folder_id = parent_folder_id , parent_folder_path = parent_folder_path , creation_date_after = creation_date_after , creation_date_before = creation_date_before , status_date_after = status_date_after , status_date_before = status_date_before , user_tag = user_tag , user_tag_match_mode = user_tag_match_mode , run_input_tag = run_input_tag , run_input_tag_match_mode = run_input_tag_match_mode , run_output_tag = run_output_tag , run_output_tag_match_mode = run_output_tag_match_mode , connector_tag = connector_tag , connector_tag_match_mode = connector_tag_match_mode , technical_tag = technical_tag , technical_tag_match_mode = technical_tag_match_mode , not_in_run = not_in_run , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_data_list: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_9","text":"Name Type Description Notes project_id str sample_id str The ID of the sample to retrieve data for full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered: - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively). - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_9","text":"DataList","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_9","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_9","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_9","text":"Status code Description Response headers 200 The list of sample data is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_sample_history","text":"SampleHistoryList get_sample_history(project_id, sample_id) Retrieve sample history.","title":"get_sample_history"},{"location":"v2/docs/ProjectSampleApi/#example_10","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.sample_history_list import SampleHistoryList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Retrieve sample history. api_response = api_instance . get_sample_history ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_history: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_10","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_10","text":"SampleHistoryList","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_10","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_10","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_10","text":"Status code Description Response headers 200 The sample history is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field","text":"Field get_sample_metadata_field(project_id, sample_id, field_id) Retrieve a metadata field. Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list","title":"get_sample_metadata_field"},{"location":"v2/docs/ProjectSampleApi/#example_11","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.field import Field from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample field_id = \"fieldId_example\" # str | The ID of the field # example passing only required values which don't have defaults set try : # Retrieve a metadata field. api_response = api_instance . get_sample_metadata_field ( project_id , sample_id , field_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_metadata_field: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_11","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_11","text":"Field","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_11","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_11","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_11","text":"Status code Description Response headers 200 The metadata field is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field_count","text":"Field get_sample_metadata_field_count(project_id, sample_id, field_id) Retrieves the number of occurrences of a given field. Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list","title":"get_sample_metadata_field_count"},{"location":"v2/docs/ProjectSampleApi/#example_12","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.field import Field from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample field_id = \"fieldId_example\" # str | The ID of the field # example passing only required values which don't have defaults set try : # Retrieves the number of occurrences of a given field. api_response = api_instance . get_sample_metadata_field_count ( project_id , sample_id , field_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->get_sample_metadata_field_count: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_12","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_12","text":"Field","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_12","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_12","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_12","text":"Status code Description Response headers 200 The number of occurrences is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#link_data_to_sample","text":"link_data_to_sample(project_id, sample_id, data_id) Link data to a sample.","title":"link_data_to_sample"},{"location":"v2/docs/ProjectSampleApi/#example_13","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample data_id = \"dataId_example\" # str | The ID of the data to link # example passing only required values which don't have defaults set try : # Link data to a sample. api_instance . link_data_to_sample ( project_id , sample_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->link_data_to_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_13","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to link","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_13","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_13","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_13","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_13","text":"Status code Description Response headers 204 The data is successfully linked to the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#link_sample_to_project","text":"ProjectSample link_sample_to_project(project_id, sample_id) Link a sample to a project.","title":"link_sample_to_project"},{"location":"v2/docs/ProjectSampleApi/#example_14","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Link a sample to a project. api_response = api_instance . link_sample_to_project ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->link_sample_to_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_14","text":"Name Type Description Notes project_id str sample_id str","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_14","text":"ProjectSample","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_14","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_14","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_14","text":"Status code Description Response headers 201 The sample is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#mark_sample_deleted","text":"mark_sample_deleted(project_id, sample_id) Mark a sample deleted. Endpoint for marking a sample as deleted.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"mark_sample_deleted"},{"location":"v2/docs/ProjectSampleApi/#example_15","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample # example passing only required values which don't have defaults set try : # Mark a sample deleted. api_instance . mark_sample_deleted ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->mark_sample_deleted: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_15","text":"Name Type Description Notes project_id str sample_id str The ID of the sample","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_15","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_15","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_15","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_15","text":"Status code Description Response headers 200 The sample is successfully marked as deleted. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#unlink_data_from_sample","text":"unlink_data_from_sample(project_id, sample_id, data_id) Unlink data from a sample.","title":"unlink_data_from_sample"},{"location":"v2/docs/ProjectSampleApi/#example_16","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | The ID of the sample data_id = \"dataId_example\" # str | The ID of the data to unlink # example passing only required values which don't have defaults set try : # Unlink data from a sample. api_instance . unlink_data_from_sample ( project_id , sample_id , data_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->unlink_data_from_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_16","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to unlink","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_16","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_16","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_16","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_16","text":"Status code Description Response headers 204 The data is successfully unlinked from the sample. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#unlink_sample_from_project","text":"unlink_sample_from_project(project_id, sample_id) Unlink a sample from a project.","title":"unlink_sample_from_project"},{"location":"v2/docs/ProjectSampleApi/#example_17","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | # example passing only required values which don't have defaults set try : # Unlink a sample from a project. api_instance . unlink_sample_from_project ( project_id , sample_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->unlink_sample_from_project: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_17","text":"Name Type Description Notes project_id str sample_id str","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_17","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_17","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_17","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_17","text":"Status code Description Response headers 204 The sample is successfully unlinked from the project. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#update_project_sample","text":"ProjectSample update_project_sample(project_id, sample_id) Update a project sample. Fields which can be updated: - sample.name - sample.description - sample.status - sample.tags","title":"update_project_sample"},{"location":"v2/docs/ProjectSampleApi/#example_18","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.project_sample import ProjectSample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) project_sample = ProjectSample ( sample = Sample ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , name = \"name_example\" , description = \"description_example\" , tags = SampleTag ( technical_tags = [ \"technical_tags_example\" , ], user_tags = [ \"user_tags_example\" , ], connector_tags = [ \"connector_tags_example\" , ], run_in_tags = [ \"run_in_tags_example\" , ], ), region = Region ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), city_name = \"city_name_example\" , ), status = \"DELETED\" , metadata_valid = True , metadata = [ MetadataField ( id = \"id_example\" , index = 1 , name = \"name_example\" , field_type = \"TEXT\" , values = [ \"values_example\" , ], group_values = [ MetadataField (), ], ), ], ), project_id = \"project_id_example\" , ) # ProjectSample | (optional) # example passing only required values which don't have defaults set try : # Update a project sample. api_response = api_instance . update_project_sample ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_project_sample: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a project sample. api_response = api_instance . update_project_sample ( project_id , sample_id , if_match = if_match , project_sample = project_sample ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_project_sample: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_18","text":"Name Type Description Notes project_id str sample_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_sample ProjectSample [optional]","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_18","text":"ProjectSample","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_18","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_18","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_18","text":"Status code Description Response headers 200 The sample is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSampleApi/#update_sample_metadata_fields","text":"Sample update_sample_metadata_fields(project_id, sample_id) Update metadata fields. Endpoint for updating metadata fields.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"update_sample_metadata_fields"},{"location":"v2/docs/ProjectSampleApi/#example_19","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import project_sample_api from libica.openapi.v2.model.update_metadata import UpdateMetadata from libica.openapi.v2.model.sample import Sample from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = project_sample_api . ProjectSampleApi ( api_client ) project_id = \"projectId_example\" # str | sample_id = \"sampleId_example\" # str | update_metadata = UpdateMetadata ( update_single_metadata_fields = [ UpdateSingleMetadataField ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , values = [ \"values_example\" , ], ), ], update_metadata_field_groups = [ UpdateMetadataFieldGroup ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , index = 1 , update_single_metadata_fields = [ UpdateSingleMetadataField ( field_id = FieldId ( id = \"id_example\" , ), field_name = \"field_name_example\" , values = [ \"values_example\" , ], ), ], ), ], ) # UpdateMetadata | (optional) # example passing only required values which don't have defaults set try : # Update metadata fields. api_response = api_instance . update_sample_metadata_fields ( project_id , sample_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_sample_metadata_fields: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update metadata fields. api_response = api_instance . update_sample_metadata_fields ( project_id , sample_id , update_metadata = update_metadata ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling ProjectSampleApi->update_sample_metadata_fields: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/ProjectSampleApi/#parameters_19","text":"Name Type Description Notes project_id str sample_id str update_metadata UpdateMetadata [optional]","title":"Parameters"},{"location":"v2/docs/ProjectSampleApi/#return-type_19","text":"Sample","title":"Return type"},{"location":"v2/docs/ProjectSampleApi/#authorization_19","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_19","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_19","text":"Status code Description Response headers 200 The metadata is successfully updated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/ProjectSamplePagedList/","text":"ProjectSamplePagedList \u00b6 Properties \u00b6 Name Type Description Notes items [ProjectSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectSamplePagedList"},{"location":"v2/docs/ProjectSamplePagedList/#projectsamplepagedlist","text":"","title":"ProjectSamplePagedList"},{"location":"v2/docs/ProjectSamplePagedList/#properties","text":"Name Type Description Notes items [ProjectSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ProjectTag/","text":"ProjectTag \u00b6 Properties \u00b6 Name Type Description Notes technical_tags [str] user_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ProjectTag"},{"location":"v2/docs/ProjectTag/#projecttag","text":"","title":"ProjectTag"},{"location":"v2/docs/ProjectTag/#properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/RcloneTempCredentials/","text":"RcloneTempCredentials \u00b6 In case of providing the credentialsFormat = rclone, this will contain the credentials for uploading or downloading the data in rclone format. Properties \u00b6 Name Type Description Notes config {str: (str,)} The config in key value format. file_path_prefix str The prefix of the file path. storage_type str The type of the object storage. expiration_time str The timestamp when the credentials expire. upload_session_id str, none_type The folder upload session id which can be used after upload to complete the upload session. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"RcloneTempCredentials"},{"location":"v2/docs/RcloneTempCredentials/#rclonetempcredentials","text":"In case of providing the credentialsFormat = rclone, this will contain the credentials for uploading or downloading the data in rclone format.","title":"RcloneTempCredentials"},{"location":"v2/docs/RcloneTempCredentials/#properties","text":"Name Type Description Notes config {str: (str,)} The config in key value format. file_path_prefix str The prefix of the file path. storage_type str The type of the object storage. expiration_time str The timestamp when the credentials expire. upload_session_id str, none_type The folder upload session id which can be used after upload to complete the upload session. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ReferenceData/","text":"ReferenceData \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set version str The version of the reference set type_list TypeList tenant_name str, none_type [optional] species Species [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ReferenceData"},{"location":"v2/docs/ReferenceData/#referencedata","text":"","title":"ReferenceData"},{"location":"v2/docs/ReferenceData/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set version str The version of the reference set type_list TypeList tenant_name str, none_type [optional] species Species [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ReferenceDataList/","text":"ReferenceDataList \u00b6 Properties \u00b6 Name Type Description Notes items [ReferenceData] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ReferenceDataList"},{"location":"v2/docs/ReferenceDataList/#referencedatalist","text":"","title":"ReferenceDataList"},{"location":"v2/docs/ReferenceDataList/#properties","text":"Name Type Description Notes items [ReferenceData] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ReferenceSet/","text":"ReferenceSet \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set reference_data_list ReferenceDataList tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ReferenceSet"},{"location":"v2/docs/ReferenceSet/#referenceset","text":"","title":"ReferenceSet"},{"location":"v2/docs/ReferenceSet/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set reference_data_list ReferenceDataList tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ReferenceSetList/","text":"ReferenceSetList \u00b6 Properties \u00b6 Name Type Description Notes items [ReferenceSet] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ReferenceSetList"},{"location":"v2/docs/ReferenceSetList/#referencesetlist","text":"","title":"ReferenceSetList"},{"location":"v2/docs/ReferenceSetList/#properties","text":"Name Type Description Notes items [ReferenceSet] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Region/","text":"Region \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str country Country city_name str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Region"},{"location":"v2/docs/Region/#region","text":"","title":"Region"},{"location":"v2/docs/Region/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str country Country city_name str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/RegionApi/","text":"libica.openapi.v2.RegionApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. get_region \u00b6 Region get_region(region_id) Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import region_api from libica.openapi.v2.model.region import Region from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = region_api . RegionApi ( api_client ) region_id = \"regionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. api_response = api_instance . get_region ( region_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling RegionApi->get_region: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes region_id str Return type \u00b6 Region Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The region is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_regions \u00b6 RegionList get_regions() Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import region_api from libica.openapi.v2.model.region_list import RegionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = region_api . RegionApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. api_response = api_instance . get_regions () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling RegionApi->get_regions: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 RegionList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of regions is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.RegionApi"},{"location":"v2/docs/RegionApi/#libicaopenapiv2regionapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.","title":"libica.openapi.v2.RegionApi"},{"location":"v2/docs/RegionApi/#get_region","text":"Region get_region(region_id) Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.","title":"get_region"},{"location":"v2/docs/RegionApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import region_api from libica.openapi.v2.model.region import Region from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = region_api . RegionApi ( api_client ) region_id = \"regionId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. api_response = api_instance . get_region ( region_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling RegionApi->get_region: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/RegionApi/#parameters","text":"Name Type Description Notes region_id str","title":"Parameters"},{"location":"v2/docs/RegionApi/#return-type","text":"Region","title":"Return type"},{"location":"v2/docs/RegionApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/RegionApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/RegionApi/#http-response-details","text":"Status code Description Response headers 200 The region is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/RegionApi/#get_regions","text":"RegionList get_regions() Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.","title":"get_regions"},{"location":"v2/docs/RegionApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import region_api from libica.openapi.v2.model.region_list import RegionList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = region_api . RegionApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. api_response = api_instance . get_regions () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling RegionApi->get_regions: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/RegionApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/RegionApi/#return-type_1","text":"RegionList","title":"Return type"},{"location":"v2/docs/RegionApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/RegionApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/RegionApi/#http-response-details_1","text":"Status code Description Response headers 200 The list of regions is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/RegionList/","text":"RegionList \u00b6 Properties \u00b6 Name Type Description Notes items [Region] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"RegionList"},{"location":"v2/docs/RegionList/#regionlist","text":"","title":"RegionList"},{"location":"v2/docs/RegionList/#properties","text":"Name Type Description Notes items [Region] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Sample/","text":"Sample \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the sample tags SampleTag region Region status str metadata_valid bool Whether the metadata is valid metadata [MetadataField] The metadata of the sample tenant_name str, none_type [optional] description str, none_type The description of the sample [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Sample"},{"location":"v2/docs/Sample/#sample","text":"","title":"Sample"},{"location":"v2/docs/Sample/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the sample tags SampleTag region Region status str metadata_valid bool Whether the metadata is valid metadata [MetadataField] The metadata of the sample tenant_name str, none_type [optional] description str, none_type The description of the sample [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SampleApi/","text":"libica.openapi.v2.SampleApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_samples GET /api/samples Retrieve a list of samples. get_samples \u00b6 SamplePagedList get_samples(region) Retrieve a list of samples. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import sample_api from libica.openapi.v2.model.sample_paged_list import SamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = sample_api . SampleApi ( api_client ) region = \"region_example\" # str | The ID of the region to filter on. This parameter is required. search = \"search_example\" # str | To search through multiple fields of data. (optional) user_tags = \"userTags_example\" # str | The user tags to filter on. (optional) technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of samples. api_response = api_instance . get_samples ( region ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling SampleApi->get_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of samples. api_response = api_instance . get_samples ( region , search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling SampleApi->get_samples: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes region str The ID of the region to filter on. This parameter is required. search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional] Return type \u00b6 SamplePagedList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of samples is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.SampleApi"},{"location":"v2/docs/SampleApi/#libicaopenapiv2sampleapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_samples GET /api/samples Retrieve a list of samples.","title":"libica.openapi.v2.SampleApi"},{"location":"v2/docs/SampleApi/#get_samples","text":"SamplePagedList get_samples(region) Retrieve a list of samples.","title":"get_samples"},{"location":"v2/docs/SampleApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import sample_api from libica.openapi.v2.model.sample_paged_list import SamplePagedList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = sample_api . SampleApi ( api_client ) region = \"region_example\" # str | The ID of the region to filter on. This parameter is required. search = \"search_example\" # str | To search through multiple fields of data. (optional) user_tags = \"userTags_example\" # str | The user tags to filter on. (optional) technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional) page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. (optional) page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. (optional) page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional) sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional) # example passing only required values which don't have defaults set try : # Retrieve a list of samples. api_response = api_instance . get_samples ( region ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling SampleApi->get_samples: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Retrieve a list of samples. api_response = api_instance . get_samples ( region , search = search , user_tags = user_tags , technical_tags = technical_tags , page_offset = page_offset , page_token = page_token , page_size = page_size , sort = sort ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling SampleApi->get_samples: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/SampleApi/#parameters","text":"Name Type Description Notes region str The ID of the region to filter on. This parameter is required. search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]","title":"Parameters"},{"location":"v2/docs/SampleApi/#return-type","text":"SamplePagedList","title":"Return type"},{"location":"v2/docs/SampleApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/SampleApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/SampleApi/#http-response-details","text":"Status code Description Response headers 200 The list of samples is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/SampleHistory/","text":"SampleHistory \u00b6 Properties \u00b6 Name Type Description Notes occurred_at datetime When the change was made source str In which context the change was made text str What was changed user str, none_type The user that made the change [optional] run str, none_type In which execution context the change was made [optional] project str, none_type In which project context the change was made [optional] model int, none_type In which model context the change was made [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SampleHistory"},{"location":"v2/docs/SampleHistory/#samplehistory","text":"","title":"SampleHistory"},{"location":"v2/docs/SampleHistory/#properties","text":"Name Type Description Notes occurred_at datetime When the change was made source str In which context the change was made text str What was changed user str, none_type The user that made the change [optional] run str, none_type In which execution context the change was made [optional] project str, none_type In which project context the change was made [optional] model int, none_type In which model context the change was made [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SampleHistoryList/","text":"SampleHistoryList \u00b6 Properties \u00b6 Name Type Description Notes items [SampleHistory] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SampleHistoryList"},{"location":"v2/docs/SampleHistoryList/#samplehistorylist","text":"","title":"SampleHistoryList"},{"location":"v2/docs/SampleHistoryList/#properties","text":"Name Type Description Notes items [SampleHistory] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SamplePagedList/","text":"SamplePagedList \u00b6 Properties \u00b6 Name Type Description Notes items [Sample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SamplePagedList"},{"location":"v2/docs/SamplePagedList/#samplepagedlist","text":"","title":"SamplePagedList"},{"location":"v2/docs/SamplePagedList/#properties","text":"Name Type Description Notes items [Sample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SampleTag/","text":"SampleTag \u00b6 Properties \u00b6 Name Type Description Notes technical_tags [str] user_tags [str] connector_tags [str] run_in_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SampleTag"},{"location":"v2/docs/SampleTag/#sampletag","text":"","title":"SampleTag"},{"location":"v2/docs/SampleTag/#properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] connector_tags [str] run_in_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/ScheduleDownload/","text":"ScheduleDownload \u00b6 Properties \u00b6 Name Type Description Notes connector_id str [optional] protocol str [optional] if omitted the server will use the default value of \"HTTPS\" local_path str [optional] disable_hashing bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"ScheduleDownload"},{"location":"v2/docs/ScheduleDownload/#scheduledownload","text":"","title":"ScheduleDownload"},{"location":"v2/docs/ScheduleDownload/#properties","text":"Name Type Description Notes connector_id str [optional] protocol str [optional] if omitted the server will use the default value of \"HTTPS\" local_path str [optional] disable_hashing bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/","text":"SearchMatchingActivationCodesForCwlAnalysis \u00b6 Properties \u00b6 Name Type Description Notes project_id str pipeline_id str analysis_input CwlAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/#searchmatchingactivationcodesforcwlanalysis","text":"","title":"SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/#properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input CwlAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/","text":"SearchMatchingActivationCodesForNextflowAnalysis \u00b6 Properties \u00b6 Name Type Description Notes project_id str pipeline_id str analysis_input NextflowAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/#searchmatchingactivationcodesfornextflowanalysis","text":"","title":"SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/#properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input NextflowAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Species/","text":"Species \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the species tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Species"},{"location":"v2/docs/Species/#species","text":"","title":"Species"},{"location":"v2/docs/Species/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the species tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageBundle/","text":"StorageBundle \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str bundle_name str The name of the storage bundle entitlement_name str The name of the parent entitlement region Region tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageBundle"},{"location":"v2/docs/StorageBundle/#storagebundle","text":"","title":"StorageBundle"},{"location":"v2/docs/StorageBundle/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str bundle_name str The name of the storage bundle entitlement_name str The name of the parent entitlement region Region tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageBundleApi/","text":"libica.openapi.v2.StorageBundleApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. get_storage_bundles \u00b6 StorageBundleList get_storage_bundles() Retrieve a list of storage bundles. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_bundle_api from libica.openapi.v2.model.storage_bundle_list import StorageBundleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_bundle_api . StorageBundleApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage bundles. api_response = api_instance . get_storage_bundles () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageBundleApi->get_storage_bundles: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 StorageBundleList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of storage bundles is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.StorageBundleApi"},{"location":"v2/docs/StorageBundleApi/#libicaopenapiv2storagebundleapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles.","title":"libica.openapi.v2.StorageBundleApi"},{"location":"v2/docs/StorageBundleApi/#get_storage_bundles","text":"StorageBundleList get_storage_bundles() Retrieve a list of storage bundles.","title":"get_storage_bundles"},{"location":"v2/docs/StorageBundleApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_bundle_api from libica.openapi.v2.model.storage_bundle_list import StorageBundleList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_bundle_api . StorageBundleApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage bundles. api_response = api_instance . get_storage_bundles () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageBundleApi->get_storage_bundles: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageBundleApi/#parameters","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/StorageBundleApi/#return-type","text":"StorageBundleList","title":"Return type"},{"location":"v2/docs/StorageBundleApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageBundleApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageBundleApi/#http-response-details","text":"Status code Description Response headers 200 The list of storage bundles is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageBundleList/","text":"StorageBundleList \u00b6 Properties \u00b6 Name Type Description Notes items [StorageBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageBundleList"},{"location":"v2/docs/StorageBundleList/#storagebundlelist","text":"","title":"StorageBundleList"},{"location":"v2/docs/StorageBundleList/#properties","text":"Name Type Description Notes items [StorageBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageConfiguration/","text":"StorageConfiguration \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageConfiguration"},{"location":"v2/docs/StorageConfiguration/#storageconfiguration","text":"","title":"StorageConfiguration"},{"location":"v2/docs/StorageConfiguration/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageConfigurationApi/","text":"libica.openapi.v2.StorageConfigurationApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_storage_configuration POST /api/storageConfigurations Create a new storage configuration get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share a storage configuration. create_storage_configuration \u00b6 StorageConfiguration create_storage_configuration() Create a new storage configuration Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration import StorageConfiguration from libica.openapi.v2.model.create_storage_configuration import CreateStorageConfiguration from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) create_storage_configuration = CreateStorageConfiguration ( name = \"wwat4ikwowtta-2mh1lcafqw2zhes0\" , description = \"description_example\" , storage_credential_id = \"storage_credential_id_example\" , type = \"AWS_S3\" , aws_details = AWSDetails ( bucket_name = \"bucket_name_example\" , key_prefix = \"jR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H'qT\\{<?'es#)#iK.YM{Rag2/!KB!k@5oXh.:\" , server_side_encryption_algorithm = \"server_side_encryption_algorithm_example\" , server_side_encryption_key = \"server_side_encryption_key_example\" , ), region_id = \"region_id_example\" , ) # CreateStorageConfiguration | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new storage configuration api_response = api_instance . create_storage_configuration ( create_storage_configuration = create_storage_configuration ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->create_storage_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_storage_configuration CreateStorageConfiguration [optional] Return type \u00b6 StorageConfiguration Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The storage configuration is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_storage_configuration \u00b6 StorageConfiguration get_storage_configuration(storage_configuration_id) Retrieve a storage configuration. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration import StorageConfiguration from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage configuration. api_response = api_instance . get_storage_configuration ( storage_configuration_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve Return type \u00b6 StorageConfiguration Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The storage configuration is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_storage_configuration_details \u00b6 StorageConfigurationDetails get_storage_configuration_details(storage_configuration_id) Retrieve a storage configuration detail. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration_details import StorageConfigurationDetails from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage configuration detail. api_response = api_instance . get_storage_configuration_details ( storage_configuration_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configuration_details: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve Return type \u00b6 StorageConfigurationDetails Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The storage configuration detail is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_storage_configurations \u00b6 StorageConfigurationWithDetailsList get_storage_configurations() Retrieve a list of storage configurations. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration_with_details_list import StorageConfigurationWithDetailsList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage configurations. api_response = api_instance . get_storage_configurations () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configurations: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 StorageConfigurationWithDetailsList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of storage configurations is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] share_storage_configuration \u00b6 share_storage_configuration(storage_configuration_id) Share a storage configuration. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to share # example passing only required values which don't have defaults set try : # Share a storage configuration. api_instance . share_storage_configuration ( storage_configuration_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->share_storage_configuration: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_configuration_id str The ID of the storage configuration to share Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The storage configuration is successfully shared. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.StorageConfigurationApi"},{"location":"v2/docs/StorageConfigurationApi/#libicaopenapiv2storageconfigurationapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_storage_configuration POST /api/storageConfigurations Create a new storage configuration get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share a storage configuration.","title":"libica.openapi.v2.StorageConfigurationApi"},{"location":"v2/docs/StorageConfigurationApi/#create_storage_configuration","text":"StorageConfiguration create_storage_configuration() Create a new storage configuration","title":"create_storage_configuration"},{"location":"v2/docs/StorageConfigurationApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration import StorageConfiguration from libica.openapi.v2.model.create_storage_configuration import CreateStorageConfiguration from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) create_storage_configuration = CreateStorageConfiguration ( name = \"wwat4ikwowtta-2mh1lcafqw2zhes0\" , description = \"description_example\" , storage_credential_id = \"storage_credential_id_example\" , type = \"AWS_S3\" , aws_details = AWSDetails ( bucket_name = \"bucket_name_example\" , key_prefix = \"jR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H'qT\\{<?'es#)#iK.YM{Rag2/!KB!k@5oXh.:\" , server_side_encryption_algorithm = \"server_side_encryption_algorithm_example\" , server_side_encryption_key = \"server_side_encryption_key_example\" , ), region_id = \"region_id_example\" , ) # CreateStorageConfiguration | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new storage configuration api_response = api_instance . create_storage_configuration ( create_storage_configuration = create_storage_configuration ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->create_storage_configuration: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageConfigurationApi/#parameters","text":"Name Type Description Notes create_storage_configuration CreateStorageConfiguration [optional]","title":"Parameters"},{"location":"v2/docs/StorageConfigurationApi/#return-type","text":"StorageConfiguration","title":"Return type"},{"location":"v2/docs/StorageConfigurationApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details","text":"Status code Description Response headers 201 The storage configuration is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration","text":"StorageConfiguration get_storage_configuration(storage_configuration_id) Retrieve a storage configuration.","title":"get_storage_configuration"},{"location":"v2/docs/StorageConfigurationApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration import StorageConfiguration from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage configuration. api_response = api_instance . get_storage_configuration ( storage_configuration_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configuration: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageConfigurationApi/#parameters_1","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve","title":"Parameters"},{"location":"v2/docs/StorageConfigurationApi/#return-type_1","text":"StorageConfiguration","title":"Return type"},{"location":"v2/docs/StorageConfigurationApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_1","text":"Status code Description Response headers 200 The storage configuration is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration_details","text":"StorageConfigurationDetails get_storage_configuration_details(storage_configuration_id) Retrieve a storage configuration detail.","title":"get_storage_configuration_details"},{"location":"v2/docs/StorageConfigurationApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration_details import StorageConfigurationDetails from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage configuration detail. api_response = api_instance . get_storage_configuration_details ( storage_configuration_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configuration_details: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageConfigurationApi/#parameters_2","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve","title":"Parameters"},{"location":"v2/docs/StorageConfigurationApi/#return-type_2","text":"StorageConfigurationDetails","title":"Return type"},{"location":"v2/docs/StorageConfigurationApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_2","text":"Status code Description Response headers 200 The storage configuration detail is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configurations","text":"StorageConfigurationWithDetailsList get_storage_configurations() Retrieve a list of storage configurations.","title":"get_storage_configurations"},{"location":"v2/docs/StorageConfigurationApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.storage_configuration_with_details_list import StorageConfigurationWithDetailsList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage configurations. api_response = api_instance . get_storage_configurations () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->get_storage_configurations: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageConfigurationApi/#parameters_3","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/StorageConfigurationApi/#return-type_3","text":"StorageConfigurationWithDetailsList","title":"Return type"},{"location":"v2/docs/StorageConfigurationApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_3","text":"Status code Description Response headers 200 The list of storage configurations is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageConfigurationApi/#share_storage_configuration","text":"share_storage_configuration(storage_configuration_id) Share a storage configuration.","title":"share_storage_configuration"},{"location":"v2/docs/StorageConfigurationApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_configuration_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_configuration_api . StorageConfigurationApi ( api_client ) storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to share # example passing only required values which don't have defaults set try : # Share a storage configuration. api_instance . share_storage_configuration ( storage_configuration_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageConfigurationApi->share_storage_configuration: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageConfigurationApi/#parameters_4","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to share","title":"Parameters"},{"location":"v2/docs/StorageConfigurationApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/StorageConfigurationApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_4","text":"Status code Description Response headers 204 The storage configuration is successfully shared. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageConfigurationDetails/","text":"StorageConfigurationDetails \u00b6 Contains the specific provider details Properties \u00b6 Name Type Description Notes aws_s3 AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageConfigurationDetails"},{"location":"v2/docs/StorageConfigurationDetails/#storageconfigurationdetails","text":"Contains the specific provider details","title":"StorageConfigurationDetails"},{"location":"v2/docs/StorageConfigurationDetails/#properties","text":"Name Type Description Notes aws_s3 AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageConfigurationWithDetails/","text":"StorageConfigurationWithDetails \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects storage_configuration_details StorageConfigurationDetails type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageConfigurationWithDetails"},{"location":"v2/docs/StorageConfigurationWithDetails/#storageconfigurationwithdetails","text":"","title":"StorageConfigurationWithDetails"},{"location":"v2/docs/StorageConfigurationWithDetails/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects storage_configuration_details StorageConfigurationDetails type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageConfigurationWithDetailsList/","text":"StorageConfigurationWithDetailsList \u00b6 Properties \u00b6 Name Type Description Notes items [StorageConfigurationWithDetails] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageConfigurationWithDetailsList"},{"location":"v2/docs/StorageConfigurationWithDetailsList/#storageconfigurationwithdetailslist","text":"","title":"StorageConfigurationWithDetailsList"},{"location":"v2/docs/StorageConfigurationWithDetailsList/#properties","text":"Name Type Description Notes items [StorageConfigurationWithDetails] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageCredential/","text":"StorageCredential \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str type str defaults to \"AWS_USER\" tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageCredential"},{"location":"v2/docs/StorageCredential/#storagecredential","text":"","title":"StorageCredential"},{"location":"v2/docs/StorageCredential/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str type str defaults to \"AWS_USER\" tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageCredentialList/","text":"StorageCredentialList \u00b6 Properties \u00b6 Name Type Description Notes items [StorageCredential] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"StorageCredentialList"},{"location":"v2/docs/StorageCredentialList/#storagecredentiallist","text":"","title":"StorageCredentialList"},{"location":"v2/docs/StorageCredentialList/#properties","text":"Name Type Description Notes items [StorageCredential] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/StorageCredentialsApi/","text":"libica.openapi.v2.StorageCredentialsApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_storage_credential POST /api/storageCredentials Create a new storage credential get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share a storage credential. update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. create_storage_credential \u00b6 StorageCredential create_storage_credential() Create a new storage credential Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.create_storage_credential import CreateStorageCredential from libica.openapi.v2.model.storage_credential import StorageCredential from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) create_storage_credential = CreateStorageCredential ( name = \"zBAMDTMv2D2ylmgd10Z3UB\" , type = \"AWS_USER\" , aws_credentials = AwsCredentials ( access_key_id = \"+\" , secret_access_key = \"+\" , ), ) # CreateStorageCredential | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new storage credential api_response = api_instance . create_storage_credential ( create_storage_credential = create_storage_credential ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->create_storage_credential: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes create_storage_credential CreateStorageCredential [optional] Return type \u00b6 StorageCredential Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 201 The storage credential is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_storage_credential \u00b6 StorageCredential get_storage_credential(storage_credential_id) Retrieve a storage credential. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.storage_credential import StorageCredential from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage credential. api_response = api_instance . get_storage_credential ( storage_credential_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->get_storage_credential: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_credential_id str The ID of the storage credential to retrieve Return type \u00b6 StorageCredential Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The storage credential is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_storage_credentials \u00b6 StorageCredentialList get_storage_credentials() Retrieve a list of storage credentials. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.storage_credential_list import StorageCredentialList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage credentials. api_response = api_instance . get_storage_credentials () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->get_storage_credentials: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 StorageCredentialList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of storage credentials is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] share_storage_credential \u00b6 share_storage_credential(storage_credential_id) Share a storage credential. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to share # example passing only required values which don't have defaults set try : # Share a storage credential. api_instance . share_storage_credential ( storage_credential_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->share_storage_credential: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_credential_id str The ID of the storage credential to share Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The storage credential is successfully shared. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_storage_credential_secrets \u00b6 update_storage_credential_secrets(storage_credential_id) Update a storage credential's secrets. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.update_storage_credential_secrets import UpdateStorageCredentialSecrets from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | update_storage_credential_secrets = UpdateStorageCredentialSecrets ( aws_credentials = AwsCredentials ( access_key_id = \"+\" , secret_access_key = \"+\" , ), ) # UpdateStorageCredentialSecrets | (optional) # example passing only required values which don't have defaults set try : # Update a storage credential's secrets. api_instance . update_storage_credential_secrets ( storage_credential_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->update_storage_credential_secrets: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a storage credential's secrets. api_instance . update_storage_credential_secrets ( storage_credential_id , update_storage_credential_secrets = update_storage_credential_secrets ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->update_storage_credential_secrets: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes storage_credential_id str update_storage_credential_secrets UpdateStorageCredentialSecrets [optional] Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The storage credential secrets are successfully updated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.StorageCredentialsApi"},{"location":"v2/docs/StorageCredentialsApi/#libicaopenapiv2storagecredentialsapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_storage_credential POST /api/storageCredentials Create a new storage credential get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share a storage credential. update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets.","title":"libica.openapi.v2.StorageCredentialsApi"},{"location":"v2/docs/StorageCredentialsApi/#create_storage_credential","text":"StorageCredential create_storage_credential() Create a new storage credential","title":"create_storage_credential"},{"location":"v2/docs/StorageCredentialsApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.create_storage_credential import CreateStorageCredential from libica.openapi.v2.model.storage_credential import StorageCredential from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) create_storage_credential = CreateStorageCredential ( name = \"zBAMDTMv2D2ylmgd10Z3UB\" , type = \"AWS_USER\" , aws_credentials = AwsCredentials ( access_key_id = \"+\" , secret_access_key = \"+\" , ), ) # CreateStorageCredential | (optional) # example passing only required values which don't have defaults set # and optional values try : # Create a new storage credential api_response = api_instance . create_storage_credential ( create_storage_credential = create_storage_credential ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->create_storage_credential: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageCredentialsApi/#parameters","text":"Name Type Description Notes create_storage_credential CreateStorageCredential [optional]","title":"Parameters"},{"location":"v2/docs/StorageCredentialsApi/#return-type","text":"StorageCredential","title":"Return type"},{"location":"v2/docs/StorageCredentialsApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details","text":"Status code Description Response headers 201 The storage credential is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credential","text":"StorageCredential get_storage_credential(storage_credential_id) Retrieve a storage credential.","title":"get_storage_credential"},{"location":"v2/docs/StorageCredentialsApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.storage_credential import StorageCredential from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to retrieve # example passing only required values which don't have defaults set try : # Retrieve a storage credential. api_response = api_instance . get_storage_credential ( storage_credential_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->get_storage_credential: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageCredentialsApi/#parameters_1","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to retrieve","title":"Parameters"},{"location":"v2/docs/StorageCredentialsApi/#return-type_1","text":"StorageCredential","title":"Return type"},{"location":"v2/docs/StorageCredentialsApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_1","text":"Status code Description Response headers 200 The storage credential is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credentials","text":"StorageCredentialList get_storage_credentials() Retrieve a list of storage credentials.","title":"get_storage_credentials"},{"location":"v2/docs/StorageCredentialsApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.storage_credential_list import StorageCredentialList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of storage credentials. api_response = api_instance . get_storage_credentials () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->get_storage_credentials: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageCredentialsApi/#parameters_2","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/StorageCredentialsApi/#return-type_2","text":"StorageCredentialList","title":"Return type"},{"location":"v2/docs/StorageCredentialsApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_2","text":"Status code Description Response headers 200 The list of storage credentials is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageCredentialsApi/#share_storage_credential","text":"share_storage_credential(storage_credential_id) Share a storage credential.","title":"share_storage_credential"},{"location":"v2/docs/StorageCredentialsApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to share # example passing only required values which don't have defaults set try : # Share a storage credential. api_instance . share_storage_credential ( storage_credential_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->share_storage_credential: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageCredentialsApi/#parameters_3","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to share","title":"Parameters"},{"location":"v2/docs/StorageCredentialsApi/#return-type_3","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/StorageCredentialsApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_3","text":"Status code Description Response headers 204 The storage credential is successfully shared. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/StorageCredentialsApi/#update_storage_credential_secrets","text":"update_storage_credential_secrets(storage_credential_id) Update a storage credential's secrets.","title":"update_storage_credential_secrets"},{"location":"v2/docs/StorageCredentialsApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import storage_credentials_api from libica.openapi.v2.model.update_storage_credential_secrets import UpdateStorageCredentialSecrets from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = storage_credentials_api . StorageCredentialsApi ( api_client ) storage_credential_id = \"storageCredentialId_example\" # str | update_storage_credential_secrets = UpdateStorageCredentialSecrets ( aws_credentials = AwsCredentials ( access_key_id = \"+\" , secret_access_key = \"+\" , ), ) # UpdateStorageCredentialSecrets | (optional) # example passing only required values which don't have defaults set try : # Update a storage credential's secrets. api_instance . update_storage_credential_secrets ( storage_credential_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->update_storage_credential_secrets: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a storage credential's secrets. api_instance . update_storage_credential_secrets ( storage_credential_id , update_storage_credential_secrets = update_storage_credential_secrets ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling StorageCredentialsApi->update_storage_credential_secrets: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/StorageCredentialsApi/#parameters_4","text":"Name Type Description Notes storage_credential_id str update_storage_credential_secrets UpdateStorageCredentialSecrets [optional]","title":"Parameters"},{"location":"v2/docs/StorageCredentialsApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/StorageCredentialsApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_4","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_4","text":"Status code Description Response headers 204 The storage credential secrets are successfully updated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/TempCredentials/","text":"TempCredentials \u00b6 Properties \u00b6 Name Type Description Notes aws_temp_credentials AwsTempCredentials [optional] rclone_temp_credentials RcloneTempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TempCredentials"},{"location":"v2/docs/TempCredentials/#tempcredentials","text":"","title":"TempCredentials"},{"location":"v2/docs/TempCredentials/#properties","text":"Name Type Description Notes aws_temp_credentials AwsTempCredentials [optional] rclone_temp_credentials RcloneTempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Token/","text":"Token \u00b6 Properties \u00b6 Name Type Description Notes token str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Token"},{"location":"v2/docs/Token/#token","text":"","title":"Token"},{"location":"v2/docs/Token/#properties","text":"Name Type Description Notes token str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/TokenApi/","text":"libica.openapi.v2.TokenApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description create_jwt_token POST /api/tokens Generate a JWT using an API-key or Basic Authentication. refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. create_jwt_token \u00b6 Token create_jwt_token() Generate a JWT using an API-key or Basic Authentication. When using Basic Authentication, and you are member of several tenants, also provide the tenant request parameter to indicate for which tenant you want to authenticate. Note that Basic Authentication will not work for SSO (Single Sign On) enabled authentication. Example \u00b6 Api Key Authentication (ApiKeyAuth): Basic Authentication (BasicAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import token_api from libica.openapi.v2.model.token import Token from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure HTTP basic authorization: BasicAuth configuration = libica . openapi . v2 . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = token_api . TokenApi ( api_client ) tenant = \"tenant_example\" # str, none_type | The name of your tenant in case you have access to multiple tenants. (optional) # example passing only required values which don't have defaults set # and optional values try : # Generate a JWT using an API-key or Basic Authentication. api_response = api_instance . create_jwt_token ( tenant = tenant ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling TokenApi->create_jwt_token: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes tenant str, none_type The name of your tenant in case you have access to multiple tenants. [optional] Return type \u00b6 Token Authorization \u00b6 ApiKeyAuth , BasicAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The JWT is successfully generated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] refresh_jwt_token \u00b6 Token refresh_jwt_token() Refresh a JWT using a not yet expired, still valid JWT. When still having a valid JWT, this endpoint can be used to extend the validity. Example \u00b6 Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import token_api from libica.openapi.v2.model.token import Token from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = token_api . TokenApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Refresh a JWT using a not yet expired, still valid JWT. api_response = api_instance . refresh_jwt_token () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling TokenApi->refresh_jwt_token: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 Token Authorization \u00b6 JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The JWT is successfully refreshed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.TokenApi"},{"location":"v2/docs/TokenApi/#libicaopenapiv2tokenapi","text":"All URIs are relative to /ica/rest Method HTTP request Description create_jwt_token POST /api/tokens Generate a JWT using an API-key or Basic Authentication. refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT.","title":"libica.openapi.v2.TokenApi"},{"location":"v2/docs/TokenApi/#create_jwt_token","text":"Token create_jwt_token() Generate a JWT using an API-key or Basic Authentication. When using Basic Authentication, and you are member of several tenants, also provide the tenant request parameter to indicate for which tenant you want to authenticate. Note that Basic Authentication will not work for SSO (Single Sign On) enabled authentication.","title":"create_jwt_token"},{"location":"v2/docs/TokenApi/#example","text":"Api Key Authentication (ApiKeyAuth): Basic Authentication (BasicAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import token_api from libica.openapi.v2.model.token import Token from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure HTTP basic authorization: BasicAuth configuration = libica . openapi . v2 . Configuration ( username = 'YOUR_USERNAME' , password = 'YOUR_PASSWORD' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = token_api . TokenApi ( api_client ) tenant = \"tenant_example\" # str, none_type | The name of your tenant in case you have access to multiple tenants. (optional) # example passing only required values which don't have defaults set # and optional values try : # Generate a JWT using an API-key or Basic Authentication. api_response = api_instance . create_jwt_token ( tenant = tenant ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling TokenApi->create_jwt_token: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/TokenApi/#parameters","text":"Name Type Description Notes tenant str, none_type The name of your tenant in case you have access to multiple tenants. [optional]","title":"Parameters"},{"location":"v2/docs/TokenApi/#return-type","text":"Token","title":"Return type"},{"location":"v2/docs/TokenApi/#authorization","text":"ApiKeyAuth , BasicAuth","title":"Authorization"},{"location":"v2/docs/TokenApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/TokenApi/#http-response-details","text":"Status code Description Response headers 200 The JWT is successfully generated. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/TokenApi/#refresh_jwt_token","text":"Token refresh_jwt_token() Refresh a JWT using a not yet expired, still valid JWT. When still having a valid JWT, this endpoint can be used to extend the validity.","title":"refresh_jwt_token"},{"location":"v2/docs/TokenApi/#example_1","text":"Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import token_api from libica.openapi.v2.model.token import Token from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = token_api . TokenApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Refresh a JWT using a not yet expired, still valid JWT. api_response = api_instance . refresh_jwt_token () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling TokenApi->refresh_jwt_token: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/TokenApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/TokenApi/#return-type_1","text":"Token","title":"Return type"},{"location":"v2/docs/TokenApi/#authorization_1","text":"JwtAuth","title":"Authorization"},{"location":"v2/docs/TokenApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/TokenApi/#http-response-details_1","text":"Status code Description Response headers 200 The JWT is successfully refreshed. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/Type/","text":"Type \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data type tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Type"},{"location":"v2/docs/Type/#type","text":"","title":"Type"},{"location":"v2/docs/Type/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data type tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/TypeList/","text":"TypeList \u00b6 Properties \u00b6 Name Type Description Notes items [Type] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"TypeList"},{"location":"v2/docs/TypeList/#typelist","text":"","title":"TypeList"},{"location":"v2/docs/TypeList/#properties","text":"Name Type Description Notes items [Type] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UpdateMetadata/","text":"UpdateMetadata \u00b6 Properties \u00b6 Name Type Description Notes update_single_metadata_fields [UpdateSingleMetadataField], none_type List of metadata fields to be updated [optional] update_metadata_field_groups [UpdateMetadataFieldGroup], none_type List of metadata field groups to be updated [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateMetadata"},{"location":"v2/docs/UpdateMetadata/#updatemetadata","text":"","title":"UpdateMetadata"},{"location":"v2/docs/UpdateMetadata/#properties","text":"Name Type Description Notes update_single_metadata_fields [UpdateSingleMetadataField], none_type List of metadata fields to be updated [optional] update_metadata_field_groups [UpdateMetadataFieldGroup], none_type List of metadata field groups to be updated [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UpdateMetadataFieldGroup/","text":"UpdateMetadataFieldGroup \u00b6 List of metadata field groups to be updated Properties \u00b6 Name Type Description Notes index int Which metadata row index to update update_single_metadata_fields [UpdateSingleMetadataField] List of metadata fields to be updated field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateMetadataFieldGroup"},{"location":"v2/docs/UpdateMetadataFieldGroup/#updatemetadatafieldgroup","text":"List of metadata field groups to be updated","title":"UpdateMetadataFieldGroup"},{"location":"v2/docs/UpdateMetadataFieldGroup/#properties","text":"Name Type Description Notes index int Which metadata row index to update update_single_metadata_fields [UpdateSingleMetadataField] List of metadata fields to be updated field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UpdateSingleMetadataField/","text":"UpdateSingleMetadataField \u00b6 List of metadata fields to be updated Properties \u00b6 Name Type Description Notes field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] values [str] The updated value(s) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateSingleMetadataField"},{"location":"v2/docs/UpdateSingleMetadataField/#updatesinglemetadatafield","text":"List of metadata fields to be updated","title":"UpdateSingleMetadataField"},{"location":"v2/docs/UpdateSingleMetadataField/#properties","text":"Name Type Description Notes field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] values [str] The updated value(s) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UpdateStorageCredentialSecrets/","text":"UpdateStorageCredentialSecrets \u00b6 Properties \u00b6 Name Type Description Notes aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UpdateStorageCredentialSecrets"},{"location":"v2/docs/UpdateStorageCredentialSecrets/#updatestoragecredentialsecrets","text":"","title":"UpdateStorageCredentialSecrets"},{"location":"v2/docs/UpdateStorageCredentialSecrets/#properties","text":"Name Type Description Notes aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Upload/","text":"Upload \u00b6 Properties \u00b6 Name Type Description Notes url str A pre-signed url which is temporarily available for uploading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Upload"},{"location":"v2/docs/Upload/#upload","text":"","title":"Upload"},{"location":"v2/docs/Upload/#properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for uploading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UploadRule/","text":"UploadRule \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project Project tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UploadRule"},{"location":"v2/docs/UploadRule/#uploadrule","text":"","title":"UploadRule"},{"location":"v2/docs/UploadRule/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project Project tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UploadRuleList/","text":"UploadRuleList \u00b6 Properties \u00b6 Name Type Description Notes items [UploadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UploadRuleList"},{"location":"v2/docs/UploadRuleList/#uploadrulelist","text":"","title":"UploadRuleList"},{"location":"v2/docs/UploadRuleList/#properties","text":"Name Type Description Notes items [UploadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/User/","text":"User \u00b6 Properties \u00b6 Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str username str email str active bool tenant_administrator bool email_verified bool two_factor_authentication bool tenant_name str, none_type [optional] firstname str, none_type [optional] lastname str, none_type [optional] job_title str, none_type [optional] greeting str, none_type [optional] mobile_phone_number str, none_type [optional] phone_number str, none_type [optional] fax_number str, none_type [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"User"},{"location":"v2/docs/User/#user","text":"","title":"User"},{"location":"v2/docs/User/#properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str username str email str active bool tenant_administrator bool email_verified bool two_factor_authentication bool tenant_name str, none_type [optional] firstname str, none_type [optional] lastname str, none_type [optional] job_title str, none_type [optional] greeting str, none_type [optional] mobile_phone_number str, none_type [optional] phone_number str, none_type [optional] fax_number str, none_type [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/UserApi/","text":"libica.openapi.v2.UserApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description approve_user POST /api/users/{userId}:approve Approve a user. assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. get_user GET /api/users/{userId} Retrieve a user. get_users GET /api/users Retrieve a list of users. revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. update_user PUT /api/users/{userId} Update a user. approve_user \u00b6 approve_user(user_id) Approve a user. Endpoint for approving a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Approve a user. api_instance . approve_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->approve_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The user is successfully approved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] assign_tenant_admin_rights_to_user \u00b6 assign_tenant_admin_rights_to_user(user_id) Assign tenant administrator rights to a user. Endpoint for assigning tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Assign tenant administrator rights to a user. api_instance . assign_tenant_admin_rights_to_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->assign_tenant_admin_rights_to_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The tenant administrator rights are successfully assigned. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_user \u00b6 User get_user(user_id) Retrieve a user. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user import User from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a user. api_response = api_instance . get_user ( user_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->get_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_id str Return type \u00b6 User Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The user is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_users \u00b6 UserList get_users() Retrieve a list of users. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user_list import UserList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of users. api_response = api_instance . get_users () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->get_users: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 UserList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of users is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] revoke_tenant_admin_rights_to_user \u00b6 revoke_tenant_admin_rights_to_user(user_id) Revoke tenant administrator rights to a user. Endpoint for revoking tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Revoke tenant administrator rights to a user. api_instance . revoke_tenant_admin_rights_to_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->revoke_tenant_admin_rights_to_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_id str Return type \u00b6 void (empty response body) Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json HTTP response details \u00b6 Status code Description Response headers 204 The tenant administrator rights are successfully revoked. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] update_user \u00b6 User update_user(user_id) Update a user. Fields which can be updated: - greeting - two factor authentication - job title - first name - last name - mobile phone number - phone number - fax number - address lines - postal code - city - country - state Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user import User from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) user = User ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , username = \"username_example\" , email = \"email_example\" , firstname = \"firstname_example\" , lastname = \"lastname_example\" , active = True , tenant_administrator = True , job_title = \"job_title_example\" , greeting = \"MR\" , mobile_phone_number = \"mobile_phone_number_example\" , phone_number = \"phone_number_example\" , fax_number = \"fax_number_example\" , email_verified = True , two_factor_authentication = True , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , ) # User | (optional) # example passing only required values which don't have defaults set try : # Update a user. api_response = api_instance . update_user ( user_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->update_user: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a user. api_response = api_instance . update_user ( user_id , if_match = if_match , user = user ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->update_user: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes user_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] user User [optional] Return type \u00b6 User Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The user is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.UserApi"},{"location":"v2/docs/UserApi/#libicaopenapiv2userapi","text":"All URIs are relative to /ica/rest Method HTTP request Description approve_user POST /api/users/{userId}:approve Approve a user. assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. get_user GET /api/users/{userId} Retrieve a user. get_users GET /api/users Retrieve a list of users. revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. update_user PUT /api/users/{userId} Update a user.","title":"libica.openapi.v2.UserApi"},{"location":"v2/docs/UserApi/#approve_user","text":"approve_user(user_id) Approve a user. Endpoint for approving a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"approve_user"},{"location":"v2/docs/UserApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Approve a user. api_instance . approve_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->approve_user: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters","text":"Name Type Description Notes user_id str","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/UserApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details","text":"Status code Description Response headers 204 The user is successfully approved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserApi/#assign_tenant_admin_rights_to_user","text":"assign_tenant_admin_rights_to_user(user_id) Assign tenant administrator rights to a user. Endpoint for assigning tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"assign_tenant_admin_rights_to_user"},{"location":"v2/docs/UserApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Assign tenant administrator rights to a user. api_instance . assign_tenant_admin_rights_to_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->assign_tenant_admin_rights_to_user: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters_1","text":"Name Type Description Notes user_id str","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type_1","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/UserApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details_1","text":"Status code Description Response headers 204 The tenant administrator rights are successfully assigned. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserApi/#get_user","text":"User get_user(user_id) Retrieve a user.","title":"get_user"},{"location":"v2/docs/UserApi/#example_2","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user import User from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Retrieve a user. api_response = api_instance . get_user ( user_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->get_user: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters_2","text":"Name Type Description Notes user_id str","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type_2","text":"User","title":"Return type"},{"location":"v2/docs/UserApi/#authorization_2","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers_2","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details_2","text":"Status code Description Response headers 200 The user is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserApi/#get_users","text":"UserList get_users() Retrieve a list of users.","title":"get_users"},{"location":"v2/docs/UserApi/#example_3","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user_list import UserList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of users. api_response = api_instance . get_users () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->get_users: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters_3","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type_3","text":"UserList","title":"Return type"},{"location":"v2/docs/UserApi/#authorization_3","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details_3","text":"Status code Description Response headers 200 The list of users is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserApi/#revoke_tenant_admin_rights_to_user","text":"revoke_tenant_admin_rights_to_user(user_id) Revoke tenant administrator rights to a user. Endpoint for revoking tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.","title":"revoke_tenant_admin_rights_to_user"},{"location":"v2/docs/UserApi/#example_4","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | # example passing only required values which don't have defaults set try : # Revoke tenant administrator rights to a user. api_instance . revoke_tenant_admin_rights_to_user ( user_id ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->revoke_tenant_admin_rights_to_user: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters_4","text":"Name Type Description Notes user_id str","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type_4","text":"void (empty response body)","title":"Return type"},{"location":"v2/docs/UserApi/#authorization_4","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/problem+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details_4","text":"Status code Description Response headers 204 The tenant administrator rights are successfully revoked. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserApi/#update_user","text":"User update_user(user_id) Update a user. Fields which can be updated: - greeting - two factor authentication - job title - first name - last name - mobile phone number - phone number - fax number - address lines - postal code - city - country - state","title":"update_user"},{"location":"v2/docs/UserApi/#example_5","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import user_api from libica.openapi.v2.model.user import User from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = user_api . UserApi ( api_client ) user_id = \"userId_example\" # str | if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional) user = User ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , username = \"username_example\" , email = \"email_example\" , firstname = \"firstname_example\" , lastname = \"lastname_example\" , active = True , tenant_administrator = True , job_title = \"job_title_example\" , greeting = \"MR\" , mobile_phone_number = \"mobile_phone_number_example\" , phone_number = \"phone_number_example\" , fax_number = \"fax_number_example\" , email_verified = True , two_factor_authentication = True , country = Country ( id = \"id_example\" , time_created = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), time_modified = dateutil_parser ( '1970-01-01T00:00:00.00Z' ), owner_id = \"owner_id_example\" , tenant_id = \"tenant_id_example\" , tenant_name = \"tenant_name_example\" , code = \"code_example\" , name = \"name_example\" , region = \"region_example\" , ), address_line1 = \"address_line1_example\" , address_line2 = \"address_line2_example\" , address_line3 = \"address_line3_example\" , postal_code = \"postal_code_example\" , city = \"city_example\" , state = \"state_example\" , ) # User | (optional) # example passing only required values which don't have defaults set try : # Update a user. api_response = api_instance . update_user ( user_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->update_user: %s \\n \" % e ) # example passing only required values which don't have defaults set # and optional values try : # Update a user. api_response = api_instance . update_user ( user_id , if_match = if_match , user = user ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling UserApi->update_user: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/UserApi/#parameters_5","text":"Name Type Description Notes user_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] user User [optional]","title":"Parameters"},{"location":"v2/docs/UserApi/#return-type_5","text":"User","title":"Return type"},{"location":"v2/docs/UserApi/#authorization_5","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/UserApi/#http-request-headers_5","text":"Content-Type : application/vnd.illumina.v3+json Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/UserApi/#http-response-details_5","text":"Status code Description Response headers 200 The user is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response). 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/UserList/","text":"UserList \u00b6 Properties \u00b6 Name Type Description Notes items [User] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"UserList"},{"location":"v2/docs/UserList/#userlist","text":"","title":"UserList"},{"location":"v2/docs/UserList/#properties","text":"Name Type Description Notes items [User] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/Workgroup/","text":"Workgroup \u00b6 Properties \u00b6 Name Type Description Notes id str name str description str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Workgroup"},{"location":"v2/docs/Workgroup/#workgroup","text":"","title":"Workgroup"},{"location":"v2/docs/Workgroup/#properties","text":"Name Type Description Notes id str name str description str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"v2/docs/WorkgroupApi/","text":"libica.openapi.v2.WorkgroupApi \u00b6 All URIs are relative to /ica/rest Method HTTP request Description get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. get_workgroups GET /api/workgroups Retrieve a list of workgroups. get_workgroup \u00b6 Workgroup get_workgroup(workgroup_id) Retrieve a workgroup. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import workgroup_api from libica.openapi.v2.model.workgroup import Workgroup from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = workgroup_api . WorkgroupApi ( api_client ) workgroup_id = \"workgroupId_example\" # str | The ID of the workgroup to retrieve # example passing only required values which don't have defaults set try : # Retrieve a workgroup. api_response = api_instance . get_workgroup ( workgroup_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling WorkgroupApi->get_workgroup: %s \\n \" % e ) Parameters \u00b6 Name Type Description Notes workgroup_id str The ID of the workgroup to retrieve Return type \u00b6 Workgroup Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The workgroup is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README] get_workgroups \u00b6 WorkgroupList get_workgroups() Retrieve a list of workgroups. Example \u00b6 Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import workgroup_api from libica.openapi.v2.model.workgroup_list import WorkgroupList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = workgroup_api . WorkgroupApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of workgroups. api_response = api_instance . get_workgroups () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling WorkgroupApi->get_workgroups: %s \\n \" % e ) Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 WorkgroupList Authorization \u00b6 ApiKeyAuth , JwtAuth HTTP request headers \u00b6 Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json HTTP response details \u00b6 Status code Description Response headers 200 The list of workgroups is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"libica.openapi.v2.WorkgroupApi"},{"location":"v2/docs/WorkgroupApi/#libicaopenapiv2workgroupapi","text":"All URIs are relative to /ica/rest Method HTTP request Description get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. get_workgroups GET /api/workgroups Retrieve a list of workgroups.","title":"libica.openapi.v2.WorkgroupApi"},{"location":"v2/docs/WorkgroupApi/#get_workgroup","text":"Workgroup get_workgroup(workgroup_id) Retrieve a workgroup.","title":"get_workgroup"},{"location":"v2/docs/WorkgroupApi/#example","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import workgroup_api from libica.openapi.v2.model.workgroup import Workgroup from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = workgroup_api . WorkgroupApi ( api_client ) workgroup_id = \"workgroupId_example\" # str | The ID of the workgroup to retrieve # example passing only required values which don't have defaults set try : # Retrieve a workgroup. api_response = api_instance . get_workgroup ( workgroup_id ) pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling WorkgroupApi->get_workgroup: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/WorkgroupApi/#parameters","text":"Name Type Description Notes workgroup_id str The ID of the workgroup to retrieve","title":"Parameters"},{"location":"v2/docs/WorkgroupApi/#return-type","text":"Workgroup","title":"Return type"},{"location":"v2/docs/WorkgroupApi/#authorization","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/WorkgroupApi/#http-request-headers","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/WorkgroupApi/#http-response-details","text":"Status code Description Response headers 200 The workgroup is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/WorkgroupApi/#get_workgroups","text":"WorkgroupList get_workgroups() Retrieve a list of workgroups.","title":"get_workgroups"},{"location":"v2/docs/WorkgroupApi/#example_1","text":"Api Key Authentication (ApiKeyAuth): Bearer (JWT) Authentication (JwtAuth): import time import libica.openapi.v2 from libica.openapi.v2.api import workgroup_api from libica.openapi.v2.model.workgroup_list import WorkgroupList from libica.openapi.v2.model.problem import Problem from pprint import pprint # Defining the host is optional and defaults to /ica/rest # See configuration.py for a list of all supported configuration parameters. configuration = libica . openapi . v2 . Configuration ( host = \"/ica/rest\" ) # The client must configure the authentication and authorization parameters # in accordance with the API server security policy. # Examples for each auth method are provided below, use the example that # satisfies your auth use case. # Configure API key authorization: ApiKeyAuth configuration . api_key [ 'ApiKeyAuth' ] = 'YOUR_API_KEY' # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed # configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer' # Configure Bearer authorization (JWT): JwtAuth configuration = libica . openapi . v2 . Configuration ( access_token = 'YOUR_BEARER_TOKEN' ) # Enter a context with an instance of the API client with libica . openapi . v2 . ApiClient ( configuration ) as api_client : # Create an instance of the API class api_instance = workgroup_api . WorkgroupApi ( api_client ) # example, this endpoint has no required or optional parameters try : # Retrieve a list of workgroups. api_response = api_instance . get_workgroups () pprint ( api_response ) except libica . openapi . v2 . ApiException as e : print ( \"Exception when calling WorkgroupApi->get_workgroups: %s \\n \" % e )","title":"Example"},{"location":"v2/docs/WorkgroupApi/#parameters_1","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"v2/docs/WorkgroupApi/#return-type_1","text":"WorkgroupList","title":"Return type"},{"location":"v2/docs/WorkgroupApi/#authorization_1","text":"ApiKeyAuth , JwtAuth","title":"Authorization"},{"location":"v2/docs/WorkgroupApi/#http-request-headers_1","text":"Content-Type : Not defined Accept : application/problem+json, application/vnd.illumina.v3+json","title":"HTTP request headers"},{"location":"v2/docs/WorkgroupApi/#http-response-details_1","text":"Status code Description Response headers 200 The list of workgroups is successfully retrieved. - 0 A problem occurred. - [Back to top] [Back to API list] [Back to Model list] [Back to README]","title":"HTTP response details"},{"location":"v2/docs/WorkgroupList/","text":"WorkgroupList \u00b6 Properties \u00b6 Name Type Description Notes items [Workgroup] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"WorkgroupList"},{"location":"v2/docs/WorkgroupList/#workgrouplist","text":"","title":"WorkgroupList"},{"location":"v2/docs/WorkgroupList/#properties","text":"Name Type Description Notes items [Workgroup] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] [Back to Model list] [Back to API list] [Back to README]","title":"Properties"}]}