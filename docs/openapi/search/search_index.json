{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to libica.openapi documentation","text":"<p>Python SDK for Illumina Connected Analytics (ICA) -- https://umccr-illumina.github.io/libica/</p> <ul> <li>Tested for Python 3.7, 3.8, 3.9, 3.10, 3.11</li> <li>Test Coverage</li> <li>PyDoc</li> <li>Wiki</li> </ul>"},{"location":"#sdk-for-ica-v1","title":"SDK for ICA v1","text":"<ul> <li>libwes</li> <li>libtes</li> <li>libgds</li> <li>libens</li> <li>libconsole</li> </ul>"},{"location":"#sdk-for-ica-v2","title":"SDK for ICA v2","text":"<ul> <li>v2</li> </ul>"},{"location":"#app-package","title":"App Package","text":"<ul> <li>app</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License and DISCLAIMER</p> <p></p>"},{"location":"app/","title":"libica.app","text":""},{"location":"app/#using-app-package","title":"Using App Package","text":"<p>NOTE: <code>libica.app</code> package contains reusable modules that are based on use cases around UMCCR Data Portal backend, Workflows automation and orchestration implementations. Hence, it may be a specific domain logic implementation. However, it may still be reusable for your use cases. Starter examples are as follows.</p>"},{"location":"app/#app-for-ica-v2","title":"App for ICA v2","text":"<p>See pilotapp.py</p> <p>Example: <code>ProjectDataOps</code> app to list project files, download a file, etc...</p> <pre><code>from contextlib import closing\n\nfrom libica.app import AppHelper\nfrom libica.app.dataops import ProjectDataOps\nfrom libica.openapi.v2 import ApiClient\nfrom libica.openapi.v2.model.project_data import ProjectData\n\n# --- Use AppHelper to build SDK API client\n\napp_helper = AppHelper(debug=False)\nproject_id = app_helper.get_icav2_cli_session_project_id()\n\ncli_session_api_client: ApiClient = app_helper \\\n    .build_icav2_configuration_with_cli_session() \\\n    .get_icav2_api_client()\n\n# --- Construct ProjectDataOps from dataops module\n\nproject_dataops = ProjectDataOps(project_id=project_id, api_client=cli_session_api_client)\n\n# --- List all files under given project's folder\n\n# If you do not cd into the folder, it will list all files under the project\nproject_dataops.cd(\"/test_folder/\")\n\nfor item in project_dataops.list_files():\n    project_data: ProjectData = item\n    print((\n        project_data.data.id,  # fil.&lt;ID&gt; (or) fol.&lt;ID&gt;\n        project_data.data.details.path,\n        project_data.data.details.data_type,\n        project_data.data.details.name,\n        project_data.data.details.status,\n        project_data.data.details.file_size_in_bytes,\n        project_data.data.details.time_created,\n    ))\n\n# --- Download csv file from given project and file path\n\nfile_path = \"/test_folder/SampleSheet.csv\"\nprint(f\"Downloading {file_path} from project_id {project_id}\")\nproject_dataops.cd(file_path=file_path)\nntf = project_dataops.download_file()\nwith closing(ntf) as cf:\n    with open(cf.name, 'r') as f:\n        for line in f.readlines():\n            print(line)\n</code></pre> <p>For more, see PyDoc:  - https://umccr-illumina.github.io/libica/libica/app/dataops.html</p>"},{"location":"app/#app-for-ica-v1","title":"App for ICA v1","text":"<p>Example: Configuration Object Builder</p> <pre><code>from libica.app import configuration\nfrom libica.openapi import libgds\n\ngds_config = configuration(\n  lib=libgds,  # pass in library of interest e.g. libwes, libtes, etc \n  secret_name=[\"FROM_AWS_SECRET_MANAGER_THAT_STORE_ICA_ACCESS_TOKEN\"],\n  base_url=\"https://use1.platform.illumina.com\",  # overwrite if not https://aps2.platform.illumina.com\n  debug=False,  # True if you like to debug API calls, False by default anyway, just for demo\n)\n\nwith libgds.ApiClient(gds_config) as api_client:\n    ...\n</code></pre> <p>Example: Listing Files from GDS</p> <pre><code>from typing import List\n\nfrom libica.app import gds\nfrom libica.openapi import libgds\n\nvol, path = gds.parse_path(\"gds://development/some/folder/path/\")\nfiles: List[libgds.FileResponse] = gds.get_file_list(volume_name=vol, path=path)\n\nfor file in files:\n  print(f\"{file.name}, {file.volume_name}, {file.path}, {file.presigned_url}\")\n</code></pre>"},{"location":"libconsole/","title":"libica.openapi.libconsole","text":"<p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p> <p>The <code>libica.openapi.libconsole</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: v1</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T20:39:02.381448+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"libconsole/#requirements","title":"Requirements.","text":"<p>Python 2.7 and 3.4+</p>"},{"location":"libconsole/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.15</li> <li>six &gt;= 1.10</li> <li>certifi</li> <li>python-dateutil</li> </ul>"},{"location":"libconsole/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.libconsole, you can run the following:</p> <pre><code>from __future__ import print_function\n\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.AccountsApi(api_client)\n    account_id = 'account_id_example' # str | \n\n    try:\n        # Get requested account id info require authorization Bearer token\n        api_response = api_instance.get_account(account_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling AccountsApi-&gt;get_account: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Class Method HTTP request Description AccountsApi get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token HealthApi service_health GET /v1/health Returns the health status for all services. ProjectsApi list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token. RegionsApi list_regions GET /v1/regions Get a list of available regions TokensApi create_token POST /v1/tokens Creates a JWT token to call IAP services. TokensApi get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token TokensApi refresh_token POST /v1/tokens:refresh Refresh session psToken. TokensApi revoke_token DELETE /v1/tokens Revokes an access token. UsagesApi get_usage GET /v1/usages Get current tenant's usage detail by period.  Default returns current period usage data. UsagesApi get_usage_details GET /v1/usages/details Get current tenant's usage detail by period.  Default returns current period usage data. UsagesApi get_usage_periods GET /v1/usages/periods Get periods detail info WorkgroupsApi list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token"},{"location":"libconsole/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AccessTokenRequest</li> <li>AccountResponse</li> <li>Domain</li> <li>ErrorResponse</li> <li>HealthCheckStatuses</li> <li>PeriodUsageSummary</li> <li>ProductUsage</li> <li>Project</li> <li>ProjectPagedItems</li> <li>Region</li> <li>ServiceHealthResponse</li> <li>SystemHealthResponse</li> <li>TokenDetailResponse</li> <li>TokenResponse</li> <li>UsageResponse</li> <li>User</li> <li>UserAggregatedUsage</li> <li>Workgroup</li> <li>WorkgroupResponse</li> </ul>"},{"location":"libconsole/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"libconsole/#basic","title":"Basic","text":"<ul> <li>Type: HTTP basic authentication</li> </ul>"},{"location":"libconsole/#bearer","title":"Bearer","text":"<ul> <li>Type: API key</li> <li>API key parameter name: Authorization</li> <li>Location: HTTP header</li> </ul>"},{"location":"libconsole/#author","title":"Author","text":""},{"location":"libconsole/docs/AccessTokenRequest/","title":"AccessTokenRequest","text":"<p>Access token passed into an api request</p>"},{"location":"libconsole/docs/AccessTokenRequest/#properties","title":"Properties","text":"Name Type Description Notes access_token str This is either a psToken or a JWT token depending on the context of the call. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/AccountResponse/","title":"AccountResponse","text":""},{"location":"libconsole/docs/AccountResponse/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str [optional] name str [optional] domain Domain [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/AccountsApi/","title":"libica.openapi.libconsole.AccountsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description get_account GET /v1/accounts/{accountId} Get requested account id info require authorization Bearer token"},{"location":"libconsole/docs/AccountsApi/#get_account","title":"get_account","text":"<p>AccountResponse get_account(account_id)</p> <p>Get requested account id info require authorization Bearer token</p> <p>Get requested account id info</p>"},{"location":"libconsole/docs/AccountsApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.AccountsApi(api_client)\n    account_id = 'account_id_example' # str | \n\n    try:\n        # Get requested account id info require authorization Bearer token\n        api_response = api_instance.get_account(account_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling AccountsApi-&gt;get_account: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.AccountsApi(api_client)\n    account_id = 'account_id_example' # str | \n\n    try:\n        # Get requested account id info require authorization Bearer token\n        api_response = api_instance.get_account(account_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling AccountsApi-&gt;get_account: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/AccountsApi/#parameters","title":"Parameters","text":"Name Type Description Notes account_id str"},{"location":"libconsole/docs/AccountsApi/#return-type","title":"Return type","text":"<p>AccountResponse</p>"},{"location":"libconsole/docs/AccountsApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/AccountsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/AccountsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The account information returned successfully - 401 The provided token is unauthorized. - 403 You do not have permission to access this resource. - 404 The resource was not found at the given path. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/Domain/","title":"Domain","text":""},{"location":"libconsole/docs/Domain/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] name str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/ErrorResponse/","title":"ErrorResponse","text":""},{"location":"libconsole/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/HealthApi/","title":"libica.openapi.libconsole.HealthApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description service_health GET /v1/health Returns the health status for all services."},{"location":"libconsole/docs/HealthApi/#service_health","title":"service_health","text":"<p>SystemHealthResponse service_health()</p> <p>Returns the health status for all services.</p> <p>Returns the health status for all services.</p>"},{"location":"libconsole/docs/HealthApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.HealthApi(api_client)\n\n    try:\n        # Returns the health status for all services.\n        api_response = api_instance.service_health()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling HealthApi-&gt;service_health: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.HealthApi(api_client)\n\n    try:\n        # Returns the health status for all services.\n        api_response = api_instance.service_health()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling HealthApi-&gt;service_health: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/HealthApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"libconsole/docs/HealthApi/#return-type","title":"Return type","text":"<p>SystemHealthResponse</p>"},{"location":"libconsole/docs/HealthApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/HealthApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/HealthApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Health check succeeded - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/HealthCheckStatuses/","title":"HealthCheckStatuses","text":"<p>Health status</p>"},{"location":"libconsole/docs/HealthCheckStatuses/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/PeriodUsageSummary/","title":"PeriodUsageSummary","text":""},{"location":"libconsole/docs/PeriodUsageSummary/#properties","title":"Properties","text":"Name Type Description Notes start datetime [optional] end datetime [optional] i_credit int [optional] total_usages list[ProductUsage] [optional] user_aggregated_usages list[UserAggregatedUsage] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/ProductUsage/","title":"ProductUsage","text":""},{"location":"libconsole/docs/ProductUsage/#properties","title":"Properties","text":"Name Type Description Notes type str amount float unit str i_credit float [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/Project/","title":"Project","text":""},{"location":"libconsole/docs/Project/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] urn str [optional] name str [optional] owner str [optional] time_created datetime [optional] time_modified datetime [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/ProjectPagedItems/","title":"ProjectPagedItems","text":"<p>Paged list response</p>"},{"location":"libconsole/docs/ProjectPagedItems/#properties","title":"Properties","text":"Name Type Description Notes items list[Project] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/ProjectsApi/","title":"libica.openapi.libconsole.ProjectsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description list_projects GET /v1/projects Get a list of available projects. Requires user authorization Bearer token."},{"location":"libconsole/docs/ProjectsApi/#list_projects","title":"list_projects","text":"<p>ProjectPagedItems list_projects(page_token=page_token)</p> <p>Get a list of available projects. Requires user authorization Bearer token.</p> <p>Get a list of available projects</p>"},{"location":"libconsole/docs/ProjectsApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.ProjectsApi(api_client)\n    page_token = 'page_token_example' # str |  (optional)\n\n    try:\n        # Get a list of available projects. Requires user authorization Bearer token.\n        api_response = api_instance.list_projects(page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling ProjectsApi-&gt;list_projects: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.ProjectsApi(api_client)\n    page_token = 'page_token_example' # str |  (optional)\n\n    try:\n        # Get a list of available projects. Requires user authorization Bearer token.\n        api_response = api_instance.list_projects(page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling ProjectsApi-&gt;list_projects: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/ProjectsApi/#parameters","title":"Parameters","text":"Name Type Description Notes page_token str [optional]"},{"location":"libconsole/docs/ProjectsApi/#return-type","title":"Return type","text":"<p>ProjectPagedItems</p>"},{"location":"libconsole/docs/ProjectsApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/ProjectsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/ProjectsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Projects returned successfully - 400 The provided page token is invalid. - 401 The provided access token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/Region/","title":"Region","text":"<p>Resource representing environment details</p>"},{"location":"libconsole/docs/Region/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the environment [optional] display_name str Display name for the environment [optional] base_url str BaseUrl for the environment [optional] is_enabled bool True if the environment is enabled [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/RegionsApi/","title":"libica.openapi.libconsole.RegionsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description list_regions GET /v1/regions Get a list of available regions"},{"location":"libconsole/docs/RegionsApi/#list_regions","title":"list_regions","text":"<p>list[Region] list_regions(instrument_type=instrument_type, version=version)</p> <p>Get a list of available regions</p> <p>Get a list of available regions</p>"},{"location":"libconsole/docs/RegionsApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.RegionsApi(api_client)\n    instrument_type = 'instrument_type_example' # str | Instrument type (optional)\nversion = 'version_example' # str | Instrument version (optional)\n\n    try:\n        # Get a list of available regions\n        api_response = api_instance.list_regions(instrument_type=instrument_type, version=version)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling RegionsApi-&gt;list_regions: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.RegionsApi(api_client)\n    instrument_type = 'instrument_type_example' # str | Instrument type (optional)\nversion = 'version_example' # str | Instrument version (optional)\n\n    try:\n        # Get a list of available regions\n        api_response = api_instance.list_regions(instrument_type=instrument_type, version=version)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling RegionsApi-&gt;list_regions: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/RegionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes instrument_type str Instrument type [optional] version str Instrument version [optional]"},{"location":"libconsole/docs/RegionsApi/#return-type","title":"Return type","text":"<p>list[Region]</p>"},{"location":"libconsole/docs/RegionsApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/RegionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/RegionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Regions found and returned successfully. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/ServiceHealthResponse/","title":"ServiceHealthResponse","text":"<p>Describes the individual health of all services in the platform</p>"},{"location":"libconsole/docs/ServiceHealthResponse/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the service [optional] status HealthCheckStatuses [optional] version str Current version for the deployed service [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/SystemHealthResponse/","title":"SystemHealthResponse","text":"<p>The overall health of the platform</p>"},{"location":"libconsole/docs/SystemHealthResponse/#properties","title":"Properties","text":"Name Type Description Notes status HealthCheckStatuses [optional] details list[ServiceHealthResponse] Service health details [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/TokenDetailResponse/","title":"TokenDetailResponse","text":""},{"location":"libconsole/docs/TokenDetailResponse/#properties","title":"Properties","text":"Name Type Description Notes uid str [optional] name str [optional] username str [optional] current_workgroup Workgroup [optional] tid str [optional] acls list[str] [optional] domain Domain [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/TokenResponse/","title":"TokenResponse","text":"<p>Response payload for token create</p>"},{"location":"libconsole/docs/TokenResponse/#properties","title":"Properties","text":"Name Type Description Notes access_token str The returned token is either a psToken or a JWT token depending on the context of the call. [optional] token_type str The type of token requested. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/TokensApi/","title":"libica.openapi.libconsole.TokensApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_token POST /v1/tokens Creates a JWT token to call IAP services. get_token_details GET /v1/tokens/details Get current tokens info require authorization Bearer token refresh_token POST /v1/tokens:refresh Refresh session psToken. revoke_token DELETE /v1/tokens Revokes an access token."},{"location":"libconsole/docs/TokensApi/#create_token","title":"create_token","text":"<p>TokenResponse create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token)</p> <p>Creates a JWT token to call IAP services.</p> <p>This endpoint creates a JWT token to call IAP services. Authorization can be a Bearer psToken,  Basic Base64 encoded username:password or Basic with apiKey.</p>"},{"location":"libconsole/docs/TokensApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional)\nclient_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional)\napi_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional)\ndomain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional)\ndata = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional)\nscopes = ['scopes_example'] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional)\ncwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional)\ncid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional)\nreturn_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional)\n\n    try:\n        # Creates a JWT token to call IAP services.\n        api_response = api_instance.create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;create_token: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    x_api_key = 'x_api_key_example' # str | Api Key can be passed in header to generate a JWT. (optional)\nclient_id = 'client_id_example' # str | Optionally pass client Id from calling app to set as authorized party on JWT. (optional)\napi_key = 'api_key_example' # str | OBSOLETE: api key should now be passed as as an X-API-Key header. (optional)\ndomain = 'domain_example' # str | Optionally pass the domain name you are logging into (optional)\ndata = 'data_example' # str | Data is a custom meta data field that will be applied to the session field in the JWT payload. (optional)\nscopes = ['scopes_example'] # list[str] | Scopes can be passed in during token generation to limit the token to particular scopes. (optional)\ncwid = 'cwid_example' # str | Set the current workgroup on the token. Used for aligning resources to a workgroup. (optional)\ncid = 'cid_example' # str | Set the current context on the token. Used for aligning resources to a context. (optional)\nreturn_session_token = True # bool | By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. (optional)\n\n    try:\n        # Creates a JWT token to call IAP services.\n        api_response = api_instance.create_token(x_api_key=x_api_key, client_id=client_id, api_key=api_key, domain=domain, data=data, scopes=scopes, cwid=cwid, cid=cid, return_session_token=return_session_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;create_token: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/TokensApi/#parameters","title":"Parameters","text":"Name Type Description Notes x_api_key str Api Key can be passed in header to generate a JWT. [optional] client_id str Optionally pass client Id from calling app to set as authorized party on JWT. [optional] api_key str OBSOLETE: api key should now be passed as as an X-API-Key header. [optional] domain str Optionally pass the domain name you are logging into [optional] data str Data is a custom meta data field that will be applied to the session field in the JWT payload. [optional] scopes list[str] Scopes can be passed in during token generation to limit the token to particular scopes. [optional] cwid str Set the current workgroup on the token. Used for aligning resources to a workgroup. [optional] cid str Set the current context on the token. Used for aligning resources to a context. [optional] return_session_token bool By default, this endpoint returns a JWT token. You can specify returnSessionToken=true to get an Illumina psToken instead. [optional]"},{"location":"libconsole/docs/TokensApi/#return-type","title":"Return type","text":"<p>TokenResponse</p>"},{"location":"libconsole/docs/TokensApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/TokensApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/TokensApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The Token is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/TokensApi/#get_token_details","title":"get_token_details","text":"<p>TokenDetailResponse get_token_details()</p> <p>Get current tokens info require authorization Bearer token</p> <p>Get token details</p>"},{"location":"libconsole/docs/TokensApi/#example_1","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n\n    try:\n        # Get current tokens info require authorization Bearer token\n        api_response = api_instance.get_token_details()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;get_token_details: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n\n    try:\n        # Get current tokens info require authorization Bearer token\n        api_response = api_instance.get_token_details()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;get_token_details: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/TokensApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"libconsole/docs/TokensApi/#return-type_1","title":"Return type","text":"<p>TokenDetailResponse</p>"},{"location":"libconsole/docs/TokensApi/#authorization_1","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/TokensApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/TokensApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Token details returned successfully - 401 The token provided is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/TokensApi/#refresh_token","title":"refresh_token","text":"<p>TokenResponse refresh_token(body=body)</p> <p>Refresh session psToken.</p> <p>This endpoint extends the session for the psToken.</p>"},{"location":"libconsole/docs/TokensApi/#example_2","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    body = libica.openapi.libconsole.AccessTokenRequest() # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional)\n\n    try:\n        # Refresh session psToken.\n        api_response = api_instance.refresh_token(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;refresh_token: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    body = libica.openapi.libconsole.AccessTokenRequest() # AccessTokenRequest | Access token request accepts a psToken in the access_token field in the body of the request. (optional)\n\n    try:\n        # Refresh session psToken.\n        api_response = api_instance.refresh_token(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;refresh_token: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/TokensApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts a psToken in the access_token field in the body of the request. [optional]"},{"location":"libconsole/docs/TokensApi/#return-type_2","title":"Return type","text":"<p>TokenResponse</p>"},{"location":"libconsole/docs/TokensApi/#authorization_2","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/TokensApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/TokensApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The Token was refreshed successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The token is no longer able to be refreshed. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/TokensApi/#revoke_token","title":"revoke_token","text":"<p>revoke_token(body=body)</p> <p>Revokes an access token.</p> <p>This endpoint revokes the access token that is passed in.</p>"},{"location":"libconsole/docs/TokensApi/#example_3","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    body = libica.openapi.libconsole.AccessTokenRequest() # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional)\n\n    try:\n        # Revokes an access token.\n        api_instance.revoke_token(body=body)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;revoke_token: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.TokensApi(api_client)\n    body = libica.openapi.libconsole.AccessTokenRequest() # AccessTokenRequest | Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. (optional)\n\n    try:\n        # Revokes an access token.\n        api_instance.revoke_token(body=body)\n    except ApiException as e:\n        print(\"Exception when calling TokensApi-&gt;revoke_token: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/TokensApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes body AccessTokenRequest Access token request accepts either a psToken or a JWT in the access_token field in the body of the request. [optional]"},{"location":"libconsole/docs/TokensApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"libconsole/docs/TokensApi/#authorization_3","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/TokensApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/TokensApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 Succeeded and the token has been revoked. - 400 An invalid or missing input parameter will result in a bad request.\\\" - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/UsageResponse/","title":"UsageResponse","text":""},{"location":"libconsole/docs/UsageResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[PeriodUsageSummary] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/UsagesApi/","title":"libica.openapi.libconsole.UsagesApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description get_usage GET /v1/usages Get current tenant's usage detail by period.  Default returns current period usage data. get_usage_details GET /v1/usages/details Get current tenant's usage detail by period.  Default returns current period usage data. get_usage_periods GET /v1/usages/periods Get periods detail info"},{"location":"libconsole/docs/UsagesApi/#get_usage","title":"get_usage","text":"<p>UsageResponse get_usage(periods=periods)</p> <p>Get current tenant's usage detail by period.  Default returns current period usage data. </p> <p>This endpoint provides the ability for the user to get the aggregated usage data</p>"},{"location":"libconsole/docs/UsagesApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    periods = 56 # int |  (optional)\n\n    try:\n        # Get current tenant's usage detail by period.  Default returns current period usage data. \n        api_response = api_instance.get_usage(periods=periods)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    periods = 56 # int |  (optional)\n\n    try:\n        # Get current tenant's usage detail by period.  Default returns current period usage data. \n        api_response = api_instance.get_usage(periods=periods)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/UsagesApi/#parameters","title":"Parameters","text":"Name Type Description Notes periods int [optional]"},{"location":"libconsole/docs/UsagesApi/#return-type","title":"Return type","text":"<p>UsageResponse</p>"},{"location":"libconsole/docs/UsagesApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/UsagesApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/UsagesApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/UsagesApi/#get_usage_details","title":"get_usage_details","text":"<p>UsageResponse get_usage_details(period_id=period_id)</p> <p>Get current tenant's usage detail by period.  Default returns current period usage data. </p> <p>This endpoint provides the billing details for specified period id. Summarize each compute usage and daily gds usage</p>"},{"location":"libconsole/docs/UsagesApi/#example_1","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    period_id = 56 # int |  (optional)\n\n    try:\n        # Get current tenant's usage detail by period.  Default returns current period usage data. \n        api_response = api_instance.get_usage_details(period_id=period_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage_details: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    period_id = 56 # int |  (optional)\n\n    try:\n        # Get current tenant's usage detail by period.  Default returns current period usage data. \n        api_response = api_instance.get_usage_details(period_id=period_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage_details: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/UsagesApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes period_id int [optional]"},{"location":"libconsole/docs/UsagesApi/#return-type_1","title":"Return type","text":"<p>UsageResponse</p>"},{"location":"libconsole/docs/UsagesApi/#authorization_1","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/UsagesApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The usages are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/UsagesApi/#get_usage_periods","title":"get_usage_periods","text":"<p>UsageResponse get_usage_periods(limit=limit)</p> <p>Get periods detail info </p> <p>This endpoint provides the periods details</p>"},{"location":"libconsole/docs/UsagesApi/#example_2","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    limit = 26 # int |  (optional) (default to 26)\n\n    try:\n        # Get periods detail info \n        api_response = api_instance.get_usage_periods(limit=limit)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage_periods: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.UsagesApi(api_client)\n    limit = 26 # int |  (optional) (default to 26)\n\n    try:\n        # Get periods detail info \n        api_response = api_instance.get_usage_periods(limit=limit)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling UsagesApi-&gt;get_usage_periods: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/UsagesApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes limit int [optional] [default to 26]"},{"location":"libconsole/docs/UsagesApi/#return-type_2","title":"Return type","text":"<p>UsageResponse</p>"},{"location":"libconsole/docs/UsagesApi/#authorization_2","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/UsagesApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/UsagesApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The periods are returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libconsole/docs/User/","title":"User","text":""},{"location":"libconsole/docs/User/#properties","title":"Properties","text":"Name Type Description Notes full_name str [optional] user_name str [optional] domain Domain [optional] type str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/UserAggregatedUsage/","title":"UserAggregatedUsage","text":""},{"location":"libconsole/docs/UserAggregatedUsage/#properties","title":"Properties","text":"Name Type Description Notes user User [optional] i_credit float [optional] usages list[ProductUsage] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/Workgroup/","title":"Workgroup","text":""},{"location":"libconsole/docs/Workgroup/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] name str [optional] description str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/WorkgroupResponse/","title":"WorkgroupResponse","text":""},{"location":"libconsole/docs/WorkgroupResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[Workgroup] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libconsole/docs/WorkgroupsApi/","title":"libica.openapi.libconsole.WorkgroupsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description list_workgroups GET /v1/workgroups Get a list of available workgroups. Requires session token (psToken) authorization Bearer token"},{"location":"libconsole/docs/WorkgroupsApi/#list_workgroups","title":"list_workgroups","text":"<p>WorkgroupResponse list_workgroups()</p> <p>Get a list of available workgroups. Requires session token (psToken) authorization Bearer token</p> <p>Get a list of available workgroups</p>"},{"location":"libconsole/docs/WorkgroupsApi/#example","title":"Example","text":"<ul> <li>Basic Authentication (Basic):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.WorkgroupsApi(api_client)\n\n    try:\n        # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token\n        api_response = api_instance.list_workgroups()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkgroupsApi-&gt;list_workgroups: %s\\n\" % e)\n</code></pre> <ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libconsole\nfrom libica.openapi.libconsole.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: Basic\nconfiguration = libica.openapi.libconsole.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libconsole.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libconsole.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libconsole.WorkgroupsApi(api_client)\n\n    try:\n        # Get a list of available workgroups. Requires session token (psToken) authorization Bearer token\n        api_response = api_instance.list_workgroups()\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkgroupsApi-&gt;list_workgroups: %s\\n\" % e)\n</code></pre>"},{"location":"libconsole/docs/WorkgroupsApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"libconsole/docs/WorkgroupsApi/#return-type","title":"Return type","text":"<p>WorkgroupResponse</p>"},{"location":"libconsole/docs/WorkgroupsApi/#authorization","title":"Authorization","text":"<p>Basic, Bearer</p>"},{"location":"libconsole/docs/WorkgroupsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libconsole/docs/WorkgroupsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Workgroups returned successfully - 401 The provided session token is unauthorized. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libens/","title":"libica.openapi.libens","text":"<p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p> <p>The <code>libica.openapi.libens</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: v1</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T20:38:53.769803+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"libens/#requirements","title":"Requirements.","text":"<p>Python 2.7 and 3.4+</p>"},{"location":"libens/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.15</li> <li>six &gt;= 1.10</li> <li>certifi</li> <li>python-dateutil</li> </ul>"},{"location":"libens/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.libens, you can run the following:</p> <pre><code>from __future__ import print_function\n\nimport time\nimport libica.openapi.libens\nfrom libica.openapi.libens.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libens.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libens.SubscriptionsApi(api_client)\n    body = libica.openapi.libens.CreateSubscriptionRequest() # CreateSubscriptionRequest |  (optional)\n\n    try:\n        # Creates a subscription to an event type and defines how those events get delivered.\n        api_response = api_instance.create_subscription(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling SubscriptionsApi-&gt;create_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"libens/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Class Method HTTP request Description SubscriptionsApi create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. SubscriptionsApi disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. SubscriptionsApi get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. SubscriptionsApi list_subscriptions GET /v1/subscriptions Get a list of subscriptions."},{"location":"libens/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>CreateSubscriptionRequest</li> <li>DeliveryTarget</li> <li>DeliveryTargetAwsSnsTopic</li> <li>DeliveryTargetAwsSqsQueue</li> <li>DeliveryTargetWorkflowRunLaunch</li> <li>ErrorResponse</li> <li>SortDirection</li> <li>Subscription</li> <li>SubscriptionList</li> <li>SubscriptionListSortFields</li> </ul>"},{"location":"libens/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"libens/#bearer","title":"Bearer","text":"<ul> <li>Type: API key</li> <li>API key parameter name: Authorization</li> <li>Location: HTTP header</li> </ul>"},{"location":"libens/#author","title":"Author","text":""},{"location":"libens/docs/CreateSubscriptionRequest/","title":"CreateSubscriptionRequest","text":""},{"location":"libens/docs/CreateSubscriptionRequest/#properties","title":"Properties","text":"Name Type Description Notes type str Event type which will be subscribed to actions list[str] Actions which will be subscribed to for the event type [optional] name str Name of the subscription description str Optional description for the subscription [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] delivery_target DeliveryTarget <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/DeliveryTarget/","title":"DeliveryTarget","text":"<p>Configuration for the action to perform for events matching this subscription; only one delivery type may be specified</p>"},{"location":"libens/docs/DeliveryTarget/#properties","title":"Properties","text":"Name Type Description Notes aws_sns_topic DeliveryTargetAwsSnsTopic [optional] aws_sqs_queue DeliveryTargetAwsSqsQueue [optional] workflow_run_launch DeliveryTargetWorkflowRunLaunch [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/","title":"DeliveryTargetAwsSnsTopic","text":"<p>Configuration for an AWS SNS delivery topic</p>"},{"location":"libens/docs/DeliveryTargetAwsSnsTopic/#properties","title":"Properties","text":"Name Type Description Notes topic_arn str ARN for the AWS SNS topic <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/","title":"DeliveryTargetAwsSqsQueue","text":"<p>Configuration for an AWS SQS delivery queue</p>"},{"location":"libens/docs/DeliveryTargetAwsSqsQueue/#properties","title":"Properties","text":"Name Type Description Notes queue_url str URL for the AWS SQS queue <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/","title":"DeliveryTargetWorkflowRunLaunch","text":"<p>Configuration for a delivery via WES workflow run launch</p>"},{"location":"libens/docs/DeliveryTargetWorkflowRunLaunch/#properties","title":"Properties","text":"Name Type Description Notes id str Id of the workflow to launch version str Version of the workflow to launch, for the given id name str Name for the workflowRun input object Arguments for the workflowRun [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/ErrorResponse/","title":"ErrorResponse","text":"<p>Details for an error which occurred</p>"},{"location":"libens/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes code str Error code which uniquely identifies the type of error which occurred [optional] message str Description of the error which occurred [optional] details list[object] Additional details for conditions which caused the error [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/SortDirection/","title":"SortDirection","text":""},{"location":"libens/docs/SortDirection/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/Subscription/","title":"Subscription","text":"<p>Details for an Event Notification Service subscription</p>"},{"location":"libens/docs/Subscription/#properties","title":"Properties","text":"Name Type Description Notes id str Unique id of the subscription [optional] urn str URN of the subscription [optional] type str Type of event the subscription matches [optional] actions list[str] Types of actions the subscription matches for the event type [optional] filter_expression str JSON-structured filter expression for events matching the subscription [optional] name str Name of the subscription [optional] description str Optional description for the subscription [optional] delivery_target DeliveryTarget [optional] match_identities list[str] ACL Identities for events the subscription matches [optional] acl list[str] The list of identities that have access to this subscription [optional] tenant_id str Tenant id of the subscription owner [optional] created_by_user_id str User id for the creator of the subscription [optional] time_created datetime Timestamp when the subscription was created [optional] deleted_by_user_id str Id of the user who deleted the subscription, if applicable [optional] time_deleted datetime Timestamp when the subscription was deleted, if applicable [optional] is_deleted bool Whether or not the subscription has been deleted [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionList/","title":"SubscriptionList","text":""},{"location":"libens/docs/SubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items list[Subscription] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] sorted_by SubscriptionListSortFields [optional] sort_direction SortDirection [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionListSortFields/","title":"SubscriptionListSortFields","text":""},{"location":"libens/docs/SubscriptionListSortFields/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionsApi/","title":"libica.openapi.libens.SubscriptionsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_subscription POST /v1/subscriptions Creates a subscription to an event type and defines how those events get delivered. disable_subscription DELETE /v1/subscriptions/{subscriptionId} Given a subscription id, disables the specified subscription. get_subscription GET /v1/subscriptions/{subscriptionId} Given a subscription id, returns information about that subscription. list_subscriptions GET /v1/subscriptions Get a list of subscriptions."},{"location":"libens/docs/SubscriptionsApi/#create_subscription","title":"create_subscription","text":"<p>Subscription create_subscription(body=body)</p> <p>Creates a subscription to an event type and defines how those events get delivered.</p> <p>Events can be delivered to AWS SQS, AWS SNS, or can be used to launch a WES workflow.</p>"},{"location":"libens/docs/SubscriptionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libens\nfrom libica.openapi.libens.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libens.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libens.SubscriptionsApi(api_client)\n    body = libica.openapi.libens.CreateSubscriptionRequest() # CreateSubscriptionRequest |  (optional)\n\n    try:\n        # Creates a subscription to an event type and defines how those events get delivered.\n        api_response = api_instance.create_subscription(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling SubscriptionsApi-&gt;create_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"libens/docs/SubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes body CreateSubscriptionRequest [optional]"},{"location":"libens/docs/SubscriptionsApi/#return-type","title":"Return type","text":"<p>Subscription</p>"},{"location":"libens/docs/SubscriptionsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libens/docs/SubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The subscription is created successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to subscribe to the given event type or deliver to the given delivery target. - 409 The given delivery target is not valid or cannot be delivered to. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionsApi/#disable_subscription","title":"disable_subscription","text":"<p>Subscription disable_subscription(subscription_id)</p> <p>Given a subscription id, disables the specified subscription.</p> <p>Given a subscription id, disables that subscription with the current JWT token\u2019s tenant Id.</p>"},{"location":"libens/docs/SubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libens\nfrom libica.openapi.libens.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libens.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libens.SubscriptionsApi(api_client)\n    subscription_id = 'subscription_id_example' # str | Id of the subscription to be disabled\n\n    try:\n        # Given a subscription id, disables the specified subscription.\n        api_response = api_instance.disable_subscription(subscription_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling SubscriptionsApi-&gt;disable_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"libens/docs/SubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes subscription_id str Id of the subscription to be disabled"},{"location":"libens/docs/SubscriptionsApi/#return-type_1","title":"Return type","text":"<p>Subscription</p>"},{"location":"libens/docs/SubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Subscription for the given ID is disabled successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to disable the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionsApi/#get_subscription","title":"get_subscription","text":"<p>Subscription get_subscription(subscription_id)</p> <p>Given a subscription id, returns information about that subscription.</p> <p>Given a subscription id, returns information about that subscription accessible by the current JWT token\u2019s tenant Id.</p>"},{"location":"libens/docs/SubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libens\nfrom libica.openapi.libens.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libens.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libens.SubscriptionsApi(api_client)\n    subscription_id = 'subscription_id_example' # str | Id of the subscription to return\n\n    try:\n        # Given a subscription id, returns information about that subscription.\n        api_response = api_instance.get_subscription(subscription_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling SubscriptionsApi-&gt;get_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"libens/docs/SubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes subscription_id str Id of the subscription to return"},{"location":"libens/docs/SubscriptionsApi/#return-type_2","title":"Return type","text":"<p>Subscription</p>"},{"location":"libens/docs/SubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Subscription for the given ID is found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access the subscription for the given ID. - 404 Could not find a subscription for the given ID. - 410 The subscription for the given ID has been disabled. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libens/docs/SubscriptionsApi/#list_subscriptions","title":"list_subscriptions","text":"<p>SubscriptionList list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token)</p> <p>Get a list of subscriptions.</p> <p>Get a list of subscriptions accessible by the current JWT token\u2019s tenant Id.</p>"},{"location":"libens/docs/SubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libens\nfrom libica.openapi.libens.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libens.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libens.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libens.SubscriptionsApi(api_client)\n    event_type = 'event_type_example' # str | Optional event type for filtering returned subscriptions (optional)\npage_size = 56 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional)\npage_token = 'page_token_example' # str | Utilized for navigation after initial listing. Valid values include those of  firstPageToken, nextPageToken, and previousPageToken in the list response.  When there are no more pages, the nextPageToken will be null. (optional)\n\n    try:\n        # Get a list of subscriptions.\n        api_response = api_instance.list_subscriptions(event_type=event_type, page_size=page_size, page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling SubscriptionsApi-&gt;list_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"libens/docs/SubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes event_type str Optional event type for filtering returned subscriptions [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] page_token str Utilized for navigation after initial listing. Valid values include those of  firstPageToken, nextPageToken, and previousPageToken in the list response.  When there are no more pages, the nextPageToken will be null. [optional]"},{"location":"libens/docs/SubscriptionsApi/#return-type_3","title":"Return type","text":"<p>SubscriptionList</p>"},{"location":"libens/docs/SubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libens/docs/SubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libens/docs/SubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Subscriptions found and returned successfully. - 400 An invalid or missing input parameter will result in a bad request. - 401 The acting identity cannot be authenticated and authorized. - 403 The acting identity is not authorized to access subscriptions. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/","title":"libica.openapi.libgds","text":"<p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p> <p>The <code>libica.openapi.libgds</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: v1</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T20:38:31.049371+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"libgds/#requirements","title":"Requirements.","text":"<p>Python 2.7 and 3.4+</p>"},{"location":"libgds/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.15</li> <li>six &gt;= 1.10</li> <li>certifi</li> <li>python-dateutil</li> </ul>"},{"location":"libgds/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.libgds, you can run the following:</p> <pre><code>from __future__ import print_function\n\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to be archived.\nbody = libica.openapi.libgds.FileArchiveRequest() # FileArchiveRequest | \n\n    try:\n        # Archive a file\n        api_response = api_instance.archive_file(file_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;archive_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Class Method HTTP request Description FilesApi archive_file POST /v1/files/{fileId}:archive Archive a file FilesApi bulk_file_update PATCH /v1/files Updates list of files with metadata FilesApi complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload FilesApi copy_files POST /v1/files/copy Copy list of files FilesApi create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload FilesApi delete_file DELETE /v1/files/{fileId} Permanently delete a file FilesApi get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download FilesApi list_files GET /v1/files Get a list of files FilesApi list_volume_files POST /v1/files/list Get a list of volume files FilesApi unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file FilesApi update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload FoldersApi archive_folder POST /v1/folders/{folderId}:archive Archive a folder FoldersApi bulk_folder_update PATCH /v1/folders Updates list of folders with metadata FoldersApi bulk_metadata_folder_update PATCH /v1/folders/bulkMetadataFolderUpdate Updates list of folders with metadata FoldersApi complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS FoldersApi copy_folder POST /v1/folders/{folderId}:copy Copy a folder FoldersApi create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload FoldersApi create_folder_session POST /v1/folders/{folderId}/sessions Create a session FoldersApi delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id FoldersApi get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. FoldersApi get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS FoldersApi get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS FoldersApi list_folders GET /v1/folders Get a list of folders FoldersApi unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder FoldersApi update_folder PATCH /v1/folders/{folderId} Update a folder content or acl JobsApi abort_job POST /v1/jobs/{jobId}:abort Abort a job in GDS. JobsApi get_job GET /v1/jobs/{jobId} Get information about a job in GDS. JobsApi list_jobs GET /v1/jobs Get a list of jobs for a given folder VolumeConfigurationsApi create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. VolumeConfigurationsApi delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name VolumeConfigurationsApi get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id VolumeConfigurationsApi list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes VolumeConfigurationsApi validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration VolumesApi create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload VolumesApi delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id VolumesApi get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name VolumesApi list_volumes GET /v1/volumes Get a list of volumes VolumesApi update_volume PATCH /v1/volumes/{volumeId} Update a volume content"},{"location":"libgds/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AWSS3ObjectStoreSetting</li> <li>ArchiveStatuses</li> <li>AwsS3PresignedUrlForUpload</li> <li>AwsS3TemporaryReadOnlyCredentials</li> <li>AwsS3TemporaryUploadCredentials</li> <li>BulkFailedItem</li> <li>BulkFileUpdateItem</li> <li>BulkFileUpdateRequest</li> <li>BulkFileUpdateResponse</li> <li>BulkFolderMetadataUpdateRequest</li> <li>BulkFolderUpdateItem</li> <li>BulkFolderUpdateRequest</li> <li>BulkFolderUpdateResponse</li> <li>BulkMetadataUpdateOperationParameters</li> <li>BulkUpdateFailedItem</li> <li>CompleteSessionRequest</li> <li>CreateFileRequest</li> <li>CreateFolderRequest</li> <li>CreateSessionRequest</li> <li>CreateSessionResponse</li> <li>CreateVolumeConfigurationRequest</li> <li>CreateVolumeRequest</li> <li>CreateVolumeResponse</li> <li>ErrorResponse</li> <li>FileArchiveRequest</li> <li>FileArchiveStorageTier</li> <li>FileCopyOperationParameters</li> <li>FileCopyOutput</li> <li>FileLifeCycleSettings</li> <li>FileListCopyRequest</li> <li>FileListResponse</li> <li>FileResponse</li> <li>FileStatus</li> <li>FileUnarchiveRequest</li> <li>FileUploadCompleteRequest</li> <li>FileWriteableResponse</li> <li>FolderArchiveRequest</li> <li>FolderArchiveStorageTier</li> <li>FolderCopyOperationParameters</li> <li>FolderCopyRequest</li> <li>FolderDeleteOperationParameters</li> <li>FolderListResponse</li> <li>FolderResponse</li> <li>FolderUnarchiveRequest</li> <li>FolderUpdateRequest</li> <li>FolderWriteableResponse</li> <li>GracePeriodEndAction</li> <li>JobListResponse</li> <li>JobOperationParameters</li> <li>JobOperationType</li> <li>JobOutput</li> <li>JobProgressStatus</li> <li>JobResponse</li> <li>JobStatus</li> <li>MetadataUpdateOutput</li> <li>MetadataUpdateRequest</li> <li>ObjectStoreAccess</li> <li>ObjectStoreSettings</li> <li>PartEtag</li> <li>PartInfo</li> <li>SessionResponse</li> <li>SessionStatus</li> <li>StorageTier</li> <li>UpdateFileRequest</li> <li>UpdateVolumeRequest</li> <li>VolumeConfigurationListResponse</li> <li>VolumeConfigurationOnlineStatus</li> <li>VolumeConfigurationResponse</li> <li>VolumeFileListRequest</li> <li>VolumeFileListResponse</li> <li>VolumeLifeCycleSettings</li> <li>VolumeListResponse</li> <li>VolumeMigrationOperationParameters</li> <li>VolumeResponse</li> </ul>"},{"location":"libgds/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"libgds/#bearer","title":"Bearer","text":"<ul> <li>Type: API key</li> <li>API key parameter name: Authorization</li> <li>Location: HTTP header</li> </ul>"},{"location":"libgds/#author","title":"Author","text":""},{"location":"libgds/docs/AWSS3ObjectStoreSetting/","title":"AWSS3ObjectStoreSetting","text":""},{"location":"libgds/docs/AWSS3ObjectStoreSetting/#properties","title":"Properties","text":"Name Type Description Notes bucket_name str The bucket name key_prefix str Key prefix within the bucket for GDS to operate within. Volumes may only be created within this prefix and the given credentials need only authorize  access here. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider.  This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value.  For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS.  By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm  This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value  Value will be ignored if encryption is \\\"AES256\\\" [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/ArchiveStatuses/","title":"ArchiveStatuses","text":"<p>The valid Archive Status values for files in GDS</p>"},{"location":"libgds/docs/ArchiveStatuses/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/","title":"AwsS3PresignedUrlForUpload","text":"<p>AwsS3PresignedUrlForUpload</p>"},{"location":"libgds/docs/AwsS3PresignedUrlForUpload/#properties","title":"Properties","text":"Name Type Description Notes single_part_url str A single part presigned url for upload [optional] multipart_template str A url template for multi parts presigned url for upload [optional] multipart_signatures list[PartInfo] Multi parts info that needs to be applied to the MultipartTemplate [optional] multipart_upload_id str Multi part upload id [optional] server_side_encryption_algorithm str The server side encryption method used by S3.  This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value.  Possible values: 'AES256' and 'aws:kms'. [optional] server_side_encryption_key str Server-side encryption key that might be associated with the specified server-side encryption algorithm  This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value  This is only used when ServerSideEncryptionAlgorithm is 'aws:kms' [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/AwsS3TemporaryReadOnlyCredentials/","title":"AwsS3TemporaryReadOnlyCredentials","text":""},{"location":"libgds/docs/AwsS3TemporaryReadOnlyCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3.  This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider.  This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value.  For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS.  By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm  This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value  Value will be ignored if encryption is \\\"AES256\\\" [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/","title":"AwsS3TemporaryUploadCredentials","text":"<p>AwsS3TemporaryUploadCredentials</p>"},{"location":"libgds/docs/AwsS3TemporaryUploadCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key_id str Access key for use with AWS S3 [optional] secret_access_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] key_prefix str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] service_url str Service endpoint for accessing S3.  This is optional for AWS S3, but mandatory for other services like Taiwan Computing Cloud. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider.  This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value.  For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS.  By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the serve-side encryption key that might be associated with the specified server-side encryption algorithm  This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value  Value will be ignored if encryption is \\\"AES256\\\" [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFailedItem/","title":"BulkFailedItem","text":""},{"location":"libgds/docs/BulkFailedItem/#properties","title":"Properties","text":"Name Type Description Notes id str Id of resource that failed [optional] error_response ErrorResponse [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFileUpdateItem/","title":"BulkFileUpdateItem","text":""},{"location":"libgds/docs/BulkFileUpdateItem/#properties","title":"Properties","text":"Name Type Description Notes id str Id of this file [optional] metadata object Metadata about this file and its contents [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFileUpdateRequest/","title":"BulkFileUpdateRequest","text":""},{"location":"libgds/docs/BulkFileUpdateRequest/#properties","title":"Properties","text":"Name Type Description Notes items list[BulkFileUpdateItem] [optional] time_out_in_seconds int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFileUpdateResponse/","title":"BulkFileUpdateResponse","text":""},{"location":"libgds/docs/BulkFileUpdateResponse/#properties","title":"Properties","text":"Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFolderMetadataUpdateRequest/","title":"BulkFolderMetadataUpdateRequest","text":"<p>Request to bulk update metadata on folders and sub files.</p>"},{"location":"libgds/docs/BulkFolderMetadataUpdateRequest/#properties","title":"Properties","text":"Name Type Description Notes folder_id str Folder unique id. file_status str File status to filter on. [optional] parent_folder_metadata_updates MetadataUpdateRequest [optional] children_folders_updates MetadataUpdateRequest [optional] children_files_updates MetadataUpdateRequest [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFolderUpdateItem/","title":"BulkFolderUpdateItem","text":""},{"location":"libgds/docs/BulkFolderUpdateItem/#properties","title":"Properties","text":"Name Type Description Notes id str Id of this folder [optional] metadata object Metadata about this folder and its contents [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFolderUpdateRequest/","title":"BulkFolderUpdateRequest","text":""},{"location":"libgds/docs/BulkFolderUpdateRequest/#properties","title":"Properties","text":"Name Type Description Notes items list[BulkFolderUpdateItem] [optional] time_out_in_seconds int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkFolderUpdateResponse/","title":"BulkFolderUpdateResponse","text":""},{"location":"libgds/docs/BulkFolderUpdateResponse/#properties","title":"Properties","text":"Name Type Description Notes items_failed list[BulkUpdateFailedItem] Items failed to be updated with error details [optional] items_updated_count int Total items successfully updated [optional] items_failed_count int Total items failed to be updated [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkMetadataUpdateOperationParameters/","title":"BulkMetadataUpdateOperationParameters","text":"<p>Operation parameters for folder bulk metadata update operations</p>"},{"location":"libgds/docs/BulkMetadataUpdateOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes folder_id str [optional] folder_path str [optional] volume_id str [optional] file_status str [optional] parent_folder_metadata_updates MetadataUpdateRequest [optional] children_folders_updates MetadataUpdateRequest [optional] children_files_updates MetadataUpdateRequest [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/BulkUpdateFailedItem/","title":"BulkUpdateFailedItem","text":""},{"location":"libgds/docs/BulkUpdateFailedItem/#properties","title":"Properties","text":"Name Type Description Notes id str Id of resource that failed to be updated [optional] error_response ErrorResponse [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CompleteSessionRequest/","title":"CompleteSessionRequest","text":""},{"location":"libgds/docs/CompleteSessionRequest/#properties","title":"Properties","text":"Name Type Description Notes expected_session_file_count int User-defined count used for reconciling files uploaded when closing the session <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateFileRequest/","title":"CreateFileRequest","text":"<p>CreateFileRequest Model</p>"},{"location":"libgds/docs/CreateFileRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the file to be uploaded, case sensitive. volume_id str Volume ID to which the file will be uploaded [optional] folder_path str Optional folder path where the file will be uploaded to [optional] type str Optional file content type, e.g. text/plain, application/json [optional] volume_name str Name of the Volume [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] metadata object Metadata about this file and its contents [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateFolderRequest/","title":"CreateFolderRequest","text":""},{"location":"libgds/docs/CreateFolderRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Folder name, unique to this path, for the folder being created folder_path str Path from the root folder to the location for the folder being created; must start and end with '/' [optional] volume_id str The unique identifier for this Folder's Volume [optional] volume_name str The unique name for the Folder's Volume [optional] metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateSessionRequest/","title":"CreateSessionRequest","text":""},{"location":"libgds/docs/CreateSessionRequest/#properties","title":"Properties","text":"Name Type Description Notes metadata object Metadata about this session and its contents [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateSessionResponse/","title":"CreateSessionResponse","text":""},{"location":"libgds/docs/CreateSessionResponse/#properties","title":"Properties","text":"Name Type Description Notes object_store_access ObjectStoreAccess [optional] id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date &amp; time this Session was created, in GDS [optional] time_credentials_expire datetime The date &amp; time this upload session expires [optional] time_closed datetime The date &amp; time this Session was closed, in GDS [optional] time_completed datetime The date &amp; time this Session was completed, in GDS [optional] metadata object [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateVolumeConfigurationRequest/","title":"CreateVolumeConfigurationRequest","text":""},{"location":"libgds/docs/CreateVolumeConfigurationRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name for the volume configuration object_store_settings ObjectStoreSettings <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateVolumeRequest/","title":"CreateVolumeRequest","text":""},{"location":"libgds/docs/CreateVolumeRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name for the volume volume_configuration_name str Unique name of the volume configuration to use [optional] root_key_prefix str The base bucket location for volumes associated with custom VolumeConfigurations. If not provided, the given volume Name is used.  If provided, it must start with the VolumeConfiguration's keyprefix and end with a /.  To create a volume representing the root of a bucket, use the value '/'. [optional] metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/CreateVolumeResponse/","title":"CreateVolumeResponse","text":""},{"location":"libgds/docs/CreateVolumeResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume.  This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date &amp; time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date &amp; time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] migration_status str Status of the root folder migration status from v1 to v2 [optional] import_session_id str Unique identifier of the import Session for this Volume. This only applies to Volumes created from custom  Volume configurations. [optional] object_store_access ObjectStoreAccess [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/ErrorResponse/","title":"ErrorResponse","text":""},{"location":"libgds/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes code str Error code that uniquely identifies the type of error that occurred [optional] message str Description of the error that occurred [optional] details list[object] Additional details for conditions that caused the error [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileArchiveRequest/","title":"FileArchiveRequest","text":"<p>FileArchiveRequest to specify the Storage Tier</p>"},{"location":"libgds/docs/FileArchiveRequest/#properties","title":"Properties","text":"Name Type Description Notes storage_tier FileArchiveStorageTier <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileArchiveStorageTier/","title":"FileArchiveStorageTier","text":""},{"location":"libgds/docs/FileArchiveStorageTier/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileCopyOperationParameters/","title":"FileCopyOperationParameters","text":"<p>Operation parameters for folder copy operations</p>"},{"location":"libgds/docs/FileCopyOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes source_volume_id str [optional] source_file_ids list[str] The file Ids for the copy operation [optional] target_folder_id str [optional] metadata_to_copy list[str] [optional] duplicate_file_action str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileCopyOutput/","title":"FileCopyOutput","text":""},{"location":"libgds/docs/FileCopyOutput/#properties","title":"Properties","text":"Name Type Description Notes items_skipped_count int [optional] items_failed_count int [optional] items_copied_count int [optional] elastic_indexing_matched bool [optional] items_failed list[BulkFailedItem] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileLifeCycleSettings/","title":"FileLifeCycleSettings","text":""},{"location":"libgds/docs/FileLifeCycleSettings/#properties","title":"Properties","text":"Name Type Description Notes time_grace_period_ends datetime If set, date when billing for the file will start [optional] time_to_be_archived datetime If set, date when file will be archived [optional] time_to_be_deleted datetime If set, date when file will be deleted [optional] archive_storage_tier FileArchiveStorageTier [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileListCopyRequest/","title":"FileListCopyRequest","text":""},{"location":"libgds/docs/FileListCopyRequest/#properties","title":"Properties","text":"Name Type Description Notes source_volume_id str The volume where the source files are copied from. destination_folder_id str The folder into which the source folder will be copied. ids list[str] List of files ids to copy metadata_to_copy list[str] [optional] duplicate_file_action str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileListResponse/","title":"FileListResponse","text":""},{"location":"libgds/docs/FileListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[FileResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileResponse/","title":"FileResponse","text":""},{"location":"libgds/docs/FileResponse/#properties","title":"Properties","text":"Name Type Description Notes volume_metadata object Metadata about this file's volume [optional] copy_job_id str Job that copied the file [optional] id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date &amp; time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date &amp; time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date &amp; time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] presigned_url str The presigned Url allowing access to this File [optional] object_store_access ObjectStoreAccess [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileStatus/","title":"FileStatus","text":""},{"location":"libgds/docs/FileStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileUnarchiveRequest/","title":"FileUnarchiveRequest","text":"<p>FileUnarchiveRequest to specify the RestoreSpeed</p>"},{"location":"libgds/docs/FileUnarchiveRequest/#properties","title":"Properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the File to the Standard Storage Tier. Valid values are Economy and Standard. <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileUploadCompleteRequest/","title":"FileUploadCompleteRequest","text":"<p>FileUploadCompleteRequest</p>"},{"location":"libgds/docs/FileUploadCompleteRequest/#properties","title":"Properties","text":"Name Type Description Notes multipart_upload_id str The multipart upload id used by the object store [optional] part_etags list[PartEtag] etags for each uploaded part (optional for files that uses multipart upload) [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FileWriteableResponse/","title":"FileWriteableResponse","text":""},{"location":"libgds/docs/FileWriteableResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this File [optional] name str The name of this File [optional] volume_id str The unique identifier of the volume where the file resides [optional] parent_folder_id str The unique identifier of the folder where the file resides [optional] volume_name str The name of the volume where the file resides [optional] volume_configuration_name str The name of the volume configuration (BYOB only) [optional] type str The type of the File [optional] tenant_id str The unique identifier for this File's Tenant [optional] sub_tenant_id str The unique identifier for this File's Sub Tenant [optional] path str The (GDS) path to this File [optional] time_created datetime The date &amp; time this File was created, in GDS [optional] created_by str The creator of this File [optional] time_modified datetime The date &amp; time this File was updated, in GDS [optional] modified_by str The updator of this File [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this File [optional] urn str The Universal Resource Name, unique to this File [optional] size_in_bytes int The File's Size in bytes [optional] metadata object Metadata about this File [optional] is_uploaded bool The current upload state of the File [optional] archive_status ArchiveStatuses [optional] time_archived datetime The date &amp; time this File was archived [optional] storage_tier StorageTier [optional] e_tag str The File's ETag [optional] format str The File's Format [optional] format_edam str [optional] status FileStatus [optional] life_cycle FileLifeCycleSettings [optional] object_store_access ObjectStoreAccess [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/","title":"libica.openapi.libgds.FilesApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description archive_file POST /v1/files/{fileId}:archive Archive a file bulk_file_update PATCH /v1/files Updates list of files with metadata complete_file_upload POST /v1/files/{fileId}:completeUpload Complete a file Upload copy_files POST /v1/files/copy Copy list of files create_file POST /v1/files Create a file entry in GDS and get temporary credentials for upload delete_file DELETE /v1/files/{fileId} Permanently delete a file get_file GET /v1/files/{fileId} Get details about a file, including a pre-signed URL for download list_files GET /v1/files Get a list of files list_volume_files POST /v1/files/list Get a list of volume files unarchive_file POST /v1/files/{fileId}:unarchive Unarchive a file update_file PATCH /v1/files/{fileId} Update a file entry in GDS and get temporary credentials for upload"},{"location":"libgds/docs/FilesApi/#archive_file","title":"archive_file","text":"<p>FileResponse archive_file(file_id, body)</p> <p>Archive a file</p> <p>Archives a file to a lower storage cost tier.</p>"},{"location":"libgds/docs/FilesApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to be archived.\nbody = libica.openapi.libgds.FileArchiveRequest() # FileArchiveRequest | \n\n    try:\n        # Archive a file\n        api_response = api_instance.archive_file(file_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;archive_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to be archived. body FileArchiveRequest"},{"location":"libgds/docs/FilesApi/#return-type","title":"Return type","text":"<p>FileResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#bulk_file_update","title":"bulk_file_update","text":"<p>BulkFileUpdateResponse bulk_file_update(body=body)</p> <p>Updates list of files with metadata</p> <p>Updates list of files with metadata</p>"},{"location":"libgds/docs/FilesApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    body = libica.openapi.libgds.BulkFileUpdateRequest() # BulkFileUpdateRequest |  (optional)\n\n    try:\n        # Updates list of files with metadata\n        api_response = api_instance.bulk_file_update(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;bulk_file_update: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes body BulkFileUpdateRequest [optional]"},{"location":"libgds/docs/FilesApi/#return-type_1","title":"Return type","text":"<p>BulkFileUpdateResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: text/plain, application/json, text/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 202 Accepted - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#complete_file_upload","title":"complete_file_upload","text":"<p>FileResponse complete_file_upload(file_id, body)</p> <p>Complete a file Upload</p> <p>Complete a file upload operation. If the file was uploaded using multipart uploads, combine all the multiple parts uploaded into one complete file.</p>"},{"location":"libgds/docs/FilesApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file upload to be completed.\nbody = libica.openapi.libgds.FileUploadCompleteRequest() # FileUploadCompleteRequest | \n\n    try:\n        # Complete a file Upload\n        api_response = api_instance.complete_file_upload(file_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;complete_file_upload: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file upload to be completed. body FileUploadCompleteRequest"},{"location":"libgds/docs/FilesApi/#return-type_2","title":"Return type","text":"<p>FileResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#copy_files","title":"copy_files","text":"<p>JobResponse copy_files(body)</p> <p>Copy list of files</p> <p>Copies a list of files enumerated by file Ids to a destination folder</p>"},{"location":"libgds/docs/FilesApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    body = libica.openapi.libgds.FileListCopyRequest() # FileListCopyRequest | \n\n    try:\n        # Copy list of files\n        api_response = api_instance.copy_files(body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;copy_files: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes body FileListCopyRequest"},{"location":"libgds/docs/FilesApi/#return-type_3","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#create_file","title":"create_file","text":"<p>FileWriteableResponse create_file(body, include=include, upload_part_count=upload_part_count)</p> <p>Create a file entry in GDS and get temporary credentials for upload</p> <p>Create a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for file creation. If a folder path is provided and does not exist, GDS creates the folder path in the appropriate account automatically.</p>"},{"location":"libgds/docs/FilesApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    body = libica.openapi.libgds.CreateFileRequest() # CreateFileRequest | \ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\nupload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional)\n\n    try:\n        # Create a file entry in GDS and get temporary credentials for upload\n        api_response = api_instance.create_file(body, include=include, upload_part_count=upload_part_count)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;create_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes body CreateFileRequest include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional]"},{"location":"libgds/docs/FilesApi/#return-type_4","title":"Return type","text":"<p>FileWriteableResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 Created new File. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new File doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#delete_file","title":"delete_file","text":"<p>delete_file(file_id)</p> <p>Permanently delete a file</p> <p>Permanently delete a file entry and its underlying content</p>"},{"location":"libgds/docs/FilesApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to delete.\n\n    try:\n        # Permanently delete a file\n        api_instance.delete_file(file_id)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;delete_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to delete."},{"location":"libgds/docs/FilesApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"libgds/docs/FilesApi/#authorization_5","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: text/plain, application/json, text/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 No Content. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#get_file","title":"get_file","text":"<p>FileResponse get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude, include=include)</p> <p>Get details about a file, including a pre-signed URL for download</p> <p>Get information and details for the specified file ID, including metadata and a pre-signed URL for file download. The URL can be used as a curl command or directly with S3.</p>"},{"location":"libgds/docs/FilesApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to retrieve.\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\npresigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.              Possible values: Attachment, Inline, Browser (optional)\ninclude_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional)\nmetadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional)\nmetadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\n\n    try:\n        # Get details about a file, including a pre-signed URL for download\n        api_response = api_instance.get_file(file_id, tenant_id=tenant_id, presigned_url_mode=presigned_url_mode, include_volume_metadata=include_volume_metadata, metadata_include=metadata_include, metadata_exclude=metadata_exclude, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;get_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.              Possible values: Attachment, Inline, Browser [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional]"},{"location":"libgds/docs/FilesApi/#return-type_6","title":"Return type","text":"<p>FileResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_6","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#list_files","title":"list_files","text":"<p>FileListResponse list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)</p> <p>Get a list of files</p> <p>Given a volumeId or volume name, get a list of files accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items</p>"},{"location":"libgds/docs/FilesApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    volume_id = ['volume_id_example'] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional)\nvolume_name = ['volume_name_example'] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional)\npath = ['path_example'] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional)\nis_uploaded = True # bool | Optional field to filter by Uploaded files (optional)\narchive_status = 'archive_status_example' # str | Optional field that specifies comma-separated Archive Statuses to include in the list (optional)\nrecursive = True # bool | Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths (optional)\npresigned_url_mode = 'presigned_url_mode_example' # str | Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.  Possible values: Attachment, Inline, Browser (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, PresignedUrl, InheritedAcl (optional)\npage_size = 56 # int | START_DESC END_DESC (optional)\npage_token = 'page_token_example' # str | START_DESC END_DESC (optional)\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\nmetadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional)\nmetadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional)\n\n    try:\n        # Get a list of files\n        api_response = api_instance.list_files(volume_id=volume_id, volume_name=volume_name, path=path, is_uploaded=is_uploaded, archive_status=archive_status, recursive=recursive, presigned_url_mode=presigned_url_mode, include=include, page_size=page_size, page_token=page_token, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;list_files: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] is_uploaded bool Optional field to filter by Uploaded files [optional] archive_status str Optional field that specifies comma-separated Archive Statuses to include in the list [optional] recursive bool Optional field to specify if files should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.  Possible values: Attachment, Inline, Browser [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, PresignedUrl, InheritedAcl [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]"},{"location":"libgds/docs/FilesApi/#return-type_7","title":"Return type","text":"<p>FileListResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_7","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#list_volume_files","title":"list_volume_files","text":"<p>VolumeFileListResponse list_volume_files(body)</p> <p>Get a list of volume files</p> <p>Gets file list by volume ID and an array of file IDs. The default sort returned is alphabetical, ascending</p>"},{"location":"libgds/docs/FilesApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    body = libica.openapi.libgds.VolumeFileListRequest() # VolumeFileListRequest | \n\n    try:\n        # Get a list of volume files\n        api_response = api_instance.list_volume_files(body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;list_volume_files: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes body VolumeFileListRequest"},{"location":"libgds/docs/FilesApi/#return-type_8","title":"Return type","text":"<p>VolumeFileListResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_8","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#unarchive_file","title":"unarchive_file","text":"<p>FileResponse unarchive_file(file_id, body)</p> <p>Unarchive a file</p> <p>Unarchive a file from a lower storage cost tier.</p>"},{"location":"libgds/docs/FilesApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to be unarchived.\nbody = libica.openapi.libgds.FileUnarchiveRequest() # FileUnarchiveRequest | \n\n    try:\n        # Unarchive a file\n        api_response = api_instance.unarchive_file(file_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;unarchive_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to be unarchived. body FileUnarchiveRequest"},{"location":"libgds/docs/FilesApi/#return-type_9","title":"Return type","text":"<p>FileResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_9","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 409 Conflict. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FilesApi/#update_file","title":"update_file","text":"<p>FileWriteableResponse update_file(file_id, include=include, upload_part_count=upload_part_count, body=body)</p> <p>Update a file entry in GDS and get temporary credentials for upload</p> <p>Update a file entry in GDS. Returns temporary credentials and presigned url(s) for file upload directly to S3 when the include=objectStoreAccess parameter is used. Note that the currently supported changes to the file resource are updating the file type and the underlying content.</p>"},{"location":"libgds/docs/FilesApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FilesApi(api_client)\n    file_id = 'file_id_example' # str | Unique identifier for the file to be updated.\ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\nupload_part_count = 56 # int | Optional number of parts for the presigned url for uploads (1 - 10000) (optional)\nbody = libica.openapi.libgds.UpdateFileRequest() # UpdateFileRequest |  (optional)\n\n    try:\n        # Update a file entry in GDS and get temporary credentials for upload\n        api_response = api_instance.update_file(file_id, include=include, upload_part_count=upload_part_count, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FilesApi-&gt;update_file: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FilesApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes file_id str Unique identifier for the file to be updated. include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional] upload_part_count int Optional number of parts for the presigned url for uploads (1 - 10000) [optional] body UpdateFileRequest [optional]"},{"location":"libgds/docs/FilesApi/#return-type_10","title":"Return type","text":"<p>FileWriteableResponse</p>"},{"location":"libgds/docs/FilesApi/#authorization_10","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FilesApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FilesApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 File not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FolderArchiveRequest/","title":"FolderArchiveRequest","text":"<p>FolderArchiveRequest to specify the Storage Tier</p>"},{"location":"libgds/docs/FolderArchiveRequest/#properties","title":"Properties","text":"Name Type Description Notes storage_tier FolderArchiveStorageTier <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderArchiveStorageTier/","title":"FolderArchiveStorageTier","text":""},{"location":"libgds/docs/FolderArchiveStorageTier/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderCopyOperationParameters/","title":"FolderCopyOperationParameters","text":"<p>Operation parameters for folder copy operations</p>"},{"location":"libgds/docs/FolderCopyOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes source_folder_urn str The Urn of the source folder for the copy operation [optional] target_folder_urn str The Urn of the target folder for the copy operation [optional] destination_folder_name str The folder name for the copied folder [optional] metadata_to_copy list[str] [optional] duplicate_file_action str [optional] copy_uploaded_files_only bool [optional] source_folder_id str [optional] target_folder_id str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderCopyRequest/","title":"FolderCopyRequest","text":""},{"location":"libgds/docs/FolderCopyRequest/#properties","title":"Properties","text":"Name Type Description Notes target_parent_folder_id str The parent folder into which the source folder will be copied. destination_folder_name str A new name for the destination folder. Required if target parent folder is the same as the destination folder.  When optional and not provided, the source folder name is used as the destination folder name. [optional] metadata_to_copy list[str] [optional] duplicate_file_action str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderDeleteOperationParameters/","title":"FolderDeleteOperationParameters","text":"<p>Operation parameters for folder delete operations</p>"},{"location":"libgds/docs/FolderDeleteOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes folder_urn str The Urn of the folder for the delete operation [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderListResponse/","title":"FolderListResponse","text":""},{"location":"libgds/docs/FolderListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[FolderResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderResponse/","title":"FolderResponse","text":""},{"location":"libgds/docs/FolderResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date &amp; time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date &amp; time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] migration_status str Status of the root folder migration status from v1 to v2 [optional] active_job_ids list[str] List of Jobs in Pending and In Progress status [optional] object_store_access ObjectStoreAccess [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderUnarchiveRequest/","title":"FolderUnarchiveRequest","text":""},{"location":"libgds/docs/FolderUnarchiveRequest/#properties","title":"Properties","text":"Name Type Description Notes restore_speed str The desired Restore Speed to move the Files in the Folder to the Standard Storage Tier. Valid values are Economy and Standard. <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderUpdateRequest/","title":"FolderUpdateRequest","text":""},{"location":"libgds/docs/FolderUpdateRequest/#properties","title":"Properties","text":"Name Type Description Notes metadata object Metadata about this folder and its contents [optional] acl list[str] Optional array to replace the acl on the resource. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FolderWriteableResponse/","title":"FolderWriteableResponse","text":""},{"location":"libgds/docs/FolderWriteableResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Folder [optional] name str The name of this Folder [optional] volume_id str The unique identifier for this Folder's Volume [optional] parent_folder_id str The unique identifier for this folder's parent folder [optional] volume_name str The name of this Folder's Volume [optional] tenant_id str The unique identifier for this Folders's Tenant [optional] sub_tenant_id str The unique identifier for this Folder's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Folder [optional] path str The (GDS) folder path to this Folder [optional] acl list[str] The list of directly specified Id(s) that have access to this Folder [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Folder [optional] time_created datetime The date &amp; time this Folder was created, in GDS [optional] created_by str The creator of this Folder [optional] time_modified datetime The date &amp; time this Folder was updated, in GDS [optional] modified_by str The updator of this Folder [optional] metadata object Metadata about this folder [optional] volume_metadata object Metadata about this folder's volume [optional] job_status JobStatus [optional] job_id str The job identifier for the current folder operation. Currently only being used for the delete folder operation. [optional] archive_job_storage_tier StorageTier [optional] migration_status str Status of the root folder migration status from v1 to v2 [optional] active_job_ids list[str] List of Jobs in Pending and In Progress status [optional] object_store_access ObjectStoreAccess [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/","title":"libica.openapi.libgds.FoldersApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description archive_folder POST /v1/folders/{folderId}:archive Archive a folder bulk_folder_update PATCH /v1/folders Updates list of folders with metadata bulk_metadata_folder_update PATCH /v1/folders/bulkMetadataFolderUpdate Updates list of folders with metadata complete_folder_session POST /v1/folders/{folderId}/sessions/{sessionId}:complete Complete a folder upload in GDS copy_folder POST /v1/folders/{folderId}:copy Copy a folder create_folder POST /v1/folders Create a folder in GDS and receive credentials for upload create_folder_session POST /v1/folders/{folderId}/sessions Create a session delete_folder DELETE /v1/folders/{folderId} Deletes a folder by id get_folder GET /v1/folders/{folderId} Get information about a folder in GDS. get_folder_job GET /v1/folders/{folderId}/jobs/{jobId} Get status of a folder job in GDS get_folder_session GET /v1/folders/{folderId}/sessions/{sessionId} Get status of a folder upload in GDS list_folders GET /v1/folders Get a list of folders unarchive_folder POST /v1/folders/{folderId}:unarchive Unarchive a folder update_folder PATCH /v1/folders/{folderId} Update a folder content or acl"},{"location":"libgds/docs/FoldersApi/#archive_folder","title":"archive_folder","text":"<p>FolderResponse archive_folder(folder_id, body)</p> <p>Archive a folder</p> <p>Archives a folder to a lower storage cost tier.</p>"},{"location":"libgds/docs/FoldersApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to be archived.\nbody = libica.openapi.libgds.FolderArchiveRequest() # FolderArchiveRequest | \n\n    try:\n        # Archive a folder\n        api_response = api_instance.archive_folder(folder_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;archive_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be archived. body FolderArchiveRequest"},{"location":"libgds/docs/FoldersApi/#return-type","title":"Return type","text":"<p>FolderResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#bulk_folder_update","title":"bulk_folder_update","text":"<p>BulkFolderUpdateResponse bulk_folder_update(body=body)</p> <p>Updates list of folders with metadata</p> <p>Updates list of folders with metadata</p>"},{"location":"libgds/docs/FoldersApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    body = libica.openapi.libgds.BulkFolderUpdateRequest() # BulkFolderUpdateRequest |  (optional)\n\n    try:\n        # Updates list of folders with metadata\n        api_response = api_instance.bulk_folder_update(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;bulk_folder_update: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes body BulkFolderUpdateRequest [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_1","title":"Return type","text":"<p>BulkFolderUpdateResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: text/plain, application/json, text/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#bulk_metadata_folder_update","title":"bulk_metadata_folder_update","text":"<p>JobResponse bulk_metadata_folder_update(body=body)</p> <p>Updates list of folders with metadata</p> <p>Updates list of folders with metadata</p>"},{"location":"libgds/docs/FoldersApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    body = libica.openapi.libgds.BulkFolderMetadataUpdateRequest() # BulkFolderMetadataUpdateRequest |  (optional)\n\n    try:\n        # Updates list of folders with metadata\n        api_response = api_instance.bulk_metadata_folder_update(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;bulk_metadata_folder_update: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes body BulkFolderMetadataUpdateRequest [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_2","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: text/plain, application/json, text/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 202 Accepted - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#complete_folder_session","title":"complete_folder_session","text":"<p>SessionResponse complete_folder_session(folder_id, session_id, body)</p> <p>Complete a folder upload in GDS</p> <p>Complete a folder upload in GDS.</p>"},{"location":"libgds/docs/FoldersApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session.\nsession_id = 'session_id_example' # str | The id of the upload session\nbody = libica.openapi.libgds.CompleteSessionRequest() # CompleteSessionRequest | The request body\n\n    try:\n        # Complete a folder upload in GDS\n        api_response = api_instance.complete_folder_session(folder_id, session_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;complete_folder_session: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session body CompleteSessionRequest The request body"},{"location":"libgds/docs/FoldersApi/#return-type_3","title":"Return type","text":"<p>SessionResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Completed upload session. - 202 Upload session in progress. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#copy_folder","title":"copy_folder","text":"<p>JobResponse copy_folder(folder_id, body, tenant_id=tenant_id)</p> <p>Copy a folder</p> <p>Copy a folder into a target parent folder</p>"},{"location":"libgds/docs/FoldersApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to be copied.\nbody = libica.openapi.libgds.FolderCopyRequest() # FolderCopyRequest | \ntenant_id = 'tenant_id_example' # str | Optional parameter to copy from a shared folder in another tenant (optional)\n\n    try:\n        # Copy a folder\n        api_response = api_instance.copy_folder(folder_id, body, tenant_id=tenant_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;copy_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be copied. body FolderCopyRequest tenant_id str Optional parameter to copy from a shared folder in another tenant [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_4","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#create_folder","title":"create_folder","text":"<p>FolderWriteableResponse create_folder(body, include=include)</p> <p>Create a folder in GDS and receive credentials for upload</p> <p>Create a folder entry in GDS. Returns temporary credentials for folder upload directly to S3 when the include=objectStoreAccess parameter is used. Volume ID or volume name is required for folder creation. If a folder path is provided and does not exist, GDS automatically creates the folder path in the appropriate account.</p>"},{"location":"libgds/docs/FoldersApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    body = libica.openapi.libgds.CreateFolderRequest() # CreateFolderRequest | \ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\n\n    try:\n        # Create a folder in GDS and receive credentials for upload\n        api_response = api_instance.create_folder(body, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;create_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes body CreateFolderRequest include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_5","title":"Return type","text":"<p>FolderWriteableResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_5","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 201 Created new Folder. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Folder doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#create_folder_session","title":"create_folder_session","text":"<p>CreateSessionResponse create_folder_session(folder_id, body)</p> <p>Create a session</p> <p>Create a session and credentials used for accessing the object store directly</p>"},{"location":"libgds/docs/FoldersApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | \nbody = libica.openapi.libgds.CreateSessionRequest() # CreateSessionRequest | \n\n    try:\n        # Create a session\n        api_response = api_instance.create_folder_session(folder_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;create_folder_session: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes folder_id str body CreateSessionRequest"},{"location":"libgds/docs/FoldersApi/#return-type_6","title":"Return type","text":"<p>CreateSessionResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_6","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 Created - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 0 Error - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#delete_folder","title":"delete_folder","text":"<p>FolderResponse delete_folder(folder_id)</p> <p>Deletes a folder by id</p>"},{"location":"libgds/docs/FoldersApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to be deleted.\n\n    try:\n        # Deletes a folder by id\n        api_response = api_instance.delete_folder(folder_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;delete_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be deleted."},{"location":"libgds/docs/FoldersApi/#return-type_7","title":"Return type","text":"<p>FolderResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_7","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#get_folder","title":"get_folder","text":"<p>FolderResponse get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, include_active_jobs=include_active_jobs, metadata_include=metadata_include, metadata_exclude=metadata_exclude, include=include)</p> <p>Get information about a folder in GDS.</p> <p>Get information for the specified folder ID.</p>"},{"location":"libgds/docs/FoldersApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to retrieve.\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\ninclude_volume_metadata = True # bool | Optional parameter to return volume's metadata (optional)\ninclude_active_jobs = True # bool | Optional parameter to return active jobs associated to folder (optional)\nmetadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional)\nmetadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\n\n    try:\n        # Get information about a folder in GDS.\n        api_response = api_instance.get_folder(folder_id, tenant_id=tenant_id, include_volume_metadata=include_volume_metadata, include_active_jobs=include_active_jobs, metadata_include=metadata_include, metadata_exclude=metadata_exclude, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;get_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_volume_metadata bool Optional parameter to return volume's metadata [optional] include_active_jobs bool Optional parameter to return active jobs associated to folder [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional] include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_8","title":"Return type","text":"<p>FolderResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_8","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#get_folder_job","title":"get_folder_job","text":"<p>JobResponse get_folder_job(folder_id, job_id)</p> <p>Get status of a folder job in GDS</p> <p>Get status of a folder job in GDS.</p>"},{"location":"libgds/docs/FoldersApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the job.\njob_id = 'job_id_example' # str | The id of the job\n\n    try:\n        # Get status of a folder job in GDS\n        api_response = api_instance.get_folder_job(folder_id, job_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;get_folder_job: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the job. job_id str The id of the job"},{"location":"libgds/docs/FoldersApi/#return-type_9","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_9","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 Returned job. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#get_folder_session","title":"get_folder_session","text":"<p>SessionResponse get_folder_session(folder_id, session_id)</p> <p>Get status of a folder upload in GDS</p> <p>Get status of a folder upload in GDS.</p>"},{"location":"libgds/docs/FoldersApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder related to the upload session.\nsession_id = 'session_id_example' # str | The id of the upload session\n\n    try:\n        # Get status of a folder upload in GDS\n        api_response = api_instance.get_folder_session(folder_id, session_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;get_folder_session: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder related to the upload session. session_id str The id of the upload session"},{"location":"libgds/docs/FoldersApi/#return-type_10","title":"Return type","text":"<p>SessionResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_10","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 Completed upload session. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#list_folders","title":"list_folders","text":"<p>FolderListResponse list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)</p> <p>Get a list of folders</p> <p>Given a volumeId or volume name, get a list of folders accessible by the JWT. The default sort returned is alphabetical, ascending. The default page size is 10 items</p>"},{"location":"libgds/docs/FoldersApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    volume_id = ['volume_id_example'] # list[str] | Optional field that specifies comma-separated volume IDs to include in the list (optional)\nvolume_name = ['volume_name_example'] # list[str] | Optional field that specifies comma-separated volume names to include in the list (optional)\npath = ['path_example'] # list[str] | Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). (optional)\njob_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional)\nacls = ['acls_example'] # list[str] | Optional field that specifies comma-separated acls to include in the list (optional)\nrecursive = True # bool | Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths (optional)\npage_size = 56 # int | START_DESC END_DESC (optional)\npage_token = 'page_token_example' # str | START_DESC END_DESC (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl (optional)\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\nmetadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional)\nmetadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional)\n\n    try:\n        # Get a list of folders\n        api_response = api_instance.list_folders(volume_id=volume_id, volume_name=volume_name, path=path, job_statuses=job_statuses, acls=acls, recursive=recursive, page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;list_folders: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes volume_id list[str] Optional field that specifies comma-separated volume IDs to include in the list [optional] volume_name list[str] Optional field that specifies comma-separated volume names to include in the list [optional] path list[str] Optional field that specifies comma-separated paths to include in the list. Value can use wildcards (e.g. /a/b/c/*) or exact matches (e.g. /a/b/c/d/). [optional] job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] acls list[str] Optional field that specifies comma-separated acls to include in the list [optional] recursive bool Optional field to specify if folders should be returned recursively in and under the specified paths, or only directly in the specified paths [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_11","title":"Return type","text":"<p>FolderListResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_11","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#unarchive_folder","title":"unarchive_folder","text":"<p>FolderResponse unarchive_folder(folder_id, body)</p> <p>Unarchive a folder</p> <p>Unarchive a folder from a lower storage cost tier.</p>"},{"location":"libgds/docs/FoldersApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to be unarchived.\nbody = libica.openapi.libgds.FolderUnarchiveRequest() # FolderUnarchiveRequest | \n\n    try:\n        # Unarchive a folder\n        api_response = api_instance.unarchive_folder(folder_id, body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;unarchive_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be unarchived. body FolderUnarchiveRequest"},{"location":"libgds/docs/FoldersApi/#return-type_12","title":"Return type","text":"<p>FolderResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_12","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/FoldersApi/#update_folder","title":"update_folder","text":"<p>FolderWriteableResponse update_folder(folder_id, include=include, body=body)</p> <p>Update a folder content or acl</p> <p>Update an existing folder in GDS and return upload credentials for that folder. Changes to the folder name and other metadata are not supported at this time.  Optionally overwrite the acl for this folder if acl is provided in the request.</p>"},{"location":"libgds/docs/FoldersApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.FoldersApi(api_client)\n    folder_id = 'folder_id_example' # str | Unique identifier for the folder to be updated.\ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\nbody = libica.openapi.libgds.FolderUpdateRequest() # FolderUpdateRequest |  (optional)\n\n    try:\n        # Update a folder content or acl\n        api_response = api_instance.update_folder(folder_id, include=include, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling FoldersApi-&gt;update_folder: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/FoldersApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes folder_id str Unique identifier for the folder to be updated. include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional] body FolderUpdateRequest [optional]"},{"location":"libgds/docs/FoldersApi/#return-type_13","title":"Return type","text":"<p>FolderWriteableResponse</p>"},{"location":"libgds/docs/FoldersApi/#authorization_13","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/FoldersApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/FoldersApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Folder not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/GracePeriodEndAction/","title":"GracePeriodEndAction","text":""},{"location":"libgds/docs/GracePeriodEndAction/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobListResponse/","title":"JobListResponse","text":""},{"location":"libgds/docs/JobListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[JobResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobOperationParameters/","title":"JobOperationParameters","text":"<p>Container for XXXOperationParameters objects, which have additional details related to the specific job operation type.  Only one object will be populated.</p>"},{"location":"libgds/docs/JobOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes folder_copy FolderCopyOperationParameters [optional] folder_delete FolderDeleteOperationParameters [optional] volume_migration VolumeMigrationOperationParameters [optional] file_copy FileCopyOperationParameters [optional] bulk_metadata_update BulkMetadataUpdateOperationParameters [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobOperationType/","title":"JobOperationType","text":"<p>The valid job operation type values for resources in GDS  IMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK</p>"},{"location":"libgds/docs/JobOperationType/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobOutput/","title":"JobOutput","text":""},{"location":"libgds/docs/JobOutput/#properties","title":"Properties","text":"Name Type Description Notes folder_copy FileCopyOutput [optional] file_copy FileCopyOutput [optional] folder_metadata_update_output MetadataUpdateOutput [optional] file_metadata_update_output MetadataUpdateOutput [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobProgressStatus/","title":"JobProgressStatus","text":"<p>The valid Job Status values for folders in GDS.  IMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK</p>"},{"location":"libgds/docs/JobProgressStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobResponse/","title":"JobResponse","text":""},{"location":"libgds/docs/JobResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Job [optional] parent_folder_urn str The Universal Resource Name of the parent folder associated with the Job [optional] operation_type JobOperationType [optional] job_type str [optional] operation_parameters JobOperationParameters [optional] results JobOutput [optional] progress_status JobProgressStatus [optional] time_created datetime The date &amp; time this Folder was created, in GDS [optional] created_by str The creator of this Job [optional] time_modified datetime The date &amp; time this Job was updated, in GDS [optional] time_completed datetime The date &amp; time this Job was completed, in GDS [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobStatus/","title":"JobStatus","text":"<p>This enum was originally created to store the type of job on a folder or file entity.   The Job entity is now used to track this information for copy operations, with the Illumina.Gds.Api.Models.Enums.JobOperationType   and Illumina.Gds.Api.Models.Enums.JobProgressStatus used to record the type and progress status of the job.  IMPORTANT - Please consider backward compatibility before adding a new enum value. Adding a new enum value will break the existing client using swagger SDK</p>"},{"location":"libgds/docs/JobStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/JobsApi/","title":"libica.openapi.libgds.JobsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description abort_job POST /v1/jobs/{jobId}:abort Abort a job in GDS. get_job GET /v1/jobs/{jobId} Get information about a job in GDS. list_jobs GET /v1/jobs Get a list of jobs for a given folder"},{"location":"libgds/docs/JobsApi/#abort_job","title":"abort_job","text":"<p>JobResponse abort_job(job_id)</p> <p>Abort a job in GDS.</p> <p>Abort the specified job ID.</p>"},{"location":"libgds/docs/JobsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.JobsApi(api_client)\n    job_id = 'job_id_example' # str | Unique identifier for the job to be aborted.\n\n    try:\n        # Abort a job in GDS.\n        api_response = api_instance.abort_job(job_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling JobsApi-&gt;abort_job: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/JobsApi/#parameters","title":"Parameters","text":"Name Type Description Notes job_id str Unique identifier for the job to be aborted."},{"location":"libgds/docs/JobsApi/#return-type","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/JobsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/JobsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/JobsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Job not found. - 409 Conflict. - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/JobsApi/#get_job","title":"get_job","text":"<p>JobResponse get_job(job_id, tenant_id=tenant_id, include_errors=include_errors)</p> <p>Get information about a job in GDS.</p> <p>Get information for the specified job ID.</p>"},{"location":"libgds/docs/JobsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.JobsApi(api_client)\n    job_id = 'job_id_example' # str | Unique identifier for the job to retrieve.\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\ninclude_errors = True # bool |  (optional)\n\n    try:\n        # Get information about a job in GDS.\n        api_response = api_instance.get_job(job_id, tenant_id=tenant_id, include_errors=include_errors)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling JobsApi-&gt;get_job: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/JobsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes job_id str Unique identifier for the job to retrieve. tenant_id str Optional parameter to see shared data in another tenant [optional] include_errors bool [optional]"},{"location":"libgds/docs/JobsApi/#return-type_1","title":"Return type","text":"<p>JobResponse</p>"},{"location":"libgds/docs/JobsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/JobsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/JobsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Job not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/JobsApi/#list_jobs","title":"list_jobs","text":"<p>JobListResponse list_jobs(folder_id, job_statuses=job_statuses, page_size=page_size, page_token=page_token, include=include)</p> <p>Get a list of jobs for a given folder</p> <p>Given a folder id, get a list of jobs accessible by the JWT. The default sort returned is by job progress status. The default page size is 10 items</p>"},{"location":"libgds/docs/JobsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.JobsApi(api_client)\n    folder_id = 'folder_id_example' # str | \njob_statuses = 'job_statuses_example' # str | Optional field that specifies comma-separated JobStatuses to include in the list (optional)\npage_size = 56 # int | START_DESC END_DESC (optional)\npage_token = 'page_token_example' # str | START_DESC END_DESC (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl (optional)\n\n    try:\n        # Get a list of jobs for a given folder\n        api_response = api_instance.list_jobs(folder_id, job_statuses=job_statuses, page_size=page_size, page_token=page_token, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling JobsApi-&gt;list_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/JobsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes folder_id str job_statuses str Optional field that specifies comma-separated JobStatuses to include in the list [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl [optional]"},{"location":"libgds/docs/JobsApi/#return-type_2","title":"Return type","text":"<p>JobListResponse</p>"},{"location":"libgds/docs/JobsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/JobsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/JobsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/MetadataUpdateOutput/","title":"MetadataUpdateOutput","text":""},{"location":"libgds/docs/MetadataUpdateOutput/#properties","title":"Properties","text":"Name Type Description Notes total_count int [optional] processed_count int [optional] items_failed_count int [optional] items_failed list[BulkFailedItem] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/MetadataUpdateRequest/","title":"MetadataUpdateRequest","text":"<p>Metadata to update and/or delete.</p>"},{"location":"libgds/docs/MetadataUpdateRequest/#properties","title":"Properties","text":"Name Type Description Notes update_metadata object Metadata to update. [optional] delete_metadata object Metadata to delete. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/","title":"ObjectStorageCredentialsResponse","text":"<p>The temporaryUploadCredentials/objectStorageCredentialsResponse will be deprecated. Use objectStoreAccess/awsS3TemporaryUploadCredentials instead.</p>"},{"location":"libgds/docs/ObjectStorageCredentialsResponse/#properties","title":"Properties","text":"Name Type Description Notes access_key str Access key for use with AWS S3 [optional] secret_key str Secret key for use with AWS S3 [optional] session_token str Token for use with AWS S3 [optional] region str AWS region the folder will/does reside in [optional] bucket_name str AWS bucket the folder will/does reside in [optional] service_url str Service URL for multi-regional support [optional] upload_location str AWS upload location for this folder [optional] expiration_date datetime expiration for temporary credentials [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/ObjectStoreAccess/","title":"ObjectStoreAccess","text":"<p>ObjectStoreAccess to get the temporaryCredentials per provider</p>"},{"location":"libgds/docs/ObjectStoreAccess/#properties","title":"Properties","text":"Name Type Description Notes session_id str [optional] aws_s3_temporary_upload_credentials AwsS3TemporaryUploadCredentials [optional] aws_s3_presigned_url_for_upload AwsS3PresignedUrlForUpload [optional] aws_s3_temporary_read_only_credentials AwsS3TemporaryReadOnlyCredentials [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/ObjectStoreSettings/","title":"ObjectStoreSettings","text":""},{"location":"libgds/docs/ObjectStoreSettings/#properties","title":"Properties","text":"Name Type Description Notes aws_s3 AWSS3ObjectStoreSetting [optional] secret_name str Platform credentials Name  Must provide either SecretId or SecretName [optional] secret_id str Platform credentials Id  Must provide either SecretId or SecretName [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/PartEtag/","title":"PartEtag","text":"<p>PartEtag</p>"},{"location":"libgds/docs/PartEtag/#properties","title":"Properties","text":"Name Type Description Notes part int Part number [optional] etag str Etag response for the part upload [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/PartInfo/","title":"PartInfo","text":"<p>PartInfo of multi parts presigned url for upload</p>"},{"location":"libgds/docs/PartInfo/#properties","title":"Properties","text":"Name Type Description Notes part int Part number to be applied to {part} in MultipartTemplate [optional] date str Date to be applied to {date} in MultipartTemplate [optional] date_time str DateTime to be applied to {datetime} in MultipartTemplate [optional] signature str Signature to be applied to {signature} in MultipartTemplate [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/SessionResponse/","title":"SessionResponse","text":""},{"location":"libgds/docs/SessionResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Session [optional] folder_urn str The Universal Resource Name of the Folder associated with the Session [optional] status SessionStatus [optional] time_created datetime The date &amp; time this Session was created, in GDS [optional] time_credentials_expire datetime The date &amp; time this upload session expires [optional] time_closed datetime The date &amp; time this Session was closed, in GDS [optional] time_completed datetime The date &amp; time this Session was completed, in GDS [optional] metadata object [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/SessionStatus/","title":"SessionStatus","text":""},{"location":"libgds/docs/SessionStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/StorageTier/","title":"StorageTier","text":"<p>StorageTier</p>"},{"location":"libgds/docs/StorageTier/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/UpdateFileRequest/","title":"UpdateFileRequest","text":""},{"location":"libgds/docs/UpdateFileRequest/#properties","title":"Properties","text":"Name Type Description Notes type str The new file type (e.g. \\\"text/plain\\\"). [optional] format str The File's Format [optional] format_edam str The File's Edam Format [optional] life_cycle FileLifeCycleSettings [optional] metadata object Metadata about this file and its contents [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/","title":"UpdateVolumeConfigurationRequest","text":""},{"location":"libgds/docs/UpdateVolumeConfigurationRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the volume object_store_settings ObjectStoreSettings <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/UpdateVolumeRequest/","title":"UpdateVolumeRequest","text":""},{"location":"libgds/docs/UpdateVolumeRequest/#properties","title":"Properties","text":"Name Type Description Notes metadata object Metadata about this volume and its contents [optional] life_cycle VolumeLifeCycleSettings [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationListResponse/","title":"VolumeConfigurationListResponse","text":""},{"location":"libgds/docs/VolumeConfigurationListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[VolumeConfigurationResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/","title":"VolumeConfigurationOnlineStatus","text":"<p>The valid Online Status values for Volume configurations in GDS</p>"},{"location":"libgds/docs/VolumeConfigurationOnlineStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationResponse/","title":"VolumeConfigurationResponse","text":""},{"location":"libgds/docs/VolumeConfigurationResponse/#properties","title":"Properties","text":"Name Type Description Notes name str Name for the volume configuration [optional] tenant_id str The unique identifier for this Volume Configuration's Tenant [optional] sub_tenant_id str The unique identifier for this Volume Configurations's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume Configuration [optional] online_status VolumeConfigurationOnlineStatus [optional] error_code str Error code returned from the object store [optional] error_message str Error message returned from the object store [optional] time_of_last_error datetime Timestamp of the last observed error. [optional] time_created datetime The date &amp; time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date &amp; time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] object_store_settings ObjectStoreSettings [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/","title":"libica.openapi.libgds.VolumeConfigurationsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_volume_configuration POST /v1/volumeconfigurations Create a volume configuration in GDS. delete_volume_configuration DELETE /v1/volumeconfigurations/{volumeConfigurationName} Deletes a volume configuration by Id or name get_volume_configuration GET /v1/volumeconfigurations/{volumeConfigurationName} Get information for the specified volume configuration name or Id list_volume_configurations GET /v1/volumeconfigurations Get a list of volumes validate_volume_configuration POST /v1/volumeconfigurations/{volumeConfigurationName}:validate Validate a volume configuration"},{"location":"libgds/docs/VolumeConfigurationsApi/#create_volume_configuration","title":"create_volume_configuration","text":"<p>VolumeConfigurationResponse create_volume_configuration(body)</p> <p>Create a volume configuration in GDS.</p> <p>Create a volume configuration in GDS. This contains the object store details that will be used to create volumes.</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumeConfigurationsApi(api_client)\n    body = libica.openapi.libgds.CreateVolumeConfigurationRequest() # CreateVolumeConfigurationRequest | \n\n    try:\n        # Create a volume configuration in GDS.\n        api_response = api_instance.create_volume_configuration(body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumeConfigurationsApi-&gt;create_volume_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters","title":"Parameters","text":"Name Type Description Notes body CreateVolumeConfigurationRequest"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type","title":"Return type","text":"<p>VolumeConfigurationResponse</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Created new Volume Configuration. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume configuration name doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#delete_volume_configuration","title":"delete_volume_configuration","text":"<p>VolumeResponse delete_volume_configuration(volume_configuration_name)</p> <p>Deletes a volume configuration by Id or name</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumeConfigurationsApi(api_client)\n    volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the Volume Configuration to be deleted.\n\n    try:\n        # Deletes a volume configuration by Id or name\n        api_response = api_instance.delete_volume_configuration(volume_configuration_name)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumeConfigurationsApi-&gt;delete_volume_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes volume_configuration_name str Unique name of the Volume Configuration to be deleted."},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_1","title":"Return type","text":"<p>VolumeResponse</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#get_volume_configuration","title":"get_volume_configuration","text":"<p>VolumeConfigurationResponse get_volume_configuration(volume_configuration_name)</p> <p>Get information for the specified volume configuration name or Id</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumeConfigurationsApi(api_client)\n    volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to retrieve information for.\n\n    try:\n        # Get information for the specified volume configuration name or Id\n        api_response = api_instance.get_volume_configuration(volume_configuration_name)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumeConfigurationsApi-&gt;get_volume_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to retrieve information for."},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_2","title":"Return type","text":"<p>VolumeConfigurationResponse</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#list_volume_configurations","title":"list_volume_configurations","text":"<p>VolumeConfigurationListResponse list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include)</p> <p>Get a list of volumes</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumeConfigurationsApi(api_client)\n    online_status = 'online_status_example' # str | Optional field that specifies the Online Status for Volume configurations included in the list.  If provided, the value must be Initializing, Ok, or Error. (optional)\npage_size = 56 # int | START_DESC END_DESC (optional)\npage_token = 'page_token_example' # str | START_DESC END_DESC (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl (optional)\n\n    try:\n        # Get a list of volumes\n        api_response = api_instance.list_volume_configurations(online_status=online_status, page_size=page_size, page_token=page_token, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumeConfigurationsApi-&gt;list_volume_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes online_status str Optional field that specifies the Online Status for Volume configurations included in the list.  If provided, the value must be Initializing, Ok, or Error. [optional] page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl [optional]"},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_3","title":"Return type","text":"<p>VolumeConfigurationListResponse</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Not Found - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#validate_volume_configuration","title":"validate_volume_configuration","text":"<p>VolumeConfigurationResponse validate_volume_configuration(volume_configuration_name)</p> <p>Validate a volume configuration</p> <p>Validate an existing volume configuration.</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumeConfigurationsApi(api_client)\n    volume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration to be validated.\n\n    try:\n        # Validate a volume configuration\n        api_response = api_instance.validate_volume_configuration(volume_configuration_name)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumeConfigurationsApi-&gt;validate_volume_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumeConfigurationsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes volume_configuration_name str Unique name of the volume configuration to be validated."},{"location":"libgds/docs/VolumeConfigurationsApi/#return-type_4","title":"Return type","text":"<p>VolumeConfigurationResponse</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumeConfigurationsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume configuration not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumeFileListRequest/","title":"VolumeFileListRequest","text":"<p>Request for listing files within a volume</p>"},{"location":"libgds/docs/VolumeFileListRequest/#properties","title":"Properties","text":"Name Type Description Notes volume_id str Volume identifier [optional] file_ids list[str] File identifiers to list [optional] include_presigned_url bool Optional parameter that returns presigned URL for each file when set to true [optional] presigned_url_mode str Optional parameter to specify presigned url's content-disposition. If not specified, the browser will determine the default behavior.  Possible values: Attachment, Inline, Browser [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeFileListResponse/","title":"VolumeFileListResponse","text":""},{"location":"libgds/docs/VolumeFileListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[FileResponse] Retrieved files [optional] item_success_count int Number of items that succeeded [optional] item_failed_count int Number of items that failed [optional] items_failed list[BulkFailedItem] Item failures with error details [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeLifeCycleSettings/","title":"VolumeLifeCycleSettings","text":""},{"location":"libgds/docs/VolumeLifeCycleSettings/#properties","title":"Properties","text":"Name Type Description Notes grace_period_days int Number of days before the files associated to this volume expires [optional] grace_period_end_action GracePeriodEndAction [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeListResponse/","title":"VolumeListResponse","text":""},{"location":"libgds/docs/VolumeListResponse/#properties","title":"Properties","text":"Name Type Description Notes items list[VolumeResponse] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeMigrationOperationParameters/","title":"VolumeMigrationOperationParameters","text":"<p>Operation parameters for volume migration operations</p>"},{"location":"libgds/docs/VolumeMigrationOperationParameters/#properties","title":"Properties","text":"Name Type Description Notes volume_id str The volume id for the migration operation [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeResponse/","title":"VolumeResponse","text":""},{"location":"libgds/docs/VolumeResponse/#properties","title":"Properties","text":"Name Type Description Notes id str A unique identifier for this Volume [optional] name str The name of this Volume [optional] tenant_id str The unique identifier for this Volume's Tenant [optional] sub_tenant_id str The unique identifier for this Volume's Sub Tenant [optional] urn str The Universal Resource Name, unique to this Volume [optional] root_folder_id str The unique identifier for the root Folder of this Volume [optional] root_key_prefix str The base bucket location for Volumes associated with custom VolumeConfigurations otherwise this field is not set. [optional] volume_configuration_name str Unique name of the Volume configuration for this Volume.  This field will only be set if a custom Volume configuration is associated. [optional] inherited_acl list[str] The inherited list of Id(s) that have access to this Volume [optional] time_created datetime The date &amp; time this Volume was created, in GDS [optional] created_by str The creator of this Volume [optional] time_modified datetime The date &amp; time this Volume was updated, in GDS [optional] modified_by str The updator of this Volume [optional] job_status JobStatus [optional] metadata object Metadata about this Volume [optional] life_cycle VolumeLifeCycleSettings [optional] migration_status str Status of the root folder migration status from v1 to v2 [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumeSettingStatus/","title":"VolumeSettingStatus","text":"<p>The valid Online Status values for Volume configurations in GDS</p>"},{"location":"libgds/docs/VolumeSettingStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libgds/docs/VolumesApi/","title":"libica.openapi.libgds.VolumesApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_volume POST /v1/volumes Create a volume in GDS and receive temporary credentials for upload delete_volume DELETE /v1/volumes/{volumeId} Deletes a volume by Id get_volume GET /v1/volumes/{volumeId} Get information for the specified volume ID or volume name list_volumes GET /v1/volumes Get a list of volumes update_volume PATCH /v1/volumes/{volumeId} Update a volume content"},{"location":"libgds/docs/VolumesApi/#create_volume","title":"create_volume","text":"<p>CreateVolumeResponse create_volume(body, include=include)</p> <p>Create a volume in GDS and receive temporary credentials for upload</p> <p>Create a volume in GDS to hold folders and files. Returns upload credentials to the root folder of the volume when the include=objectStoreAccess parameter is used. You must create a volume prior to uploading files or folders.</p>"},{"location":"libgds/docs/VolumesApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumesApi(api_client)\n    body = libica.openapi.libgds.CreateVolumeRequest() # CreateVolumeRequest | \ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\n\n    try:\n        # Create a volume in GDS and receive temporary credentials for upload\n        api_response = api_instance.create_volume(body, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumesApi-&gt;create_volume: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumesApi/#parameters","title":"Parameters","text":"Name Type Description Notes body CreateVolumeRequest include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional]"},{"location":"libgds/docs/VolumesApi/#return-type","title":"Return type","text":"<p>CreateVolumeResponse</p>"},{"location":"libgds/docs/VolumesApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumesApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumesApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Created new Volume. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 409 A conflict was found. Make sure the new Volume doesn't already exist. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumesApi/#delete_volume","title":"delete_volume","text":"<p>VolumeResponse delete_volume(volume_id, purge_object_store_data=purge_object_store_data)</p> <p>Deletes a volume by Id</p>"},{"location":"libgds/docs/VolumesApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumesApi(api_client)\n    volume_id = 'volume_id_example' # str | Unique identifier for the Volume to be deleted.\npurge_object_store_data = True # bool | Optional and for BYOB only. If true, the volume's data in object storage will be erased.              This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. (optional)\n\n    try:\n        # Deletes a volume by Id\n        api_response = api_instance.delete_volume(volume_id, purge_object_store_data=purge_object_store_data)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumesApi-&gt;delete_volume: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumesApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes volume_id str Unique identifier for the Volume to be deleted. purge_object_store_data bool Optional and for BYOB only. If true, the volume's data in object storage will be erased.              This field is ignored for non-BYOB volumes where the object store data is always removed upon deleting the volume. [optional]"},{"location":"libgds/docs/VolumesApi/#return-type_1","title":"Return type","text":"<p>VolumeResponse</p>"},{"location":"libgds/docs/VolumesApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumesApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumesApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 202 Accepted. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 409 Conflict - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumesApi/#get_volume","title":"get_volume","text":"<p>VolumeResponse get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)</p> <p>Get information for the specified volume ID or volume name</p>"},{"location":"libgds/docs/VolumesApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumesApi(api_client)\n    volume_id = 'volume_id_example' # str | Unique identifier for the volume to retrieve information for.\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\nmetadata_include = 'metadata_include_example' # str | Optional parameter to specify comma separated patterns to include metadata by their field names. (optional)\nmetadata_exclude = 'metadata_exclude_example' # str | Optional parameter to specify comma separated patterns to exclude metadata by their field names. (optional)\n\n    try:\n        # Get information for the specified volume ID or volume name\n        api_response = api_instance.get_volume(volume_id, tenant_id=tenant_id, metadata_include=metadata_include, metadata_exclude=metadata_exclude)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumesApi-&gt;get_volume: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumesApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes volume_id str Unique identifier for the volume to retrieve information for. tenant_id str Optional parameter to see shared data in another tenant [optional] metadata_include str Optional parameter to specify comma separated patterns to include metadata by their field names. [optional] metadata_exclude str Optional parameter to specify comma separated patterns to exclude metadata by their field names. [optional]"},{"location":"libgds/docs/VolumesApi/#return-type_2","title":"Return type","text":"<p>VolumeResponse</p>"},{"location":"libgds/docs/VolumesApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumesApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumesApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumesApi/#list_volumes","title":"list_volumes","text":"<p>VolumeListResponse list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name)</p> <p>Get a list of volumes</p> <p>Get a list of volumes accessible by the current JWT token\u2019s tenant ID in GDS. The default sort returned is alphabetical, ascending. The default page size is 10 items.</p>"},{"location":"libgds/docs/VolumesApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumesApi(api_client)\n    page_size = 56 # int | START_DESC END_DESC (optional)\npage_token = 'page_token_example' # str | START_DESC END_DESC (optional)\ninclude = 'include_example' # str | Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl (optional)\ntenant_id = 'tenant_id_example' # str | Optional parameter to see shared data in another tenant (optional)\nvolume_configuration_name = 'volume_configuration_name_example' # str | Unique name of the volume configuration (optional)\n\n    try:\n        # Get a list of volumes\n        api_response = api_instance.list_volumes(page_size=page_size, page_token=page_token, include=include, tenant_id=tenant_id, volume_configuration_name=volume_configuration_name)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumesApi-&gt;list_volumes: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumesApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes page_size int START_DESC END_DESC [optional] page_token str START_DESC END_DESC [optional] include str Optionally include additional fields in the response. Multiple fields can be included by comma-separation.  Possible values: TotalItemCount, InheritedAcl [optional] tenant_id str Optional parameter to see shared data in another tenant [optional] volume_configuration_name str Unique name of the volume configuration [optional]"},{"location":"libgds/docs/VolumesApi/#return-type_3","title":"Return type","text":"<p>VolumeListResponse</p>"},{"location":"libgds/docs/VolumesApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumesApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumesApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libgds/docs/VolumesApi/#update_volume","title":"update_volume","text":"<p>VolumeResponse update_volume(volume_id, include=include, body=body)</p> <p>Update a volume content</p> <p>Update an existing volume in GDS and return upload credentials for that volume. </p>"},{"location":"libgds/docs/VolumesApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libgds\nfrom libica.openapi.libgds.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libgds.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libgds.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libgds.VolumesApi(api_client)\n    volume_id = 'volume_id_example' # str | Unique identifier for the volume to be updated.\ninclude = 'include_example' # str | Optionally include additional fields in the response.              Possible values: ObjectStoreAccess (optional)\nbody = libica.openapi.libgds.UpdateVolumeRequest() # UpdateVolumeRequest |  (optional)\n\n    try:\n        # Update a volume content\n        api_response = api_instance.update_volume(volume_id, include=include, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling VolumesApi-&gt;update_volume: %s\\n\" % e)\n</code></pre>"},{"location":"libgds/docs/VolumesApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes volume_id str Unique identifier for the volume to be updated. include str Optionally include additional fields in the response.              Possible values: ObjectStoreAccess [optional] body UpdateVolumeRequest [optional]"},{"location":"libgds/docs/VolumesApi/#return-type_4","title":"Return type","text":"<p>VolumeResponse</p>"},{"location":"libgds/docs/VolumesApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libgds/docs/VolumesApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libgds/docs/VolumesApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Success. - 400 Bad request. - 401 Unauthorized. - 403 Forbidden. - 404 Volume not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/","title":"libica.openapi.libtes","text":"<p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p> <p>The <code>libica.openapi.libtes</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: v1</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T20:38:44.457811+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"libtes/#requirements","title":"Requirements.","text":"<p>Python 2.7 and 3.4+</p>"},{"location":"libtes/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.15</li> <li>six &gt;= 1.10</li> <li>certifi</li> <li>python-dateutil</li> </ul>"},{"location":"libtes/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.libtes, you can run the following:</p> <pre><code>from __future__ import print_function\n\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    run_id = 'run_id_example' # str | \n\n    try:\n        # Abort a task run\n        api_response = api_instance.abort_task_run(run_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;abort_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Class Method HTTP request Description TaskRunsApi abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run TaskRunsApi create_task_run POST /v1/tasks/runs Create and launch a task run TaskRunsApi get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run TaskRunsApi heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run TaskRunsApi list_task_runs GET /v1/tasks/runs Get a list of task runs TaskVersionsApi create_task_version POST /v1/tasks/{taskId}/versions Create a task version TaskVersionsApi get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version TaskVersionsApi launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version TaskVersionsApi list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions TaskVersionsApi update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties TasksApi create_task POST /v1/tasks Create a Task TasksApi get_task GET /v1/tasks/{taskId} Get the details of a Task TasksApi list_tasks GET /v1/tasks Get a list of tasks TasksApi update_task PATCH /v1/tasks/{taskId} Update an existing task."},{"location":"libtes/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AgentTaskRun</li> <li>CheckOutQueuedTaskRunRequest</li> <li>Cluster</li> <li>ClusterSummary</li> <li>ClusterSummaryPagedItems</li> <li>ContainerState</li> <li>ContainerStateRunning</li> <li>ContainerStateTerminated</li> <li>ContainerStateWaiting</li> <li>ContainerStatus</li> <li>CreateClusterRequest</li> <li>CreateTaskRequest</li> <li>CreateTaskRunRequest</li> <li>CreateTaskVersionRequest</li> <li>Credentials</li> <li>Environment</li> <li>ErrorResponse</li> <li>Execution</li> <li>HeartbeatTaskRunRequest</li> <li>Image</li> <li>InputMountMappingWithCreds</li> <li>InputStreamSettings</li> <li>LaunchTaskRequest</li> <li>MountMappingWithCreds</li> <li>Resources</li> <li>SystemFiles</li> <li>Task</li> <li>TaskRun</li> <li>TaskRunHeartbeat</li> <li>TaskRunLogs</li> <li>TaskRunSummary</li> <li>TaskRunSummaryPagedItems</li> <li>TaskSummary</li> <li>TaskSummaryPagedItems</li> <li>TaskVersion</li> <li>TaskVersionSummary</li> <li>TaskVersionSummaryPagedItems</li> <li>UpdateClusterRequest</li> <li>UpdateTaskRequest</li> <li>UpdateTaskRunStateRequest</li> <li>UpdateTaskVersionRequest</li> </ul>"},{"location":"libtes/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"libtes/#bearer","title":"Bearer","text":"<ul> <li>Type: API key</li> <li>API key parameter name: Authorization</li> <li>Location: HTTP header</li> </ul>"},{"location":"libtes/#author","title":"Author","text":""},{"location":"libtes/docs/AgentTaskRun/","title":"AgentTaskRun","text":""},{"location":"libtes/docs/AgentTaskRun/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] nonce str [optional] encryption_key str [optional] input_manifest_url str [optional] output_manifest_url str [optional] heartbeat_manifest_url str [optional] output_token_manifest_url str [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] execution_raw_json str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/CheckOutQueuedTaskRunRequest/","title":"CheckOutQueuedTaskRunRequest","text":""},{"location":"libtes/docs/CheckOutQueuedTaskRunRequest/#properties","title":"Properties","text":"Name Type Description Notes compute_type str Type of the compute requested (Fpga and NonFpga) [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Cluster/","title":"Cluster","text":""},{"location":"libtes/docs/Cluster/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] svc_acct_u_id str [optional] status str [optional] type str [optional] task_runs list[TaskRun] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ClusterSummary/","title":"ClusterSummary","text":""},{"location":"libtes/docs/ClusterSummary/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] svc_acct_u_id str [optional] status str [optional] type str [optional] task_runs list[TaskRun] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ClusterSummaryPagedItems/","title":"ClusterSummaryPagedItems","text":""},{"location":"libtes/docs/ClusterSummaryPagedItems/#properties","title":"Properties","text":"Name Type Description Notes items list[ClusterSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ContainerState/","title":"ContainerState","text":""},{"location":"libtes/docs/ContainerState/#properties","title":"Properties","text":"Name Type Description Notes waiting ContainerStateWaiting [optional] running ContainerStateRunning [optional] terminated ContainerStateTerminated [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ContainerStateRunning/","title":"ContainerStateRunning","text":""},{"location":"libtes/docs/ContainerStateRunning/#properties","title":"Properties","text":"Name Type Description Notes started_at datetime [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ContainerStateTerminated/","title":"ContainerStateTerminated","text":""},{"location":"libtes/docs/ContainerStateTerminated/#properties","title":"Properties","text":"Name Type Description Notes exit_code int [optional] signal int [optional] reason str [optional] message str [optional] started_at datetime [optional] finished_at datetime [optional] container_id str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ContainerStateWaiting/","title":"ContainerStateWaiting","text":""},{"location":"libtes/docs/ContainerStateWaiting/#properties","title":"Properties","text":"Name Type Description Notes reason str [optional] message str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ContainerStatus/","title":"ContainerStatus","text":""},{"location":"libtes/docs/ContainerStatus/#properties","title":"Properties","text":"Name Type Description Notes name str [optional] state ContainerState [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/CreateClusterRequest/","title":"CreateClusterRequest","text":""},{"location":"libtes/docs/CreateClusterRequest/#properties","title":"Properties","text":"Name Type Description Notes name str svc_acct_u_id str [optional] status str [optional] type str [optional] acl list[str] Access Control List [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/CreateTaskRequest/","title":"CreateTaskRequest","text":""},{"location":"libtes/docs/CreateTaskRequest/#properties","title":"Properties","text":"Name Type Description Notes name str User-defined name of the task description str User-defined description of the task [optional] acl list[str] Access Control List [optional] task_versions list[CreateTaskVersionRequest] List of task versions [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/CreateTaskRunRequest/","title":"CreateTaskRunRequest","text":""},{"location":"libtes/docs/CreateTaskRunRequest/#properties","title":"Properties","text":"Name Type Description Notes name str User-defined name of the task run [optional] description str User-defined description of the task run [optional] acl list[str] Access Control List [optional] execution Execution [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/CreateTaskVersionRequest/","title":"CreateTaskVersionRequest","text":""},{"location":"libtes/docs/CreateTaskVersionRequest/#properties","title":"Properties","text":"Name Type Description Notes version str User-defined version of task version description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Credentials/","title":"Credentials","text":""},{"location":"libtes/docs/Credentials/#properties","title":"Properties","text":"Name Type Description Notes username str [optional] password str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Environment/","title":"Environment","text":""},{"location":"libtes/docs/Environment/#properties","title":"Properties","text":"Name Type Description Notes variables dict(str, str) [optional] resources Resources [optional] input_stream_settings InputStreamSettings [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/ErrorResponse/","title":"ErrorResponse","text":""},{"location":"libtes/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Execution/","title":"Execution","text":""},{"location":"libtes/docs/Execution/#properties","title":"Properties","text":"Name Type Description Notes image Image [optional] command str [optional] args list[str] Argument to run specified task [optional] inputs list[InputMountMappingWithCreds] Path (Inputs) - Path to mount file at valid Url  URL (Inputs) - Url of file mounted at specified path [optional] outputs list[MountMappingWithCreds] Path (Outputs) - Path where files will be output to valid Url  URL (Outputs) - Url of folder with files from the path will be uploaded [optional] system_files SystemFiles [optional] environment Environment [optional] working_directory str [optional] retry_limit int [optional] [default to 3] retry_count int [optional] [default to 0] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/HeartbeatTaskRunRequest/","title":"HeartbeatTaskRunRequest","text":""},{"location":"libtes/docs/HeartbeatTaskRunRequest/#properties","title":"Properties","text":"Name Type Description Notes last_heartbeat bool LastHeartbeat [optional] pod_name str [optional] pod_uid str [optional] pod_hardware_details str [optional] job_retry_count int [optional] nonce str [optional] container_status list[ContainerStatus] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Image/","title":"Image","text":""},{"location":"libtes/docs/Image/#properties","title":"Properties","text":"Name Type Description Notes name str Name of url for Docker Image tag str Version of image as defined in repository [optional] digest str Version of image as defined in repository [optional] credentials Credentials [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/InputMountMappingWithCreds/","title":"InputMountMappingWithCreds","text":""},{"location":"libtes/docs/InputMountMappingWithCreds/#properties","title":"Properties","text":"Name Type Description Notes storage_provider str [optional] credentials dict(str, str) [optional] path str [optional] url str [optional] urn str [optional] mode str [optional] type str [optional] [default to 'File'] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/InputStreamSettings/","title":"InputStreamSettings","text":""},{"location":"libtes/docs/InputStreamSettings/#properties","title":"Properties","text":"Name Type Description Notes access_pattern str [optional] [default to 'sequential'] cache_size_gb int [optional] [default to 50] block_size_mb float [optional] [default to 32.0] prefetch_blocks int [optional] [default to 32] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/LaunchTaskRequest/","title":"LaunchTaskRequest","text":""},{"location":"libtes/docs/LaunchTaskRequest/#properties","title":"Properties","text":"Name Type Description Notes name str User-defined name for the task run, if not specified version string of task version will be used [optional] description str User-defined description for the task run, if not specified task version description will be used [optional] arguments dict(str, str) Arguments to launch a task run [optional] acl list[str] Access Control List [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/MountMappingWithCreds/","title":"MountMappingWithCreds","text":""},{"location":"libtes/docs/MountMappingWithCreds/#properties","title":"Properties","text":"Name Type Description Notes path str [optional] url str [optional] urn str [optional] type str [optional] storage_provider str [optional] credentials dict(str, str) [optional] service_url str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Resources/","title":"Resources","text":""},{"location":"libtes/docs/Resources/#properties","title":"Properties","text":"Name Type Description Notes type str [optional] size str [optional] cpu_cores float [optional] memory_gb float [optional] hardware list[str] [optional] tier str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/SystemFiles/","title":"SystemFiles","text":""},{"location":"libtes/docs/SystemFiles/#properties","title":"Properties","text":"Name Type Description Notes url str [optional] urn str [optional] storage_provider str [optional] credentials dict(str, str) [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/Task/","title":"Task","text":""},{"location":"libtes/docs/Task/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] task_versions list[TaskVersion] [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRun/","title":"TaskRun","text":""},{"location":"libtes/docs/TaskRun/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] logs list[TaskRunLogs] [optional] execution_raw_json str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunDirect/","title":"TaskRunDirect","text":""},{"location":"libtes/docs/TaskRunDirect/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] name str [optional] href str Href of the object [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] execution Execution [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunHeartbeat/","title":"TaskRunHeartbeat","text":""},{"location":"libtes/docs/TaskRunHeartbeat/#properties","title":"Properties","text":"Name Type Description Notes jwt str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunLogs/","title":"TaskRunLogs","text":""},{"location":"libtes/docs/TaskRunLogs/#properties","title":"Properties","text":"Name Type Description Notes start_time datetime [optional] end_time datetime [optional] error str [optional] error_details str [optional] stdout str [optional] stderr str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunSummary/","title":"TaskRunSummary","text":""},{"location":"libtes/docs/TaskRunSummary/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] status str [optional] [default to 'Pending'] status_details str [optional] type_of_resource str [optional] size_of_resource str [optional] tier_of_resource str [optional] task_version_summary TaskVersionSummary [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunSummaryPagedItems/","title":"TaskRunSummaryPagedItems","text":""},{"location":"libtes/docs/TaskRunSummaryPagedItems/#properties","title":"Properties","text":"Name Type Description Notes items list[TaskRunSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunsApi/","title":"libica.openapi.libtes.TaskRunsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description abort_task_run PUT /v1/tasks/runs/{runId}:abort Abort a task run create_task_run POST /v1/tasks/runs Create and launch a task run get_task_run GET /v1/tasks/runs/{runId} Get the status of a task run heartbeat_task_run POST /v1/tasks/runs/{runId}:heartbeat Heartbeat for a task run list_task_runs GET /v1/tasks/runs Get a list of task runs"},{"location":"libtes/docs/TaskRunsApi/#abort_task_run","title":"abort_task_run","text":"<p>TaskRunSummary abort_task_run(run_id)</p> <p>Abort a task run</p> <p>Aborts a task run for a given task run ID. The task run is required to have a status of \\\"Pending\\\" or \\\"Running\\\".</p>"},{"location":"libtes/docs/TaskRunsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    run_id = 'run_id_example' # str | \n\n    try:\n        # Abort a task run\n        api_response = api_instance.abort_task_run(run_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;abort_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskRunsApi/#parameters","title":"Parameters","text":"Name Type Description Notes run_id str"},{"location":"libtes/docs/TaskRunsApi/#return-type","title":"Return type","text":"<p>TaskRunSummary</p>"},{"location":"libtes/docs/TaskRunsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskRunsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunsApi/#create_task_run","title":"create_task_run","text":"<p>TaskRun create_task_run(body=body)</p> <p>Create and launch a task run</p> <p>Creates and launches a task run. Returns the ID and status associated with the new task run.</p>"},{"location":"libtes/docs/TaskRunsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    body = libica.openapi.libtes.CreateTaskRunRequest() # CreateTaskRunRequest |  (optional)\n\n    try:\n        # Create and launch a task run\n        api_response = api_instance.create_task_run(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;create_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskRunsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes body CreateTaskRunRequest [optional]"},{"location":"libtes/docs/TaskRunsApi/#return-type_1","title":"Return type","text":"<p>TaskRun</p>"},{"location":"libtes/docs/TaskRunsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunsApi/#get_task_run","title":"get_task_run","text":"<p>TaskRun get_task_run(run_id)</p> <p>Get the status of a task run</p> <p>Gets the status of a task run for a given task run ID.</p>"},{"location":"libtes/docs/TaskRunsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    run_id = 'run_id_example' # str | \n\n    try:\n        # Get the status of a task run\n        api_response = api_instance.get_task_run(run_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;get_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskRunsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes run_id str"},{"location":"libtes/docs/TaskRunsApi/#return-type_2","title":"Return type","text":"<p>TaskRun</p>"},{"location":"libtes/docs/TaskRunsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunsApi/#heartbeat_task_run","title":"heartbeat_task_run","text":"<p>TaskRunHeartbeat heartbeat_task_run(run_id, body=body)</p> <p>Heartbeat for a task run</p> <p>Heartbeat a task run for a given task run ID. This notifies TES that a task run is executing.</p>"},{"location":"libtes/docs/TaskRunsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    run_id = 'run_id_example' # str | \nbody = libica.openapi.libtes.HeartbeatTaskRunRequest() # HeartbeatTaskRunRequest |  (optional)\n\n    try:\n        # Heartbeat for a task run\n        api_response = api_instance.heartbeat_task_run(run_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;heartbeat_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskRunsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes run_id str body HeartbeatTaskRunRequest [optional]"},{"location":"libtes/docs/TaskRunsApi/#return-type_3","title":"Return type","text":"<p>TaskRunHeartbeat</p>"},{"location":"libtes/docs/TaskRunsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskRunsApi/#list_task_runs","title":"list_task_runs","text":"<p>TaskRunSummaryPagedItems list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token)</p> <p>Get a list of task runs</p> <p>Get a list of task runs accessible by the current tenant ID.</p>"},{"location":"libtes/docs/TaskRunsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskRunsApi(api_client)\n    sort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) (optional)\nnames = 'names_example' # str |  (optional)\nstatus = 'status_example' # str |  (optional)\nversions = 'versions_example' # str |  (optional)\nacls = 'acls_example' # str |  (optional)\npage_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10)\npage_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) (optional)\n\n    try:\n        # Get a list of task runs\n        api_response = api_instance.list_task_runs(sort=sort, names=names, status=status, versions=versions, acls=acls, page_size=page_size, page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskRunsApi-&gt;list_task_runs: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskRunsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, status, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) [optional] names str [optional] status str [optional] versions str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) [optional]"},{"location":"libtes/docs/TaskRunsApi/#return-type_4","title":"Return type","text":"<p>TaskRunSummaryPagedItems</p>"},{"location":"libtes/docs/TaskRunsApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskRunsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskRunsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskSummary/","title":"TaskSummary","text":""},{"location":"libtes/docs/TaskSummary/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] name str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskSummaryPagedItems/","title":"TaskSummaryPagedItems","text":""},{"location":"libtes/docs/TaskSummaryPagedItems/#properties","title":"Properties","text":"Name Type Description Notes items list[TaskSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersion/","title":"TaskVersion","text":""},{"location":"libtes/docs/TaskVersion/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] execution Execution [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionSummary/","title":"TaskVersionSummary","text":""},{"location":"libtes/docs/TaskVersionSummary/#properties","title":"Properties","text":"Name Type Description Notes id str Global identifier for object [optional] href str Href of the object [optional] urn str URN of the resource [optional] version str [optional] description str [optional] acl list[str] Access Control List [optional] tenant_id str [optional] sub_tenant_id str [optional] created_by str User who created the object [optional] time_created datetime Date and Time (in UTC) when object was created in TES [optional] modified_by str User who updated the object [optional] time_modified datetime Date and Time (in UTC) when object was modified in TES [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionSummaryPagedItems/","title":"TaskVersionSummaryPagedItems","text":""},{"location":"libtes/docs/TaskVersionSummaryPagedItems/#properties","title":"Properties","text":"Name Type Description Notes items list[TaskVersionSummary] [optional] item_count int [optional] first_page_token str [optional] next_page_token str [optional] prev_page_token str [optional] last_page_token str [optional] total_item_count int [optional] total_page_count int [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionsApi/","title":"libica.openapi.libtes.TaskVersionsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_task_version POST /v1/tasks/{taskId}/versions Create a task version get_task_version GET /v1/tasks/{taskId}/versions/{versionId} Get the details of a task version launch_task_run POST /v1/tasks/{taskId}/versions/{versionId}:launch Launch a task version list_task_versions GET /v1/tasks/{taskId}/versions Get a list of versions update_task_version PATCH /v1/tasks/{taskId}/versions/{versionId} Update task version properties"},{"location":"libtes/docs/TaskVersionsApi/#create_task_version","title":"create_task_version","text":"<p>TaskVersion create_task_version(task_id, body=body)</p> <p>Create a task version</p> <p>Creates a new task version within an existing task. Returns the ID associated with the new task version. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.</p>"},{"location":"libtes/docs/TaskVersionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskVersionsApi(api_client)\n    task_id = 'task_id_example' # str | \nbody = libica.openapi.libtes.CreateTaskVersionRequest() # CreateTaskVersionRequest |  (optional)\n\n    try:\n        # Create a task version\n        api_response = api_instance.create_task_version(task_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskVersionsApi-&gt;create_task_version: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskVersionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes task_id str body CreateTaskVersionRequest [optional]"},{"location":"libtes/docs/TaskVersionsApi/#return-type","title":"Return type","text":"<p>TaskVersion</p>"},{"location":"libtes/docs/TaskVersionsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionsApi/#get_task_version","title":"get_task_version","text":"<p>TaskVersion get_task_version(task_id, version_id)</p> <p>Get the details of a task version</p> <p>Gets details of a task version for a given task version ID.</p>"},{"location":"libtes/docs/TaskVersionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskVersionsApi(api_client)\n    task_id = 'task_id_example' # str | \nversion_id = 'version_id_example' # str | \n\n    try:\n        # Get the details of a task version\n        api_response = api_instance.get_task_version(task_id, version_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskVersionsApi-&gt;get_task_version: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskVersionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes task_id str version_id str"},{"location":"libtes/docs/TaskVersionsApi/#return-type_1","title":"Return type","text":"<p>TaskVersion</p>"},{"location":"libtes/docs/TaskVersionsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionsApi/#launch_task_run","title":"launch_task_run","text":"<p>TaskRun launch_task_run(task_id, version_id, body=body)</p> <p>Launch a task version</p> <p>Launches a task version for a given task version ID. Returns the ID associated with the new task run. Substitutions defined in the task version must be specified.</p>"},{"location":"libtes/docs/TaskVersionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskVersionsApi(api_client)\n    task_id = 'task_id_example' # str | \nversion_id = 'version_id_example' # str | \nbody = libica.openapi.libtes.LaunchTaskRequest() # LaunchTaskRequest |  (optional)\n\n    try:\n        # Launch a task version\n        api_response = api_instance.launch_task_run(task_id, version_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskVersionsApi-&gt;launch_task_run: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskVersionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes task_id str version_id str body LaunchTaskRequest [optional]"},{"location":"libtes/docs/TaskVersionsApi/#return-type_2","title":"Return type","text":"<p>TaskRun</p>"},{"location":"libtes/docs/TaskVersionsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionsApi/#list_task_versions","title":"list_task_versions","text":"<p>TaskVersionSummaryPagedItems list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token)</p> <p>Get a list of versions</p> <p>Gets a list of task versions within the given task accessible by the current tenant ID.</p>"},{"location":"libtes/docs/TaskVersionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskVersionsApi(api_client)\n    task_id = 'task_id_example' # str | \nsort = 'sort_example' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) (optional)\nversions = 'versions_example' # str |  (optional)\nids = 'ids_example' # str |  (optional)\nacls = 'acls_example' # str |  (optional)\npage_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10)\npage_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) (optional)\n\n    try:\n        # Get a list of versions\n        api_response = api_instance.list_task_versions(task_id, sort=sort, versions=versions, ids=ids, acls=acls, page_size=page_size, page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskVersionsApi-&gt;list_task_versions: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskVersionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes task_id str sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, version, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) [optional] versions str [optional] ids str [optional] acls str [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) [optional]"},{"location":"libtes/docs/TaskVersionsApi/#return-type_3","title":"Return type","text":"<p>TaskVersionSummaryPagedItems</p>"},{"location":"libtes/docs/TaskVersionsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TaskVersionsApi/#update_task_version","title":"update_task_version","text":"<p>TaskVersion update_task_version(task_id, version_id, body=body)</p> <p>Update task version properties</p> <p>Update details of a task version for a given task version ID.</p>"},{"location":"libtes/docs/TaskVersionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TaskVersionsApi(api_client)\n    task_id = 'task_id_example' # str | \nversion_id = 'version_id_example' # str | \nbody = libica.openapi.libtes.UpdateTaskVersionRequest() # UpdateTaskVersionRequest |  (optional)\n\n    try:\n        # Update task version properties\n        api_response = api_instance.update_task_version(task_id, version_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TaskVersionsApi-&gt;update_task_version: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TaskVersionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes task_id str version_id str body UpdateTaskVersionRequest [optional]"},{"location":"libtes/docs/TaskVersionsApi/#return-type_4","title":"Return type","text":"<p>TaskVersion</p>"},{"location":"libtes/docs/TaskVersionsApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TaskVersionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TaskVersionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TasksApi/","title":"libica.openapi.libtes.TasksApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_task POST /v1/tasks Create a Task get_task GET /v1/tasks/{taskId} Get the details of a Task list_tasks GET /v1/tasks Get a list of tasks update_task PATCH /v1/tasks/{taskId} Update an existing task."},{"location":"libtes/docs/TasksApi/#create_task","title":"create_task","text":"<p>Task create_task(body=body)</p> <p>Create a Task</p> <p>Creates a task. Returns the ID associated with the new task. Also returns the task version ID associated with the new task, if provided. Substitutions can be defined in the following format: \\\"{{string}}\\\", and specified at launch time.</p>"},{"location":"libtes/docs/TasksApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TasksApi(api_client)\n    body = libica.openapi.libtes.CreateTaskRequest() # CreateTaskRequest |  (optional)\n\n    try:\n        # Create a Task\n        api_response = api_instance.create_task(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TasksApi-&gt;create_task: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TasksApi/#parameters","title":"Parameters","text":"Name Type Description Notes body CreateTaskRequest [optional]"},{"location":"libtes/docs/TasksApi/#return-type","title":"Return type","text":"<p>Task</p>"},{"location":"libtes/docs/TasksApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TasksApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TasksApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TasksApi/#get_task","title":"get_task","text":"<p>TaskSummary get_task(task_id)</p> <p>Get the details of a Task</p> <p>Gets the details of a Task for a given task ID.</p>"},{"location":"libtes/docs/TasksApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TasksApi(api_client)\n    task_id = 'task_id_example' # str | \n\n    try:\n        # Get the details of a Task\n        api_response = api_instance.get_task(task_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TasksApi-&gt;get_task: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TasksApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes task_id str"},{"location":"libtes/docs/TasksApi/#return-type_1","title":"Return type","text":"<p>TaskSummary</p>"},{"location":"libtes/docs/TasksApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TasksApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TasksApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TasksApi/#list_tasks","title":"list_tasks","text":"<p>TaskSummaryPagedItems list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token)</p> <p>Get a list of tasks</p> <p>Gets a list of tasks accessible by the current tenant ID.</p>"},{"location":"libtes/docs/TasksApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TasksApi(api_client)\n    names = 'names_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional)\nacls = 'acls_example' # str | Name: Optional parameter to filter the returned list. Case-Sensitive (optional)\npage_size = 10 # int | Optional parameter to define the page size returned. Valid inputs range from 1-1000. (optional) (default to 10)\nsort = 'timeCreated asc' # str | Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) (optional) (default to 'timeCreated asc')\npage_token = 'page_token_example' # str | pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) (optional)\n\n    try:\n        # Get a list of tasks\n        api_response = api_instance.list_tasks(names=names, acls=acls, page_size=page_size, sort=sort, page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TasksApi-&gt;list_tasks: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TasksApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes names str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] acls str Name: Optional parameter to filter the returned list. Case-Sensitive [optional] page_size int Optional parameter to define the page size returned. Valid inputs range from 1-1000. [optional] [default to 10] sort str Sort: Optional parameter to set the sort of the returned list. Valid fields include: name, timeCreated, timeModified.  The sort can be specified as asc or desc. (Default: asc.) [optional] [default to 'timeCreated asc'] page_token str pageToken: Optional parameter for navigation after initial listing. Valid values include firstPageToken,  nextPageToken, and previousPageToken (provided in the list response) [optional]"},{"location":"libtes/docs/TasksApi/#return-type_2","title":"Return type","text":"<p>TaskSummaryPagedItems</p>"},{"location":"libtes/docs/TasksApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TasksApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TasksApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/TasksApi/#update_task","title":"update_task","text":"<p>Task update_task(task_id, body=body)</p> <p>Update an existing task.</p> <p>Updates the task with a given ID. The task's name, description can be updated. The task's name must remain unique.</p>"},{"location":"libtes/docs/TasksApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libtes\nfrom libica.openapi.libtes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libtes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libtes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libtes.TasksApi(api_client)\n    task_id = 'task_id_example' # str | \nbody = libica.openapi.libtes.UpdateTaskRequest() # UpdateTaskRequest | Details of the task to be updated. (optional)\n\n    try:\n        # Update an existing task.\n        api_response = api_instance.update_task(task_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling TasksApi-&gt;update_task: %s\\n\" % e)\n</code></pre>"},{"location":"libtes/docs/TasksApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes task_id str body UpdateTaskRequest Details of the task to be updated. [optional]"},{"location":"libtes/docs/TasksApi/#return-type_3","title":"Return type","text":"<p>Task</p>"},{"location":"libtes/docs/TasksApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libtes/docs/TasksApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libtes/docs/TasksApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Success - 400 Bad Request - 401 Unauthorized - 403 Forbidden - 404 Not Found - 409 Conflict - 500 Server Error - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libtes/docs/UpdateClusterRequest/","title":"UpdateClusterRequest","text":""},{"location":"libtes/docs/UpdateClusterRequest/#properties","title":"Properties","text":"Name Type Description Notes name str User-defined name of the cluster [optional] svc_acct_u_id str Service account user id to be associated with the cluster [optional] status str User-defined status of the cluster [optional] type str User-defined type of the cluster [optional] acl list[str] Access Control List [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/UpdateTaskRequest/","title":"UpdateTaskRequest","text":""},{"location":"libtes/docs/UpdateTaskRequest/#properties","title":"Properties","text":"Name Type Description Notes name str User-defined name of the task [optional] description str User-defined description of the task [optional] acl list[str] Access Control List [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/UpdateTaskRunStateRequest/","title":"UpdateTaskRunStateRequest","text":""},{"location":"libtes/docs/UpdateTaskRunStateRequest/#properties","title":"Properties","text":"Name Type Description Notes status str New TaskRun status to be updated [optional] status_details str Description of the event that triggered the state change [optional] start_time datetime TaskRun execution start time [optional] completion_time datetime TaskRun execution completion time [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libtes/docs/UpdateTaskVersionRequest/","title":"UpdateTaskVersionRequest","text":""},{"location":"libtes/docs/UpdateTaskVersionRequest/#properties","title":"Properties","text":"Name Type Description Notes version str User-defined version of task version [optional] description str User-defined description of task version [optional] execution Execution [optional] acl list[str] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/","title":"libica.openapi.libwes","text":"<p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)</p> <p>The <code>libica.openapi.libwes</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: v1</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T20:38:20.539143+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"libwes/#requirements","title":"Requirements.","text":"<p>Python 2.7 and 3.4+</p>"},{"location":"libwes/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.15</li> <li>six &gt;= 1.10</li> <li>certifi</li> <li>python-dateutil</li> </ul>"},{"location":"libwes/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.libwes, you can run the following:</p> <pre><code>from __future__ import print_function\n\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowRunsApi(api_client)\n    run_id = 'run_id_example' # str | ID of the workflow run\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\nbody = libica.openapi.libwes.AbortWorkflowRunRequest() # AbortWorkflowRunRequest |  (optional)\n\n    try:\n        # Abort a workflow run\n        api_response = api_instance.abort_workflow_run(run_id, include=include, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowRunsApi-&gt;abort_workflow_run: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Class Method HTTP request Description WorkflowRunsApi abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run WorkflowRunsApi get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run WorkflowRunsApi list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events WorkflowRunsApi list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs WorkflowSignalsApi fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal WorkflowSignalsApi get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal WorkflowSignalsApi list_signals GET /v1/workflows/signals Get a list of workflow signals WorkflowSignalsApi succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal WorkflowVersionsApi create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version WorkflowVersionsApi get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version WorkflowVersionsApi launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version WorkflowVersionsApi list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions WorkflowVersionsApi list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions WorkflowVersionsApi update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version WorkflowsApi create_workflow POST /v1/workflows Create a workflow WorkflowsApi get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow WorkflowsApi list_workflows GET /v1/workflows Get a list of workflows WorkflowsApi update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow"},{"location":"libwes/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AbortWorkflowRunRequest</li> <li>CreateWorkflowRequest</li> <li>CreateWorkflowVersionRequest</li> <li>ErrorResponse</li> <li>FailWorkflowSignalRequest</li> <li>LaunchWorkflowVersionRequest</li> <li>SucceedWorkflowSignalRequest</li> <li>UpdateWorkflowRequest</li> <li>UpdateWorkflowVersionRequest</li> <li>Workflow</li> <li>WorkflowArgument</li> <li>WorkflowCompact</li> <li>WorkflowConnection</li> <li>WorkflowLanguage</li> <li>WorkflowList</li> <li>WorkflowRun</li> <li>WorkflowRunCompact</li> <li>WorkflowRunHistoryEvent</li> <li>WorkflowRunHistoryEventList</li> <li>WorkflowRunList</li> <li>WorkflowSignal</li> <li>WorkflowSignalCompact</li> <li>WorkflowSignalList</li> <li>WorkflowVersion</li> <li>WorkflowVersionCompact</li> <li>WorkflowVersionList</li> </ul>"},{"location":"libwes/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"libwes/#bearer","title":"Bearer","text":"<ul> <li>Type: API key</li> <li>API key parameter name: Authorization</li> <li>Location: HTTP header</li> </ul>"},{"location":"libwes/#author","title":"Author","text":""},{"location":"libwes/docs/AbortWorkflowRunRequest/","title":"AbortWorkflowRunRequest","text":"<p>Abort a workflow run</p>"},{"location":"libwes/docs/AbortWorkflowRunRequest/#properties","title":"Properties","text":"Name Type Description Notes error str cause str [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/CreateWorkflowRequest/","title":"CreateWorkflowRequest","text":"<p>Create a workflow and optional version</p>"},{"location":"libwes/docs/CreateWorkflowRequest/#properties","title":"Properties","text":"Name Type Description Notes name str description str [optional] organization str [optional] workflow_version CreateWorkflowVersionRequest [optional] tool_class str [optional] acl list[str] [optional] categories list[str] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/CreateWorkflowVersionRequest/","title":"CreateWorkflowVersionRequest","text":"<p>Create a new workflow version under an existing workflow root</p>"},{"location":"libwes/docs/CreateWorkflowVersionRequest/#properties","title":"Properties","text":"Name Type Description Notes version str description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str Published Status of the workflow version [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/ErrorResponse/","title":"ErrorResponse","text":""},{"location":"libwes/docs/ErrorResponse/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] message str [optional] details list[object] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/FailWorkflowSignalRequest/","title":"FailWorkflowSignalRequest","text":"<p>Fail workflow signal request</p>"},{"location":"libwes/docs/FailWorkflowSignalRequest/#properties","title":"Properties","text":"Name Type Description Notes error str Externally provided Error of a signalling action. cause str Externally provided Cause of a failed signalling action. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/","title":"GetWorkflowRunHistoryIncludeFlags","text":""},{"location":"libwes/docs/GetWorkflowRunHistoryIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/","title":"GetWorkflowRunIncludeFlags","text":""},{"location":"libwes/docs/GetWorkflowRunIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/","title":"GetWorkflowSignalsIncludeFlags","text":""},{"location":"libwes/docs/GetWorkflowSignalsIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/GetWorkflowsIncludeFlags/","title":"GetWorkflowsIncludeFlags","text":""},{"location":"libwes/docs/GetWorkflowsIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/LaunchWorkflowVersionRequest/","title":"LaunchWorkflowVersionRequest","text":""},{"location":"libwes/docs/LaunchWorkflowVersionRequest/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the workflow run [optional] input object Input for the launched workflow run. Must resolve to a JSON object. [optional] engine_parameters object Runtime options for launching workflows (currently only used for Airflow     and otherwise ignored). Must resolve to a JSON object. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/","title":"ListAllWorkflowsVersionsIncludeFlags","text":""},{"location":"libwes/docs/ListAllWorkflowsVersionsIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/","title":"ListWorkflowRunsIncludeFlags","text":""},{"location":"libwes/docs/ListWorkflowRunsIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/","title":"ListWorkflowVersionsIncludeFlags","text":""},{"location":"libwes/docs/ListWorkflowVersionsIncludeFlags/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/SucceedWorkflowSignalRequest/","title":"SucceedWorkflowSignalRequest","text":""},{"location":"libwes/docs/SucceedWorkflowSignalRequest/#properties","title":"Properties","text":"Name Type Description Notes result object External result of a successful signal. Must resolve to a JSON value. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/ToolClass/","title":"ToolClass","text":""},{"location":"libwes/docs/ToolClass/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/UpdateWorkflowRequest/","title":"UpdateWorkflowRequest","text":"<p>Update an existing workflow</p>"},{"location":"libwes/docs/UpdateWorkflowRequest/#properties","title":"Properties","text":"Name Type Description Notes name str [optional] description str [optional] organization str [optional] acl list[str] [optional] categories list[str] [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/","title":"UpdateWorkflowVersionRequest","text":"<p>Update a workflow version definition using patch semantics</p>"},{"location":"libwes/docs/UpdateWorkflowVersionRequest/#properties","title":"Properties","text":"Name Type Description Notes version str [optional] description str [optional] language WorkflowLanguage [optional] definition object [optional] acl list[str] [optional] status str New Status for workflow version [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/Workflow/","title":"Workflow","text":"<p>Details of a workflow</p>"},{"location":"libwes/docs/Workflow/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowArgument/","title":"WorkflowArgument","text":"<p>Argument definition</p>"},{"location":"libwes/docs/WorkflowArgument/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the argument key value str A simple string value for the argument. Cannot provide both Value and Json at the same time. [optional] json object A JSON value for the argument. Cannot provide both Value and Json at the same time. [optional] options str Comma separated list of options for the argument: Required, Overridable, Writable, Json, Optional, ReadOnly, Final  Some combinations of options are considered errors, like Required/Optional, Overridable/Final, Writable/ReadOnly, etc. [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowCompact/","title":"WorkflowCompact","text":"<p>Compact details of a workflow</p>"},{"location":"libwes/docs/WorkflowCompact/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow [optional] organization str Organization associated with the workflow [optional] description str Description of the workflow [optional] tool_class str Workflow type [optional] categories list[str] Categories of the workflow (Limit Max Size : 10) [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowConnection/","title":"WorkflowConnection","text":"<p>Defines a connection that can be used in a workflow definition to perform actions</p>"},{"location":"libwes/docs/WorkflowConnection/#properties","title":"Properties","text":"Name Type Description Notes name str type str Type of the connection: PlatformJwt, ApiBearerToken, AwsCredentials, ApiCustomAuthentication, BsshOAuthV2 [optional] host str For API based connections, the Host part of the API endpoint [optional] host_validation_regex str Regex that hosts associated with this connection must meet (when host override by each run is allowed) [optional] credentials str Credentials associated with the connection. Format depends on type of connection. [optional] options str Comma separated list of options associated with the connection: CredentialsRequired, AllowCredentialsOverride, AutoDisableCredentialsAfterUse, AllowHostOverride [optional] auto_disable_url str Relative URL (relative to Host) to call in order to disable the credentials [optional] auto_disable_http_method str Http method to use to disable the credentials. Must be POST, PUT or DELETE [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowLanguage/","title":"WorkflowLanguage","text":"<p>Language details about a workflow version</p>"},{"location":"libwes/docs/WorkflowLanguage/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the workflow language version str The version of the workflow language, if any [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowList/","title":"WorkflowList","text":""},{"location":"libwes/docs/WorkflowList/#properties","title":"Properties","text":"Name Type Description Notes items list[WorkflowCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRun/","title":"WorkflowRun","text":"<p>Details of a workflow run</p>"},{"location":"libwes/docs/WorkflowRun/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] input object Input to workflow run, as JSON [optional] output object Output from workflow run, as JSON [optional] definition str Definition of the workflow version [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunCompact/","title":"WorkflowRunCompact","text":"<p>Compact details of a workflow run</p>"},{"location":"libwes/docs/WorkflowRunCompact/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] name str Name of the workflow run [optional] time_started datetime The time (in UTC) the workflow run started [optional] time_stopped datetime The time (in UTC) the Workflow Run stopped [optional] status str Workflow run status [optional] idempotency_key str [optional] status_summary str Workflow run status summary [optional] error str Error for a failed workflow run [optional] error_cause str Error cause for a failed workflow run [optional] workflow_version WorkflowVersionCompact [optional] created_by_client_id str Client ID of the Origin Request [optional] engine_parameters str Workflow Engine Parameters [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunHistoryEvent/","title":"WorkflowRunHistoryEvent","text":"<p>Information about a specific event in the workflow run history</p>"},{"location":"libwes/docs/WorkflowRunHistoryEvent/#properties","title":"Properties","text":"Name Type Description Notes name str Name of the event, such as the name of the step/task for state-level events and run name for run-level events [optional] event_id int Identifier for the history event, if any [optional] previous_event_id int Identifier for any previous history event (if available) [optional] event_type str Type of history event. The associated details entry will be populated based on the type of event. [optional] timestamp datetime Timestamp for the history event [optional] event_details object Details for history event [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunHistoryEventList/","title":"WorkflowRunHistoryEventList","text":""},{"location":"libwes/docs/WorkflowRunHistoryEventList/#properties","title":"Properties","text":"Name Type Description Notes items list[WorkflowRunHistoryEvent] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunList/","title":"WorkflowRunList","text":""},{"location":"libwes/docs/WorkflowRunList/#properties","title":"Properties","text":"Name Type Description Notes items list[WorkflowRunCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunStatus/","title":"WorkflowRunStatus","text":""},{"location":"libwes/docs/WorkflowRunStatus/#properties","title":"Properties","text":"Name Type Description Notes <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunsApi/","title":"libica.openapi.libwes.WorkflowRunsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description abort_workflow_run PUT /v1/workflows/runs/{runId}:abort Abort a workflow run get_workflow_run GET /v1/workflows/runs/{runId} Get the details of a workflow run list_workflow_run_history GET /v1/workflows/runs/{runId}/history Get a list of workflow run history events list_workflow_runs GET /v1/workflows/runs Get a list of workflow runs"},{"location":"libwes/docs/WorkflowRunsApi/#abort_workflow_run","title":"abort_workflow_run","text":"<p>WorkflowRun abort_workflow_run(run_id, include=include, body=body)</p> <p>Abort a workflow run</p> <p>Aborts the workflow run with a given ID.</p>"},{"location":"libwes/docs/WorkflowRunsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowRunsApi(api_client)\n    run_id = 'run_id_example' # str | ID of the workflow run\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\nbody = libica.openapi.libwes.AbortWorkflowRunRequest() # AbortWorkflowRunRequest |  (optional)\n\n    try:\n        # Abort a workflow run\n        api_response = api_instance.abort_workflow_run(run_id, include=include, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowRunsApi-&gt;abort_workflow_run: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowRunsApi/#parameters","title":"Parameters","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional] body AbortWorkflowRunRequest [optional]"},{"location":"libwes/docs/WorkflowRunsApi/#return-type","title":"Return type","text":"<p>WorkflowRun</p>"},{"location":"libwes/docs/WorkflowRunsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the aborted workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunsApi/#get_workflow_run","title":"get_workflow_run","text":"<p>WorkflowRun get_workflow_run(run_id, include=include)</p> <p>Get the details of a workflow run</p> <p>Gets the details of a workflow run with a given ID.</p>"},{"location":"libwes/docs/WorkflowRunsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowRunsApi(api_client)\n    run_id = 'run_id_example' # str | ID of the workflow run\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\n\n    try:\n        # Get the details of a workflow run\n        api_response = api_instance.get_workflow_run(run_id, include=include)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowRunsApi-&gt;get_workflow_run: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes run_id str ID of the workflow run include list[str] Comma-separated list of properties to include in the response [optional]"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_1","title":"Return type","text":"<p>WorkflowRun</p>"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_run_history","title":"list_workflow_run_history","text":"<p>WorkflowRunHistoryEventList list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token)</p> <p>Get a list of workflow run history events</p> <p>Gets a list of history events for a workflow run with a given ID.</p>"},{"location":"libwes/docs/WorkflowRunsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowRunsApi(api_client)\n    run_id = 'run_id_example' # str | ID of the workflow run\nsort = 'eventId asc' # str |  (optional) (default to 'eventId asc')\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\n\n    try:\n        # Get a list of workflow run history events\n        api_response = api_instance.list_workflow_run_history(run_id, sort=sort, include=include, page_size=page_size, page_token=page_token)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowRunsApi-&gt;list_workflow_run_history: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes run_id str ID of the workflow run sort str [optional] [default to 'eventId asc'] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional]"},{"location":"libwes/docs/WorkflowRunsApi/#return-type_2","title":"Return type","text":"<p>WorkflowRunHistoryEventList</p>"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflow run history events. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow run with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowRunsApi/#list_workflow_runs","title":"list_workflow_runs","text":"<p>WorkflowRunList list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort)</p> <p>Get a list of workflow runs</p> <p>Gets a list of workflow runs.</p>"},{"location":"libwes/docs/WorkflowRunsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowRunsApi(api_client)\n    status = ['status_example'] # list[str] |  (optional)\ntenant_id = 'tenant_id_example' # str | ID of the tenant (optional)\nname = 'name_example' # str |  (optional)\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\nsort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc')\n\n    try:\n        # Get a list of workflow runs\n        api_response = api_instance.list_workflow_runs(status=status, tenant_id=tenant_id, name=name, include=include, page_size=page_size, page_token=page_token, sort=sort)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowRunsApi-&gt;list_workflow_runs: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowRunsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes status list[str] [optional] tenant_id str ID of the tenant [optional] name str [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\"{fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending)."},{"location":"libwes/docs/WorkflowRunsApi/#return-type_3","title":"Return type","text":"<p>WorkflowRunList</p>"},{"location":"libwes/docs/WorkflowRunsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowRunsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowRunsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflow runs that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignal/","title":"WorkflowSignal","text":""},{"location":"libwes/docs/WorkflowSignal/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalCompact/","title":"WorkflowSignalCompact","text":"<p>Compact details of a signal</p>"},{"location":"libwes/docs/WorkflowSignalCompact/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] send_heartbeat_href str HREF to send a heartbeat to a workflow signal [optional] send_success_response_href str HREF to succeed a workflow signal [optional] send_failure_response_href str HREF to fail a workflow signal [optional] name str Unique name of the signal [optional] status str Current status of the signal [optional] type str User-defined type associated with the signal [optional] description str Description of the signal [optional] inputs object Inputs defined by the originating WaitForSignal state, in JSON. [optional] workflow_run WorkflowRunCompact [optional] timeout_seconds int Signal timeout in seconds. The Signal will timeout if a heartbeat, succeed or fail is not received in this time interval. [optional] result object The result of a successful signalling action in JSON. [optional] error str The error of a failed signal. [optional] error_cause str The error cause of a failed signal. [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalList/","title":"WorkflowSignalList","text":""},{"location":"libwes/docs/WorkflowSignalList/#properties","title":"Properties","text":"Name Type Description Notes items list[WorkflowSignalCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalsApi/","title":"libica.openapi.libwes.WorkflowSignalsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description fail_signal PATCH /v1/workflows/signals/{signalId}:fail Fail a workflow signal get_signal GET /v1/workflows/signals/{signalId} Get the details of a workflow signal list_signals GET /v1/workflows/signals Get a list of workflow signals succeed_signal PATCH /v1/workflows/signals/{signalId}:succeed Succeed a workflow signal"},{"location":"libwes/docs/WorkflowSignalsApi/#fail_signal","title":"fail_signal","text":"<p>WorkflowSignal fail_signal(signal_id, body=body)</p> <p>Fail a workflow signal</p> <p>Responds to a pending workflow signal with a failure result.</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowSignalsApi(api_client)\n    signal_id = 'signal_id_example' # str | ID of the workflow signal\nbody = libica.openapi.libwes.FailWorkflowSignalRequest() # FailWorkflowSignalRequest |  (optional)\n\n    try:\n        # Fail a workflow signal\n        api_response = api_instance.fail_signal(signal_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowSignalsApi-&gt;fail_signal: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters","title":"Parameters","text":"Name Type Description Notes signal_id str ID of the workflow signal body FailWorkflowSignalRequest [optional]"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type","title":"Return type","text":"<p>WorkflowSignal</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 Returns the failed signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#get_signal","title":"get_signal","text":"<p>WorkflowSignal get_signal(signal_id)</p> <p>Get the details of a workflow signal</p> <p>Gets the details of a workflow signal with a given ID.</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowSignalsApi(api_client)\n    signal_id = 'signal_id_example' # str | ID of the workflow signal\n\n    try:\n        # Get the details of a workflow signal\n        api_response = api_instance.get_signal(signal_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowSignalsApi-&gt;get_signal: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes signal_id str ID of the workflow signal"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_1","title":"Return type","text":"<p>WorkflowSignal</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the workflow signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#list_signals","title":"list_signals","text":"<p>WorkflowSignalList list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort)</p> <p>Get a list of workflow signals</p> <p>Gets a list of workflow signals.</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowSignalsApi(api_client)\n    tenant_id = 'tenant_id_example' # str | ID of the tenant (optional)\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\nsort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc')\n\n    try:\n        # Get a list of workflow signals\n        api_response = api_instance.list_signals(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowSignalsApi-&gt;list_signals: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\"{fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending)."},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_2","title":"Return type","text":"<p>WorkflowSignalList</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflow signals that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#succeed_signal","title":"succeed_signal","text":"<p>WorkflowSignal succeed_signal(signal_id, body=body)</p> <p>Succeed a workflow signal</p> <p>Responds to a pending workflow signal with a successful result.</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowSignalsApi(api_client)\n    signal_id = 'signal_id_example' # str | ID of the workflow signal\nbody = libica.openapi.libwes.SucceedWorkflowSignalRequest() # SucceedWorkflowSignalRequest |  (optional)\n\n    try:\n        # Succeed a workflow signal\n        api_response = api_instance.succeed_signal(signal_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowSignalsApi-&gt;succeed_signal: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowSignalsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes signal_id str ID of the workflow signal body SucceedWorkflowSignalRequest [optional]"},{"location":"libwes/docs/WorkflowSignalsApi/#return-type_3","title":"Return type","text":"<p>WorkflowSignal</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowSignalsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Returns the succeeded signal. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The signal with the specified ID was not found. - 409 The workflow signal is no longer active. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersion/","title":"WorkflowVersion","text":"<p>Details of a Workflow version definition</p>"},{"location":"libwes/docs/WorkflowVersion/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] definition str Definition of the workflow version [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionCompact/","title":"WorkflowVersionCompact","text":"<p>Compact details of a Workflow version definition</p>"},{"location":"libwes/docs/WorkflowVersionCompact/#properties","title":"Properties","text":"Name Type Description Notes id str Unique resource ID [optional] urn str URN of the resource [optional] href str HREF to the resource [optional] version str Name of the workflow version [optional] category str Category of the workflow version [optional] description str Description of the workflow version [optional] language WorkflowLanguage [optional] status str Published Status of the workflow version [optional] created_by_client_id str Client ID of the Origin Request [optional] time_created datetime Time (in UTC) the resource was created [optional] time_modified datetime Time (in UTC) the resource was modified [optional] created_by str User that created the resource [optional] modified_by str User that modified the resource [optional] tenant_id str Tenant ID the resource belongs to [optional] acl list[str] Access control list of the resource [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionList/","title":"WorkflowVersionList","text":""},{"location":"libwes/docs/WorkflowVersionList/#properties","title":"Properties","text":"Name Type Description Notes items list[WorkflowVersionCompact] Items in paged list [optional] item_count int Number of items included in the page [optional] first_page_token str PageToken for first paged list [optional] next_page_token str PageToken for the next paged list [optional] prev_page_token str PageToken for the previous paged list [optional] last_page_token str PageToken for the last paged list. Only included when totalItemCount is listed [optional] total_item_count int Total number of items in all pages. Only included when requested [optional] total_page_count int Total number of pages. Only included when totalItemCount is listed [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/","title":"libica.openapi.libwes.WorkflowVersionsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_workflow_version POST /v1/workflows/{workflowId}/versions Create a new workflow version get_workflow_version GET /v1/workflows/{workflowId}/versions/{versionName} Get the details of a workflow version launch_workflow_version POST /v1/workflows/{workflowId}/versions/{versionName}:launch Launch a workflow version list_all_workflow_versions GET /v1/workflows/versions Get a list of all workflow versions list_workflow_versions GET /v1/workflows/{workflowId}/versions Get a list of workflow versions update_workflow_version PATCH /v1/workflows/{workflowId}/versions/{versionName} Update an existing workflow version"},{"location":"libwes/docs/WorkflowVersionsApi/#create_workflow_version","title":"create_workflow_version","text":"<p>WorkflowVersion create_workflow_version(workflow_id, body=body)</p> <p>Create a new workflow version</p> <p>Creates a new workflow version with a given workflow ID.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\nbody = libica.openapi.libwes.CreateWorkflowVersionRequest() # CreateWorkflowVersionRequest |  (optional)\n\n    try:\n        # Create a new workflow version\n        api_response = api_instance.create_workflow_version(workflow_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;create_workflow_version: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow body CreateWorkflowVersionRequest [optional]"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type","title":"Return type","text":"<p>WorkflowVersion</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Details of the created workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#get_workflow_version","title":"get_workflow_version","text":"<p>WorkflowVersion get_workflow_version(workflow_id, version_name)</p> <p>Get the details of a workflow version</p> <p>Gets the details for a workflow version with a given workflow ID and version name.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\nversion_name = 'version_name_example' # str | Name of the workflow version\n\n    try:\n        # Get the details of a workflow version\n        api_response = api_instance.get_workflow_version(workflow_id, version_name)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;get_workflow_version: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_1","title":"Return type","text":"<p>WorkflowVersion</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the workflow version. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#launch_workflow_version","title":"launch_workflow_version","text":"<p>WorkflowRun launch_workflow_version(workflow_id, version_name, include=include, body=body)</p> <p>Launch a workflow version</p> <p>Launches a workflow version with a given workflow ID and version name.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\nversion_name = 'version_name_example' # str | Name of the workflow version\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\nbody = libica.openapi.libwes.LaunchWorkflowVersionRequest() # LaunchWorkflowVersionRequest |  (optional)\n\n    try:\n        # Launch a workflow version\n        api_response = api_instance.launch_workflow_version(workflow_id, version_name, include=include, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;launch_workflow_version: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version include list[str] Comma-separated list of properties to include in the response [optional] body LaunchWorkflowVersionRequest [optional]"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_2","title":"Return type","text":"<p>WorkflowRun</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#list_all_workflow_versions","title":"list_all_workflow_versions","text":"<p>WorkflowVersionList list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort)</p> <p>Get a list of all workflow versions</p> <p>Gets a list of workflow versions across all workflows.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    tenant_id = 'tenant_id_example' # str | ID of the tenant (optional)\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\nsort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc')\n\n    try:\n        # Get a list of all workflow versions\n        api_response = api_instance.list_all_workflow_versions(tenant_id=tenant_id, include=include, page_size=page_size, page_token=page_token, sort=sort)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;list_all_workflow_versions: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\"{fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending)."},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_3","title":"Return type","text":"<p>WorkflowVersionList</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflow versions across all workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#list_workflow_versions","title":"list_workflow_versions","text":"<p>WorkflowVersionList list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort)</p> <p>Get a list of workflow versions</p> <p>Gets a list of workflow versions with a given workflow ID.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\nsort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc')\n\n    try:\n        # Get a list of workflow versions\n        api_response = api_instance.list_workflow_versions(workflow_id, include=include, page_size=page_size, page_token=page_token, sort=sort)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;list_workflow_versions: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\"{fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending)."},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_4","title":"Return type","text":"<p>WorkflowVersionList</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_4","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflow versions that the user has access to. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#update_workflow_version","title":"update_workflow_version","text":"<p>WorkflowVersion update_workflow_version(workflow_id, version_name, body=body)</p> <p>Update an existing workflow version</p> <p>Updates an existing workflow version. Note: The Version, Definition, and Status cannot be changed simultaneously. Only one of these can be changed per API call.</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowVersionsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\nversion_name = 'version_name_example' # str | Name of the workflow version\nbody = libica.openapi.libwes.UpdateWorkflowVersionRequest() # UpdateWorkflowVersionRequest |  (optional)\n\n    try:\n        # Update an existing workflow version\n        api_response = api_instance.update_workflow_version(workflow_id, version_name, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowVersionsApi-&gt;update_workflow_version: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowVersionsApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow version_name str Name of the workflow version body UpdateWorkflowVersionRequest [optional]"},{"location":"libwes/docs/WorkflowVersionsApi/#return-type_5","title":"Return type","text":"<p>WorkflowVersion</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#authorization_5","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json-patch+json, application/json, text/json, application/*+json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowVersionsApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the created workflow run. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow ID or version name was not found. - 409 A conflict was found. Ensure the workflow version name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowsApi/","title":"libica.openapi.libwes.WorkflowsApi","text":"<p>All URIs are relative to https://aps2.platform.illumina.com</p> Method HTTP request Description create_workflow POST /v1/workflows Create a workflow get_workflow GET /v1/workflows/{workflowId} Get the details of a workflow list_workflows GET /v1/workflows Get a list of workflows update_workflow PATCH /v1/workflows/{workflowId} Update an existing workflow"},{"location":"libwes/docs/WorkflowsApi/#create_workflow","title":"create_workflow","text":"<p>Workflow create_workflow(body=body)</p> <p>Create a workflow</p> <p>Creates a new workflow and version (if provided).</p>"},{"location":"libwes/docs/WorkflowsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowsApi(api_client)\n    body = libica.openapi.libwes.CreateWorkflowRequest() # CreateWorkflowRequest |  (optional)\n\n    try:\n        # Create a workflow\n        api_response = api_instance.create_workflow(body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowsApi-&gt;create_workflow: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowsApi/#parameters","title":"Parameters","text":"Name Type Description Notes body CreateWorkflowRequest [optional]"},{"location":"libwes/docs/WorkflowsApi/#return-type","title":"Return type","text":"<p>Workflow</p>"},{"location":"libwes/docs/WorkflowsApi/#authorization","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 Details of the newly created workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowsApi/#get_workflow","title":"get_workflow","text":"<p>Workflow get_workflow(workflow_id)</p> <p>Get the details of a workflow</p> <p>Gets the details of a workflow with a given ID.</p>"},{"location":"libwes/docs/WorkflowsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\n\n    try:\n        # Get the details of a workflow\n        api_response = api_instance.get_workflow(workflow_id)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowsApi-&gt;get_workflow: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow"},{"location":"libwes/docs/WorkflowsApi/#return-type_1","title":"Return type","text":"<p>Workflow</p>"},{"location":"libwes/docs/WorkflowsApi/#authorization_1","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 Details of the workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowsApi/#list_workflows","title":"list_workflows","text":"<p>WorkflowList list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort)</p> <p>Get a list of workflows</p> <p>Gets a list of workflows.</p>"},{"location":"libwes/docs/WorkflowsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowsApi(api_client)\n    tenant_id = 'tenant_id_example' # str | ID of the tenant (optional)\nname = 'name_example' # str |  (optional)\ncategories = ['categories_example'] # list[str] |  (optional)\ninclude = ['include_example'] # list[str] | Comma-separated list of properties to include in the response (optional)\npage_size = 10 # int | Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. (optional) (default to 10)\npage_token = 'page_token_example' # str | Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. (optional)\nsort = 'timeCreated asc' # str | Specifies the order to include list items as \\\"_{fieldName}_ [asc|desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending). (optional) (default to 'timeCreated asc')\n\n    try:\n        # Get a list of workflows\n        api_response = api_instance.list_workflows(tenant_id=tenant_id, name=name, categories=categories, include=include, page_size=page_size, page_token=page_token, sort=sort)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowsApi-&gt;list_workflows: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes tenant_id str ID of the tenant [optional] name str [optional] categories list[str] [optional] include list[str] Comma-separated list of properties to include in the response [optional] page_size int Number of items to include in a page. Value must be an integer between 1 and 1000. Only one of pageSize or pageToken can be specified. [optional] [default to 10] page_token str Page offset descriptor. Valid page tokens are included in the response. Only one of pageSize or pageToken can be specified. [optional] sort str Specifies the order to include list items as \\\"{fieldName} [asc desc]\\\". The second field is optional and specifies the sort direction (\\\"asc\\\" for ascending or \\\"desc\\\" for descending)."},{"location":"libwes/docs/WorkflowsApi/#return-type_2","title":"Return type","text":"<p>WorkflowList</p>"},{"location":"libwes/docs/WorkflowsApi/#authorization_2","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Paged list of workflows. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"libwes/docs/WorkflowsApi/#update_workflow","title":"update_workflow","text":"<p>Workflow update_workflow(workflow_id, body=body)</p> <p>Update an existing workflow</p> <p>Updates the workflow with a given ID.</p>"},{"location":"libwes/docs/WorkflowsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (Bearer):</li> </ul> <pre><code>from __future__ import print_function\nimport time\nimport libica.openapi.libwes\nfrom libica.openapi.libwes.rest import ApiException\nfrom pprint import pprint\n# Defining the host is optional and defaults to https://aps2.platform.illumina.com\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: Bearer\nconfiguration = libica.openapi.libwes.Configuration(\n    host = \"https://aps2.platform.illumina.com\",\n    api_key = {\n        'Authorization': 'YOUR_API_KEY'\n    }\n)\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['Authorization'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.libwes.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.libwes.WorkflowsApi(api_client)\n    workflow_id = 'workflow_id_example' # str | ID of the workflow\nbody = libica.openapi.libwes.UpdateWorkflowRequest() # UpdateWorkflowRequest |  (optional)\n\n    try:\n        # Update an existing workflow\n        api_response = api_instance.update_workflow(workflow_id, body=body)\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling WorkflowsApi-&gt;update_workflow: %s\\n\" % e)\n</code></pre>"},{"location":"libwes/docs/WorkflowsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes workflow_id str ID of the workflow body UpdateWorkflowRequest [optional]"},{"location":"libwes/docs/WorkflowsApi/#return-type_3","title":"Return type","text":"<p>Workflow</p>"},{"location":"libwes/docs/WorkflowsApi/#authorization_3","title":"Authorization","text":"<p>Bearer</p>"},{"location":"libwes/docs/WorkflowsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json</li> <li>Accept: application/json</li> </ul>"},{"location":"libwes/docs/WorkflowsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Returns updated workflow. - 400 Invalid request. - 401 Unauthorized - 403 Permission denied. - 404 The workflow with the specified ID was not found. - 409 A conflict was found. Ensure the workflow name is unique. - 0 Unexpected issue. Please try your request again. If problem persists, please contact the system administrator. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/","title":"libica.openapi.v2","text":"<p>This API can be used to interact with Illumina Connected Analytics. <p> Authentication to the  API can be done in multiple ways: <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> API-key API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls. </p> <p> JWT To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint. </p> <p> Basic Authentication Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \\\"Basic base64encoded(emailaddress:password)\\\" in the \\\"Authorization\\\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \\\"tenant\\\" request parameter to indicate what tenant you would like to request a JWT for. </p> </p> <p>The <code>libica.openapi.v2</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: 3</li> <li>Package version: 1.0.0</li> <li>Build date: 2023-03-05T21:08:35.687325+11:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"v2/#requirements","title":"Requirements.","text":"<p>Python &gt;=3.7</p>"},{"location":"v2/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.25.3</li> <li>python-dateutil</li> </ul>"},{"location":"v2/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.v2, you can run the following:</p> <pre><code>import time\nimport libica.openapi.v2\nfrom pprint import pprint\nfrom libica.openapi.v2.api import analysis_storage_api\nfrom libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList\nfrom libica.openapi.v2.model.problem import Problem\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = analysis_storage_api.AnalysisStorageApi(api_client)\n\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v2/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to /ica/rest</p> Class Method HTTP request Description AnalysisStorageApi get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. BundleApi create_bundle POST /api/bundles Create a new bundle BundleApi deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle BundleApi get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. BundleApi get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. BundleApi get_bundles GET /api/bundles Retrieve a list of bundles. BundleApi insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle BundleApi release_bundle POST /api/bundles/{bundleId}:release release a bundle BundleDataApi get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. BundleDataApi link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. BundleDataApi unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. BundlePipelineApi get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. BundlePipelineApi link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. BundlePipelineApi unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. BundleSampleApi get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. BundleSampleApi link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. BundleSampleApi unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. BundleToolApi get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. BundleToolApi get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. BundleToolApi link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle BundleToolApi unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. ConnectorApi cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. ConnectorApi create_connector POST /api/connectors Create a connector. ConnectorApi create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. ConnectorApi create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. ConnectorApi delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. ConnectorApi delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. ConnectorApi disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. ConnectorApi enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. ConnectorApi get_connector GET /api/connectors/{connectorId} Retrieve a connector. ConnectorApi get_connectors GET /api/connectors Retrieve a list of connectors. ConnectorApi get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. ConnectorApi get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. ConnectorApi get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. ConnectorApi get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. ConnectorApi update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. ConnectorApi update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. DataApi create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. DataApi create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. DataApi get_data GET /api/data/{dataUrn} Retrieve a data. DataFormatApi get_data_formats GET /api/dataFormats Retrieve a list of data formats. EntitledBundleApi get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. EntitledBundleApi get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles. EntitlementDetailApi find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. EntitlementDetailApi find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. EntitlementDetailApi find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. EntitlementDetailApi find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. EventCodeApi get_event_codes GET /api/eventCodes Retrieve event codes EventLogApi get_event_logs GET /api/eventLog Retrieve a list of event logs. JobApi get_job GET /api/jobs/{jobId} Retrieve a job. JobApi get_jobs GET /api/jobs Retrieve a list of jobs. MetadataModelApi get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. MetadataModelApi get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. NotificationChannelApi create_notification_channel POST /api/notificationChannels Create a notification channel NotificationChannelApi delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel NotificationChannelApi get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel NotificationChannelApi get_notification_channels GET /api/notificationChannels Retrieve notification channels NotificationChannelApi update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel PipelineApi get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. PipelineApi get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. PipelineApi get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. PipelineApi get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. PipelineApi get_pipelines GET /api/pipelines Retrieve a list of pipelines. PipelineLanguageApi get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions. ProjectApi create_project POST /api/projects Create a new project. ProjectApi get_project GET /api/projects/{projectId} Retrieve a project. ProjectApi get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. ProjectApi get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. ProjectApi get_projects GET /api/projects Retrieve a list of projects. ProjectApi hide_project POST /api/projects/{projectId}:hide Hide a project. ProjectApi link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. ProjectApi unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. ProjectApi update_project PUT /api/projects/{projectId} Update a project. ProjectAnalysisApi abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. ProjectAnalysisApi create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. ProjectAnalysisApi create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. ProjectAnalysisApi get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. ProjectAnalysisApi get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. ProjectAnalysisApi get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. ProjectAnalysisApi get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. ProjectAnalysisApi get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. The list might be incomplete if a folder contains too many output files, but all the data can always be retrieved through the GET data endpoint. ProjectAnalysisApi get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. ProjectAnalysisApi get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. ProjectAnalysisApi get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. ProjectAnalysisApi get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. ProjectAnalysisApi update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. ProjectAnalysisCreationBatchApi create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_item1 GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item. ProjectBaseApi create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. ProjectBaseApi get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. ProjectBaseApi get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs ProjectBaseApi get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. ProjectBaseApi load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. ProjectCustomEventsApi create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. ProjectCustomNotificationSubscriptionsApi create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription ProjectCustomNotificationSubscriptionsApi delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectCustomNotificationSubscriptionsApi get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions ProjectCustomNotificationSubscriptionsApi update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription ProjectDataApi add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. ProjectDataApi archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. ProjectDataApi complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. ProjectDataApi create_data_in_project POST /api/projects/{projectId}/data Create data in this project. ProjectDataApi create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. ProjectDataApi create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. ProjectDataApi create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. ProjectDataApi create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. ProjectDataApi create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. ProjectDataApi create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. ProjectDataApi delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. ProjectDataApi get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. ProjectDataApi get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. ProjectDataApi get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. ProjectDataApi get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. ProjectDataApi get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. ProjectDataApi get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. ProjectDataApi get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. ProjectDataApi get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. ProjectDataApi link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. ProjectDataApi remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. ProjectDataApi schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. ProjectDataApi unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. ProjectDataApi unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. ProjectDataApi update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. ProjectDataLinkingBatchApi create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. ProjectDataLinkingBatchApi get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items. ProjectDataTransferApi abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. ProjectDataTransferApi get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. ProjectDataTransferApi get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. ProjectNotificationSubscriptionsApi create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription ProjectNotificationSubscriptionsApi delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions ProjectNotificationSubscriptionsApi update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription ProjectPermissionApi create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. ProjectPermissionApi get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. ProjectPermissionApi get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. ProjectPermissionApi update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. ProjectPipelineApi create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. ProjectPipelineApi create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. ProjectPipelineApi get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. ProjectPipelineApi get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. ProjectPipelineApi get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. ProjectPipelineApi get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. ProjectPipelineApi get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. ProjectPipelineApi link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. ProjectPipelineApi release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. ProjectPipelineApi unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. ProjectSampleApi add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. ProjectSampleApi complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. ProjectSampleApi create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project ProjectSampleApi deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. ProjectSampleApi delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. ProjectSampleApi delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. ProjectSampleApi get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. ProjectSampleApi get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. ProjectSampleApi get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. ProjectSampleApi get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. ProjectSampleApi get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. ProjectSampleApi get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. ProjectSampleApi get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. ProjectSampleApi link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. ProjectSampleApi link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. ProjectSampleApi mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. ProjectSampleApi unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. ProjectSampleApi unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. ProjectSampleApi update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. ProjectSampleApi update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. ProjectSampleBatchApi create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. ProjectSampleBatchApi get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items. ReferenceSetApi get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. ReferenceSetApi get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set. RegionApi get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. RegionApi get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. SampleApi get_samples GET /api/samples Retrieve a list of samples. StorageBundleApi get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. StorageConfigurationApi create_storage_configuration POST /api/storageConfigurations Create a new storage configuration StorageConfigurationApi get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. StorageConfigurationApi get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. StorageConfigurationApi get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. StorageConfigurationApi share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant. StorageCredentialsApi create_storage_credential POST /api/storageCredentials Create a new storage credential StorageCredentialsApi get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. StorageCredentialsApi get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. StorageCredentialsApi share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. StorageCredentialsApi update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. TokenApi create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. TokenApi refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. UserApi approve_user POST /api/users/{userId}:approve Approve a user. UserApi assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. UserApi get_user GET /api/users/{userId} Retrieve a user. UserApi get_users GET /api/users Retrieve a list of users. UserApi revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. UserApi update_user PUT /api/users/{userId} Update a user. WorkgroupApi get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. WorkgroupApi get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v2/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AWSDetails</li> <li>ActivationCodeDetail</li> <li>ActivationCodeDetailList</li> <li>ActivationCodeDetailUsage</li> <li>Analysis</li> <li>AnalysisCreationBatch</li> <li>AnalysisCreationBatchItem</li> <li>AnalysisCreationBatchItemPagedList</li> <li>AnalysisCreationBatchItemProcessing</li> <li>AnalysisCreationBatchItemRequest</li> <li>AnalysisData</li> <li>AnalysisDataInput</li> <li>AnalysisInput</li> <li>AnalysisInputDataMount</li> <li>AnalysisInputList</li> <li>AnalysisOutput</li> <li>AnalysisOutputList</li> <li>AnalysisOutputMapping</li> <li>AnalysisPagedList</li> <li>AnalysisParameterInput</li> <li>AnalysisRawOutput</li> <li>AnalysisReferenceDataParameter</li> <li>AnalysisStep</li> <li>AnalysisStepList</li> <li>AnalysisStepLogs</li> <li>AnalysisStorage</li> <li>AnalysisStorageList</li> <li>AnalysisTag</li> <li>Application</li> <li>AwsCredentials</li> <li>AwsTempCredentials</li> <li>BaseConnection</li> <li>BaseJob</li> <li>BaseJobList</li> <li>Bundle</li> <li>BundleData</li> <li>BundleDataPagedList</li> <li>BundleList</li> <li>BundlePagedList</li> <li>BundlePipeline</li> <li>BundlePipelineList</li> <li>BundleSample</li> <li>BundleSamplePagedList</li> <li>BundleTool</li> <li>BundleToolsList</li> <li>CWLToolDefinition</li> <li>CompleteFolderUploadSession</li> <li>Connector</li> <li>ConnectorList</li> <li>Country</li> <li>CreateAnalysisCreationBatch</li> <li>CreateBundle</li> <li>CreateConnector</li> <li>CreateCustomEvent</li> <li>CreateCustomNotificationSubscription</li> <li>CreateCwlAnalysis</li> <li>CreateData</li> <li>CreateDownloadRule</li> <li>CreateNextflowAnalysis</li> <li>CreateNotificationChannel</li> <li>CreateNotificationSubscription</li> <li>CreateProject</li> <li>CreateProjectDataLinkingBatch</li> <li>CreateProjectDataLinkingBatchItem</li> <li>CreateProjectPermission</li> <li>CreateSample</li> <li>CreateSampleCreationBatch</li> <li>CreateSampleCreationBatchDataItem</li> <li>CreateSampleCreationBatchSampleItem</li> <li>CreateStorageConfiguration</li> <li>CreateStorageCredential</li> <li>CreateTemporaryCredentials</li> <li>CreateTermsOfUse</li> <li>CreateUploadRule</li> <li>CustomNotificationSubscription</li> <li>CustomNotificationSubscriptionList</li> <li>CwlAnalysisInput</li> <li>CwlAnalysisInputJson</li> <li>CwlAnalysisJsonInput</li> <li>CwlAnalysisOutputJson</li> <li>CwlAnalysisStructuredInput</li> <li>CwlToolDefinitionList</li> <li>Data</li> <li>DataDetails</li> <li>DataFormat</li> <li>DataFormatPagedList</li> <li>DataIdOrPathList</li> <li>DataList</li> <li>DataPagedList</li> <li>DataTag</li> <li>DataTransfer</li> <li>DataTransferPagedList</li> <li>DataUrlWithPath</li> <li>DataUrlWithPathList</li> <li>Download</li> <li>DownloadRule</li> <li>DownloadRuleList</li> <li>EventCode</li> <li>EventCodeList</li> <li>EventLog</li> <li>EventLogList</li> <li>ExecutionConfiguration</li> <li>ExecutionConfigurationList</li> <li>Field</li> <li>FieldId</li> <li>FieldList</li> <li>FindProjectSamples</li> <li>FindSampleBooleanCondition</li> <li>FindSampleCondition</li> <li>FindSampleDateCondition</li> <li>FindSampleNumberCondition</li> <li>FolderUploadSession</li> <li>InlineView</li> <li>InputParameter</li> <li>InputParameterList</li> <li>InputPart</li> <li>InputPartMediaType</li> <li>Job</li> <li>JobPagedList</li> <li>Link</li> <li>Links</li> <li>LoadDataInBaseRequest</li> <li>MetadataField</li> <li>MetadataModel</li> <li>MetadataModelList</li> <li>Model</li> <li>MultipartFormDataInput</li> <li>NextflowAnalysisInput</li> <li>NotificationChannel</li> <li>NotificationChannelList</li> <li>NotificationSubscription</li> <li>NotificationSubscriptionList</li> <li>OptionalSampleTags</li> <li>Pipeline</li> <li>PipelineBundle</li> <li>PipelineHtmlDocumentation</li> <li>PipelineLanguageVersion</li> <li>PipelineLanguageVersionList</li> <li>PipelineList</li> <li>PipelineTag</li> <li>Problem</li> <li>Project</li> <li>ProjectBaseTable</li> <li>ProjectBaseTableList</li> <li>ProjectBundle</li> <li>ProjectBundleList</li> <li>ProjectData</li> <li>ProjectDataLinkingBatch</li> <li>ProjectDataLinkingBatchItem</li> <li>ProjectDataLinkingBatchItemPagedList</li> <li>ProjectDataLinkingBatchItemProcessing</li> <li>ProjectDataLinkingBatchItemRequest</li> <li>ProjectDataPagedList</li> <li>ProjectList</li> <li>ProjectPagedList</li> <li>ProjectPermission</li> <li>ProjectPermissionList</li> <li>ProjectPipeline</li> <li>ProjectPipelineList</li> <li>ProjectSample</li> <li>ProjectSamplePagedList</li> <li>ProjectTag</li> <li>RcloneTempCredentials</li> <li>ReferenceData</li> <li>ReferenceDataList</li> <li>ReferenceSet</li> <li>ReferenceSetList</li> <li>Region</li> <li>RegionList</li> <li>Sample</li> <li>SampleCreationBatch</li> <li>SampleCreationBatchItemPagedList</li> <li>SampleCreationBatchItemProcessing</li> <li>SampleCreationBatchItemRequest</li> <li>SampleCreationBatchSampleItem</li> <li>SampleHistory</li> <li>SampleHistoryList</li> <li>SamplePagedList</li> <li>SampleTag</li> <li>ScheduleDownload</li> <li>SearchMatchingActivationCodesForCwlAnalysis</li> <li>SearchMatchingActivationCodesForNextflowAnalysis</li> <li>SequencingRun</li> <li>Species</li> <li>SpeciesList</li> <li>StorageBundle</li> <li>StorageBundleList</li> <li>StorageConfiguration</li> <li>StorageConfigurationDetails</li> <li>StorageConfigurationWithDetails</li> <li>StorageConfigurationWithDetailsList</li> <li>StorageCredential</li> <li>StorageCredentialList</li> <li>TempCredentials</li> <li>TermsOfUse</li> <li>Token</li> <li>Type</li> <li>TypeList</li> <li>UpdateMetadata</li> <li>UpdateMetadataFieldGroup</li> <li>UpdateSingleMetadataField</li> <li>UpdateStorageCredentialSecrets</li> <li>Upload</li> <li>UploadRule</li> <li>UploadRuleList</li> <li>User</li> <li>UserList</li> <li>Workflow</li> <li>WorkflowSession</li> <li>WorkflowSessionTag</li> <li>Workgroup</li> <li>WorkgroupList</li> </ul>"},{"location":"v2/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"v2/#apikeyauth","title":"ApiKeyAuth","text":"<ul> <li>Type: API key</li> <li>API key parameter name: X-API-Key</li> <li>Location: HTTP header</li> </ul>"},{"location":"v2/#basicauth","title":"BasicAuth","text":"<ul> <li>Type: HTTP basic authentication</li> </ul>"},{"location":"v2/#jwtauth","title":"JwtAuth","text":"<ul> <li>Type: Bearer authentication (JWT)</li> </ul>"},{"location":"v2/#pstokenauth","title":"PsTokenAuth","text":"<ul> <li>Type: Bearer authentication (psToken)</li> </ul>"},{"location":"v2/#author","title":"Author","text":""},{"location":"v2/#notes-for-large-openapi-documents","title":"Notes for Large OpenAPI documents","text":"<p>If the OpenAPI document is large, imports in libica.openapi.v2.apis and libica.openapi.v2.models may fail with a RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:</p> <p>Solution 1: Use specific imports for apis and models like: - <code>from libica.openapi.v2.api.default_api import DefaultApi</code> - <code>from libica.openapi.v2.model.pet import Pet</code></p> <p>Solution 2: Before importing the package, adjust the maximum recursion limit as shown below:</p> <pre><code>import sys\nsys.setrecursionlimit(1500)\nimport libica.openapi.v2\nfrom libica.openapi.v2.apis import *\nfrom libica.openapi.v2.models import *\n</code></pre>"},{"location":"v2/docs/AWSDetails/","title":"AWSDetails","text":""},{"location":"v2/docs/AWSDetails/#properties","title":"Properties","text":"Name Type Description Notes bucket_name str The name of the s3 bucket key_prefix str, none_type Key prefix within the bucket for ICA to operate within. Data may only be created having this prefix and the given credentials will only give access to it. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\". [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetail/","title":"ActivationCodeDetail","text":""},{"location":"v2/docs/ActivationCodeDetail/#properties","title":"Properties","text":"Name Type Description Notes id str allowed_slots int The allowed slot within this code, -1 means unlimited used_slots int Indicates how many slots can are used. moved_slots int The slots that where moved to another activation code original_slots int The assigned allowed slot within this code, -1 means unlimited pipeline_bundle PipelineBundle usages [ActivationCodeDetailUsage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetailList/","title":"ActivationCodeDetailList","text":""},{"location":"v2/docs/ActivationCodeDetailList/#properties","title":"Properties","text":"Name Type Description Notes items [ActivationCodeDetail] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetailUsage/","title":"ActivationCodeDetailUsage","text":""},{"location":"v2/docs/ActivationCodeDetailUsage/#properties","title":"Properties","text":"Name Type Description Notes id str used_slots int Indicates how many slots can are used, -1 means unused allowed_slots int Indicates how many slots can be used, -1 means unlimited project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Analysis/","title":"Analysis","text":""},{"location":"v2/docs/Analysis/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline Pipeline status str The status of the analysis tags AnalysisTag tenant_name str, none_type [optional] workflow_session WorkflowSession [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorage [optional] analysis_priority str, none_type The priority of the analysis [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatch/","title":"AnalysisCreationBatch","text":""},{"location":"v2/docs/AnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItem/","title":"AnalysisCreationBatchItem","text":""},{"location":"v2/docs/AnalysisCreationBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis Analysis [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemPagedList/","title":"AnalysisCreationBatchItemPagedList","text":""},{"location":"v2/docs/AnalysisCreationBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisCreationBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemProcessing/","title":"AnalysisCreationBatchItemProcessing","text":""},{"location":"v2/docs/AnalysisCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemRequest/","title":"AnalysisCreationBatchItemRequest","text":""},{"location":"v2/docs/AnalysisCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes user_reference str pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisData/","title":"AnalysisData","text":""},{"location":"v2/docs/AnalysisData/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the analysis. data_type str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisDataInput/","title":"AnalysisDataInput","text":""},{"location":"v2/docs/AnalysisDataInput/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInput/","title":"AnalysisInput","text":""},{"location":"v2/docs/AnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data [AnalysisData], none_type The analysis-data used as input by the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInputDataMount/","title":"AnalysisInputDataMount","text":""},{"location":"v2/docs/AnalysisInputDataMount/#properties","title":"Properties","text":"Name Type Description Notes data_id str mount_path str The mount path is the location where the input file will be located on the machine that is running the pipeline. The use of a relative path is encouraged, but an absolute path is also allowed. The path should end with the file name, which may differ from the original input data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInputList/","title":"AnalysisInputList","text":""},{"location":"v2/docs/AnalysisInputList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisInput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutput/","title":"AnalysisOutput","text":""},{"location":"v2/docs/AnalysisOutput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the output-parameter. project_id str The ID of the project containing the analysis-data produced by the analysis for the output-parameter. [optional] data [AnalysisData] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutputList/","title":"AnalysisOutputList","text":""},{"location":"v2/docs/AnalysisOutputList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisOutput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutputMapping/","title":"AnalysisOutputMapping","text":""},{"location":"v2/docs/AnalysisOutputMapping/#properties","title":"Properties","text":"Name Type Description Notes source_path str target_project_id str target_path str type str [optional] action_on_exist str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisPagedList/","title":"AnalysisPagedList","text":""},{"location":"v2/docs/AnalysisPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Analysis] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisParameter/","title":"AnalysisParameter","text":""},{"location":"v2/docs/AnalysisParameter/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] value str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisParameterInput/","title":"AnalysisParameterInput","text":"<p>Supports multi-value parameters, only one of attributes 'value' or 'multiValue' must be provided</p>"},{"location":"v2/docs/AnalysisParameterInput/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] value str, none_type The value for single-value parameters. [optional] multi_value [str, none_type], none_type The values for multi-value parameters. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisRawOutput/","title":"AnalysisRawOutput","text":""},{"location":"v2/docs/AnalysisRawOutput/#properties","title":"Properties","text":"Name Type Description Notes raw_output str The raw output of the analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisReferenceDataParameter/","title":"AnalysisReferenceDataParameter","text":""},{"location":"v2/docs/AnalysisReferenceDataParameter/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str [optional] reference_data_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStep/","title":"AnalysisStep","text":""},{"location":"v2/docs/AnalysisStep/#properties","title":"Properties","text":"Name Type Description Notes id str name str status str The status of the analysis step technical bool Indicates which kind of step was executed logs AnalysisStepLogs queue_date datetime, none_type When the analysis step was queued [optional] start_date datetime, none_type When the analysis step was started [optional] end_date datetime, none_type When the analysis step was finished [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStepList/","title":"AnalysisStepList","text":""},{"location":"v2/docs/AnalysisStepList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStep] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStepLogs/","title":"AnalysisStepLogs","text":"<p>Contains references to the standard output (stdout) and standard error (stderr) log streams of an analysis step. In this object both log streams could be provided in 2 different formats: as a WebSocket stream URL or as an ICA Data reference. The status of the analysis step determines which format is provided: a WebSocket URL during step execution, a Data reference after step execution. Note however that an analysis step might not expose log streams at all, which would result in this object being empty. </p>"},{"location":"v2/docs/AnalysisStepLogs/#properties","title":"Properties","text":"Name Type Description Notes std_out_data Data [optional] std_out_stream str, none_type A WebSocket URL for reading the standard output log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional] std_err_data Data [optional] std_err_stream str, none_type A WebSocket URL for reading the standard error log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorage/","title":"AnalysisStorage","text":""},{"location":"v2/docs/AnalysisStorage/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage option tenant_name str, none_type [optional] description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageApi/","title":"libica.openapi.v2.AnalysisStorageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options."},{"location":"v2/docs/AnalysisStorageApi/#get_analysis_storage_options","title":"get_analysis_storage_options","text":"<p>AnalysisStorageList get_analysis_storage_options()</p> <p>Retrieve the list of analysis storage options.</p>"},{"location":"v2/docs/AnalysisStorageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import analysis_storage_api\nfrom libica.openapi.v2.model.analysis_storage_list import AnalysisStorageList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = analysis_storage_api.AnalysisStorageApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/AnalysisStorageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/AnalysisStorageApi/#return-type","title":"Return type","text":"<p>AnalysisStorageList</p>"},{"location":"v2/docs/AnalysisStorageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/AnalysisStorageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/AnalysisStorageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis storage options is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageList/","title":"AnalysisStorageList","text":""},{"location":"v2/docs/AnalysisStorageList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStorage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisTag/","title":"AnalysisTag","text":""},{"location":"v2/docs/AnalysisTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] Technical tags user_tags [str] User tags reference_tags [str] Reference tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Application/","title":"Application","text":""},{"location":"v2/docs/Application/#properties","title":"Properties","text":"Name Type Description Notes id str name str The unique name identifying the application type str The type of the application display_name str, none_type The display name of the application [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AwsCredentials/","title":"AwsCredentials","text":""},{"location":"v2/docs/AwsCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key_id str The access key found in aws console secret_access_key str The secret access key found in aws console any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AwsTempCredentials/","title":"AwsTempCredentials","text":""},{"location":"v2/docs/AwsTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key str The S3 access key. secret_key str The S3 secret key. session_token str The S3 session token. region str The S3 region. bucket str The S3 bucket name. object_prefix str The S3 object prefix these temporary credentials will give access to. server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\" [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseConnection/","title":"BaseConnection","text":""},{"location":"v2/docs/BaseConnection/#properties","title":"Properties","text":"Name Type Description Notes authenticator str Specifies the supported snowflake authenticator to use. Currently 'oauth' only is supported access_token str Specifies the OAuth token to use for authentication dns_name str snowflake dns name. Usually something like '&lt;&lt;account&gt;&gt;.snowflakecomputing.com' user_principal_name str Specifies the user principal name. This is required for some snowflake client (snowSQL for instance) database_name str Specifies the database name bound to the project specified schema_name str Specifies the schema name bound to the project specified warehouse_name str Specifies the warehouse name bound to the project specified role_name str Specifies the role name bound to the project specified any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseJob/","title":"BaseJob","text":""},{"location":"v2/docs/BaseJob/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str type str The type of the job status str The status of the job tenant_name str, none_type [optional] description str, none_type A short description of the base job [optional] table ProjectBaseTable [optional] overall_duration int, none_type The duration of the job expressed in milliseconds [optional] details str, none_type Detailed description of the job [optional] bytes_billed int, none_type Bytes billed [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseJobList/","title":"BaseJobList","text":""},{"location":"v2/docs/BaseJobList/#properties","title":"Properties","text":"Name Type Description Notes items [BaseJob] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Bundle/","title":"Bundle","text":""},{"location":"v2/docs/Bundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str region Region release_version str status str tenant_name str, none_type [optional] short_description str, none_type [optional] metadata_model MetadataModel [optional] version_comment str, none_type [optional] categories [str, none_type], none_type category tags as string array [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/","title":"libica.openapi.v2.BundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_bundle POST /api/bundles Create a new bundle deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. get_bundles GET /api/bundles Retrieve a list of bundles. insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle release_bundle POST /api/bundles/{bundleId}:release release a bundle"},{"location":"v2/docs/BundleApi/#create_bundle","title":"create_bundle","text":"<p>Bundle create_bundle()</p> <p>Create a new bundle</p>"},{"location":"v2/docs/BundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.create_bundle import CreateBundle\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    create_bundle = CreateBundle(\n        name=\"name_example\",\n        short_description=\"short_description_example\",\n        bundle_release_version=\"bundle_release_version_example\",\n        bundle_version_comment=\"bundle_version_comment_example\",\n        region_id=\"region_id_example\",\n        metadata_model_id=\"metadata_model_id_example\",\n        bundle_status=\"DRAFT\",\n        categories=[\n            \"categories_example\",\n        ],\n        links=Links(\n            links=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            licenses=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            homepages=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            publications=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n        ),\n    ) # CreateBundle |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a new bundle\n        api_response = api_instance.create_bundle(create_bundle=create_bundle)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;create_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_bundle CreateBundle [optional]"},{"location":"v2/docs/BundleApi/#return-type","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/BundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#deprecate_bundle","title":"deprecate_bundle","text":"<p>deprecate_bundle(bundle_id)</p> <p>deprecate a bundle</p>"},{"location":"v2/docs/BundleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to deprecate.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # deprecate a bundle\n        api_instance.deprecate_bundle(bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;deprecate_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to deprecate."},{"location":"v2/docs/BundleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully deprecated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundle","title":"get_bundle","text":"<p>Bundle get_bundle(bundle_id)</p> <p>Retrieve a bundle.</p>"},{"location":"v2/docs/BundleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle.\n        api_response = api_instance.get_bundle(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve"},{"location":"v2/docs/BundleApi/#return-type_2","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/BundleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundle_terms_of_use","title":"get_bundle_terms_of_use","text":"<p>TermsOfUse get_bundle_terms_of_use(bundle_id)</p> <p>Retrieve the last version of terms of use for a bundle.</p>"},{"location":"v2/docs/BundleApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.terms_of_use import TermsOfUse\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle of the terms of use to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the last version of terms of use for a bundle.\n        api_response = api_instance.get_bundle_terms_of_use(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle of the terms of use to retrieve"},{"location":"v2/docs/BundleApi/#return-type_3","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v2/docs/BundleApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundles","title":"get_bundles","text":"<p>BundlePagedList get_bundles()</p> <p>Retrieve a list of bundles.</p>"},{"location":"v2/docs/BundleApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = \"userTags_example\" # str | User tags to filter on (optional)\n    technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundles.\n        api_response = api_instance.get_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v2/docs/BundleApi/#return-type_4","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v2/docs/BundleApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#insert_bundle_terms_of_use","title":"insert_bundle_terms_of_use","text":"<p>TermsOfUse insert_bundle_terms_of_use(bundle_id)</p> <p>Insert a new version of the terms of use for a bundle</p>"},{"location":"v2/docs/BundleApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.create_terms_of_use import CreateTermsOfUse\nfrom libica.openapi.v2.model.terms_of_use import TermsOfUse\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to update\n    create_terms_of_use = CreateTermsOfUse(\n        terms_of_use=\"terms_of_use_example\",\n        requires_user_acceptance=True,\n        release_version=\"release_version_example\",\n        reset_acceptance_records=True,\n    ) # CreateTermsOfUse |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Insert a new version of the terms of use for a bundle\n        api_response = api_instance.insert_bundle_terms_of_use(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;insert_bundle_terms_of_use: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Insert a new version of the terms of use for a bundle\n        api_response = api_instance.insert_bundle_terms_of_use(bundle_id, create_terms_of_use=create_terms_of_use)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;insert_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to update create_terms_of_use CreateTermsOfUse [optional]"},{"location":"v2/docs/BundleApi/#return-type_5","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v2/docs/BundleApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 A new version of the terms of use are successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#release_bundle","title":"release_bundle","text":"<p>release_bundle(bundle_id)</p> <p>release a bundle</p>"},{"location":"v2/docs/BundleApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to release\n\n    # example passing only required values which don't have defaults set\n    try:\n        # release a bundle\n        api_instance.release_bundle(bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;release_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to release"},{"location":"v2/docs/BundleApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully released - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleData/","title":"BundleData","text":""},{"location":"v2/docs/BundleData/#properties","title":"Properties","text":"Name Type Description Notes data Data bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/","title":"libica.openapi.v2.BundleDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle."},{"location":"v2/docs/BundleDataApi/#get_bundle_data","title":"get_bundle_data","text":"<p>BundleDataPagedList get_bundle_data(bundle_id)</p> <p>Retrieve the list of bundle data.</p>"},{"location":"v2/docs/BundleDataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.bundle_data_paged_list import BundleDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = \"id_example\" # str | The ids to filter on. This will always match exact. (optional)\n    filename = \"filename_example\" # str | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional)\n    file_path = \"filePath_example\" # str | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = \"PARTIAL\" # str | The statuses to filter on. (optional)\n    format_id = \"formatId_example\" # str | The IDs of the formats to filter on. (optional)\n    format_code = \"formatCode_example\" # str | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = \"parentFolderId_example\" # str | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional)\n    creation_date_after = \"creationDateAfter_example\" # str | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = \"creationDateBefore_example\" # str | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = \"statusDateAfter_example\" # str | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = \"statusDateBefore_example\" # str | The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = \"userTag_example\" # str | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional)\n    run_input_tag = \"runInputTag_example\" # str | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional)\n    run_output_tag = \"runOutputTag_example\" # str | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional)\n    connector_tag = \"connectorTag_example\" # str | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional)\n    technical_tag = \"technicalTag_example\" # str | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional)\n    not_in_run = \"notInRun_example\" # str | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = \"notLinkedToSample_example\" # str | When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of bundle data.\n        api_response = api_instance.get_bundle_data(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;get_bundle_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of bundle data.\n        api_response = api_instance.get_bundle_data(bundle_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;get_bundle_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str full_text str To search through multiple fields of data. [optional] id str The ids to filter on. This will always match exact. [optional] filename str The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path str The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status str The statuses to filter on. [optional] format_id str The IDs of the formats to filter on. [optional] format_code str The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id str The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after str The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before str The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after str The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before str The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag str The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag str The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag str The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag str The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag str The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run str When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample str When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/BundleDataApi/#return-type","title":"Return type","text":"<p>BundleDataPagedList</p>"},{"location":"v2/docs/BundleDataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/#link_data_to_bundle","title":"link_data_to_bundle","text":"<p>link_data_to_bundle(bundle_id, data_id)</p> <p>Link data to this bundle.</p>"},{"location":"v2/docs/BundleDataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to this bundle.\n        api_instance.link_data_to_bundle(bundle_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;link_data_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v2/docs/BundleDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleDataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/#unlink_data_from_bundle","title":"unlink_data_from_bundle","text":"<p>unlink_data_from_bundle(bundle_id, data_id)</p> <p>Unlink data from this bundle.</p>"},{"location":"v2/docs/BundleDataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from this bundle.\n        api_instance.unlink_data_from_bundle(bundle_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;unlink_data_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v2/docs/BundleDataApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleDataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataPagedList/","title":"BundleDataPagedList","text":""},{"location":"v2/docs/BundleDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleList/","title":"BundleList","text":""},{"location":"v2/docs/BundleList/#properties","title":"Properties","text":"Name Type Description Notes items [Bundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePagedList/","title":"BundlePagedList","text":""},{"location":"v2/docs/BundlePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Bundle] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePipeline/","title":"BundlePipeline","text":""},{"location":"v2/docs/BundlePipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline Pipeline bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/","title":"libica.openapi.v2.BundlePipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle."},{"location":"v2/docs/BundlePipelineApi/#get_bundle_pipelines","title":"get_bundle_pipelines","text":"<p>BundlePipelineList get_bundle_pipelines(bundle_id)</p> <p>Retrieve a list of bundle pipelines.</p>"},{"location":"v2/docs/BundlePipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.bundle_pipeline_list import BundlePipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve pipelines for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle pipelines.\n        api_response = api_instance.get_bundle_pipelines(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;get_bundle_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve pipelines for"},{"location":"v2/docs/BundlePipelineApi/#return-type","title":"Return type","text":"<p>BundlePipelineList</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/#link_pipeline_to_bundle","title":"link_pipeline_to_bundle","text":"<p>link_pipeline_to_bundle(bundle_id, pipeline_id)</p> <p>Link a pipeline to a bundle.</p>"},{"location":"v2/docs/BundlePipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a pipeline to a bundle.\n        api_instance.link_pipeline_to_bundle(bundle_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;link_pipeline_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v2/docs/BundlePipelineApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/#unlink_pipeline_from_bundle","title":"unlink_pipeline_from_bundle","text":"<p>unlink_pipeline_from_bundle(bundle_id, pipeline_id)</p> <p>Unlink a pipeline from a bundle.</p>"},{"location":"v2/docs/BundlePipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a pipeline from a bundle.\n        api_instance.unlink_pipeline_from_bundle(bundle_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;unlink_pipeline_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v2/docs/BundlePipelineApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineList/","title":"BundlePipelineList","text":""},{"location":"v2/docs/BundlePipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [BundlePipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleSample/","title":"BundleSample","text":""},{"location":"v2/docs/BundleSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/","title":"libica.openapi.v2.BundleSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle."},{"location":"v2/docs/BundleSampleApi/#get_bundle_samples","title":"get_bundle_samples","text":"<p>BundleSamplePagedList get_bundle_samples(bundle_id)</p> <p>Retrieve a list of bundle samples.</p>"},{"location":"v2/docs/BundleSampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.bundle_sample_paged_list import BundleSamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get bundle samples from\n    search = \"search_example\" # str | To search through multiple fields of data. (optional)\n    user_tags = \"userTags_example\" # str | The user tags to filter on. (optional)\n    technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle samples.\n        api_response = api_instance.get_bundle_samples(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;get_bundle_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundle samples.\n        api_response = api_instance.get_bundle_samples(bundle_id, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;get_bundle_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get bundle samples from search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v2/docs/BundleSampleApi/#return-type","title":"Return type","text":"<p>BundleSamplePagedList</p>"},{"location":"v2/docs/BundleSampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/#link_sample_to_bundle","title":"link_sample_to_bundle","text":"<p>link_sample_to_bundle(bundle_id, sample_id)</p> <p>Link a sample to a bundle.</p>"},{"location":"v2/docs/BundleSampleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a sample to a bundle.\n        api_instance.link_sample_to_bundle(bundle_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;link_sample_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v2/docs/BundleSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleSampleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/#unlink_sample_from_bundle","title":"unlink_sample_from_bundle","text":"<p>unlink_sample_from_bundle(bundle_id, sample_id)</p> <p>Unlink a sample from a bundle.</p>"},{"location":"v2/docs/BundleSampleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a sample from a bundle.\n        api_instance.unlink_sample_from_bundle(bundle_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;unlink_sample_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v2/docs/BundleSampleApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleSampleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSamplePagedList/","title":"BundleSamplePagedList","text":""},{"location":"v2/docs/BundleSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleTool/","title":"BundleTool","text":""},{"location":"v2/docs/BundleTool/#properties","title":"Properties","text":"Name Type Description Notes cwl_tool_definition CWLToolDefinition any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/","title":"libica.openapi.v2.BundleToolApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle."},{"location":"v2/docs/BundleToolApi/#get_bundle_tools","title":"get_bundle_tools","text":"<p>BundleToolsList get_bundle_tools(bundle_id)</p> <p>Retrieve a list of bundle tools.</p>"},{"location":"v2/docs/BundleToolApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.bundle_tools_list import BundleToolsList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get tools from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle tools.\n        api_response = api_instance.get_bundle_tools(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_bundle_tools: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get tools from"},{"location":"v2/docs/BundleToolApi/#return-type","title":"Return type","text":"<p>BundleToolsList</p>"},{"location":"v2/docs/BundleToolApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#get_tools_eligible_for_linking_to_bundle","title":"get_tools_eligible_for_linking_to_bundle","text":"<p>CwlToolDefinitionList get_tools_eligible_for_linking_to_bundle(bundle_id)</p> <p>Retrieve a list of tools eligible for linking to the bundle.</p>"},{"location":"v2/docs/BundleToolApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.cwl_tool_definition_list import CwlToolDefinitionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get the eligible tools for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of tools eligible for linking to the bundle.\n        api_response = api_instance.get_tools_eligible_for_linking_to_bundle(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_tools_eligible_for_linking_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get the eligible tools for"},{"location":"v2/docs/BundleToolApi/#return-type_1","title":"Return type","text":"<p>CwlToolDefinitionList</p>"},{"location":"v2/docs/BundleToolApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#link_tool_to_bundle","title":"link_tool_to_bundle","text":"<p>link_tool_to_bundle(bundle_id, tool_id)</p> <p>Link a tool to a bundle</p>"},{"location":"v2/docs/BundleToolApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to link the tool to\n    tool_id = \"toolId_example\" # str | The ID of the tool to link\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a tool to a bundle\n        api_instance.link_tool_to_bundle(bundle_id, tool_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;link_tool_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to link the tool to tool_id str The ID of the tool to link"},{"location":"v2/docs/BundleToolApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleToolApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#unlink_tool_from_bundle","title":"unlink_tool_from_bundle","text":"<p>unlink_tool_from_bundle(bundle_id, tool_id)</p> <p>Unlink a tool from this bundle.</p>"},{"location":"v2/docs/BundleToolApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    tool_id = \"toolId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a tool from this bundle.\n        api_instance.unlink_tool_from_bundle(bundle_id, tool_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;unlink_tool_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str tool_id str"},{"location":"v2/docs/BundleToolApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleToolApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolsList/","title":"BundleToolsList","text":""},{"location":"v2/docs/BundleToolsList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleTool] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CWLToolDefinition/","title":"CWLToolDefinition","text":""},{"location":"v2/docs/CWLToolDefinition/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str Name of the tool definition status str Status of the tool definition tenant_name str, none_type [optional] description str, none_type Description of the tool definition [optional] version_comment str, none_type version comment of the tool definition [optional] release_version int, none_type release version of the tool definition [optional] links Link [optional] categories [str, none_type], none_type category tags as string array [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CompleteFolderUploadSession/","title":"CompleteFolderUploadSession","text":""},{"location":"v2/docs/CompleteFolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes number_of_expected_uploaded_files int The number of expected uploaded files within this session. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Connector/","title":"Connector","text":""},{"location":"v2/docs/Connector/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str active bool connected bool Indicates if the connector is connected or not. This is cached so even when the connector is no longer connected, for a short time this still may return true. technical_code str Technical code to be used for processing. mode str The mode the connector runs in. os str The target OS of the original connector installer. installation_status str new_connector_version_available bool tenant_name str, none_type [optional] initialization_key str, none_type The key provided via other channels to initialize the installation. [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/","title":"libica.openapi.v2.ConnectorApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. create_connector POST /api/connectors Create a connector. create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. get_connector GET /api/connectors/{connectorId} Retrieve a connector. get_connectors GET /api/connectors Retrieve a list of connectors. get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule."},{"location":"v2/docs/ConnectorApi/#cancel_connector","title":"cancel_connector","text":"<p>cancel_connector(connector_id)</p> <p>Cancel a connector.</p> <p>Endpoint for cancelling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Cancel a connector.\n        api_instance.cancel_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;cancel_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully cancelled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_connector","title":"create_connector","text":"<p>Connector create_connector()</p> <p>Create a connector.</p>"},{"location":"v2/docs/ConnectorApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_connector import CreateConnector\nfrom libica.openapi.v2.model.connector import Connector\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    create_connector = CreateConnector(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        mode=\"DOWNLOAD\",\n        max_bandwidth=0.01,\n        max_concurrent_transfers=2,\n        os=\"WINDOWS\",\n    ) # CreateConnector | The connector to create. (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a connector.\n        api_response = api_instance.create_connector(create_connector=create_connector)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_connector CreateConnector The connector to create. [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_1","title":"Return type","text":"<p>Connector</p>"},{"location":"v2/docs/ConnectorApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The connector is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_download_rule","title":"create_download_rule","text":"<p>DownloadRule create_download_rule(connector_id)</p> <p>Create a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_download_rule import CreateDownloadRule\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    create_download_rule = CreateDownloadRule(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        sequence=0,\n        format_code=\"format_code_example\",\n        project_name=\"project_name_example\",\n        target_local_folder=\"target_local_folder_example\",\n        file_name_expression=\"file_name_expression_example\",\n    ) # CreateDownloadRule |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a download rule.\n        api_response = api_instance.create_download_rule(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_download_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a download rule.\n        api_response = api_instance.create_download_rule(connector_id, create_download_rule=create_download_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes connector_id str create_download_rule CreateDownloadRule [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_2","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The download rule is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_upload_rule","title":"create_upload_rule","text":"<p>UploadRule create_upload_rule(connector_id)</p> <p>Create an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_upload_rule import CreateUploadRule\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    create_upload_rule = CreateUploadRule(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        local_folder=\"local_folder_example\",\n        file_pattern=\"file_pattern_example\",\n        data_format_id=\"data_format_id_example\",\n        project_id=\"project_id_example\",\n    ) # CreateUploadRule |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create an upload rule.\n        api_response = api_instance.create_upload_rule(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_upload_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create an upload rule.\n        api_response = api_instance.create_upload_rule(connector_id, create_upload_rule=create_upload_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes connector_id str create_upload_rule CreateUploadRule [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_3","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The upload rule is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#delete_download_rule","title":"delete_download_rule","text":"<p>delete_download_rule(connector_id, download_rule_id)</p> <p>Delete a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a download rule.\n        api_instance.delete_download_rule(connector_id, download_rule_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The download rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#delete_upload_rule","title":"delete_upload_rule","text":"<p>delete_upload_rule(connector_id, upload_rule_id)</p> <p>Delete an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete an upload rule.\n        api_instance.delete_upload_rule(connector_id, upload_rule_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The upload rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#disable_connector","title":"disable_connector","text":"<p>disable_connector(connector_id)</p> <p>Disable a connector.</p> <p>Endpoint for disabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Disable a connector.\n        api_instance.disable_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;disable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully disabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#enable_connector","title":"enable_connector","text":"<p>enable_connector(connector_id)</p> <p>Enable a connector.</p> <p>Endpoint for enabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Enable a connector.\n        api_instance.enable_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;enable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully enabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_connector","title":"get_connector","text":"<p>Connector get_connector(connector_id)</p> <p>Retrieve a connector.</p>"},{"location":"v2/docs/ConnectorApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.connector import Connector\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a connector.\n        api_response = api_instance.get_connector(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_8","title":"Return type","text":"<p>Connector</p>"},{"location":"v2/docs/ConnectorApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The connector is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_connectors","title":"get_connectors","text":"<p>ConnectorList get_connectors()</p> <p>Retrieve a list of connectors.</p>"},{"location":"v2/docs/ConnectorApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.connector_list import ConnectorList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    active_only = True # bool | When true only the active connectors will be returned. When false (default value) all connectors wil be returned. (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of connectors.\n        api_response = api_instance.get_connectors(active_only=active_only)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connectors: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes active_only bool When true only the active connectors will be returned. When false (default value) all connectors wil be returned. [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_9","title":"Return type","text":"<p>ConnectorList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of connectors is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_download_rule","title":"get_download_rule","text":"<p>DownloadRule get_download_rule(connector_id, download_rule_id)</p> <p>Retrieve a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download rule.\n        api_response = api_instance.get_download_rule(connector_id, download_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_10","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_download_rules","title":"get_download_rules","text":"<p>DownloadRuleList get_download_rules(connector_id)</p> <p>Retrieve a list of download rules.</p>"},{"location":"v2/docs/ConnectorApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule_list import DownloadRuleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of download rules.\n        api_response = api_instance.get_download_rules(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_11","title":"Return type","text":"<p>DownloadRuleList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The download rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_upload_rule","title":"get_upload_rule","text":"<p>UploadRule get_upload_rule(connector_id, upload_rule_id)</p> <p>Retrieve an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an upload rule.\n        api_response = api_instance.get_upload_rule(connector_id, upload_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_12","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_upload_rules","title":"get_upload_rules","text":"<p>UploadRuleList get_upload_rules(connector_id)</p> <p>Retrieve a list of upload rules.</p>"},{"location":"v2/docs/ConnectorApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule_list import UploadRuleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of upload rules.\n        api_response = api_instance.get_upload_rules(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_13","title":"Return type","text":"<p>UploadRuleList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#update_download_rule","title":"update_download_rule","text":"<p>DownloadRule update_download_rule(connector_id, download_rule_id)</p> <p>Update a download rule.</p> <p>Fields which can be updated:  - code  - active  - description  - sequence  - formatCode  - projectName  - targetLocalFolder  - protocol  - fileNameExpression  - disableHashing</p>"},{"location":"v2/docs/ConnectorApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    download_rule = DownloadRule(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        sequence=0,\n        format_code=\"format_code_example\",\n        project_name=\"project_name_example\",\n        target_local_folder=\"target_local_folder_example\",\n        file_name_expression=\"file_name_expression_example\",\n    ) # DownloadRule |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a download rule.\n        api_response = api_instance.update_download_rule(connector_id, download_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_download_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a download rule.\n        api_response = api_instance.update_download_rule(connector_id, download_rule_id, if_match=if_match, download_rule=download_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] download_rule DownloadRule [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_14","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#update_upload_rule","title":"update_upload_rule","text":"<p>UploadRule update_upload_rule(connector_id, upload_rule_id)</p> <p>Update an upload rule.</p> <p>Fields which can be updated:  - code  - active  - description  - localFolder  - filePattern  - dataFormat </p>"},{"location":"v2/docs/ConnectorApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    upload_rule = UploadRule(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        local_folder=\"local_folder_example\",\n        file_pattern=\"file_pattern_example\",\n        data_format=DataFormat(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            description=\"description_example\",\n            mime_type=\"mime_type_example\",\n        ),\n        project=Project(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            urn=\"urn_example\",\n            name=\"name_example\",\n            active=True,\n            base_enabled=True,\n            short_description=\"short_description_example\",\n            information=\"information_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            billing_mode=\"PROJECT\",\n            data_sharing_enabled=True,\n            tags=ProjectTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n            ),\n            storage_bundle=StorageBundle(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                bundle_name=\"bundle_name_example\",\n                entitlement_name=\"entitlement_name_example\",\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n            ),\n            self_managed_storage_configuration=StorageConfiguration(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n                type=\"AWS_S3\",\n                status=\"INITIALIZING\",\n                error_message=\"error_message_example\",\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n                is_default=True,\n            ),\n            analysis_priority=\"Low\",\n            metadata_model=MetadataModel(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n                state=\"DRAFT\",\n                parent_model_id=\"parent_model_id_example\",\n            ),\n            application=Application(\n                id=\"id_example\",\n                name=\"name_example\",\n                type=\"MAIN\",\n                display_name=\"display_name_example\",\n            ),\n        ),\n    ) # UploadRule |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update an upload rule.\n        api_response = api_instance.update_upload_rule(connector_id, upload_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_upload_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update an upload rule.\n        api_response = api_instance.update_upload_rule(connector_id, upload_rule_id, if_match=if_match, upload_rule=upload_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] upload_rule UploadRule [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_15","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorList/","title":"ConnectorList","text":""},{"location":"v2/docs/ConnectorList/#properties","title":"Properties","text":"Name Type Description Notes items [Connector] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Country/","title":"Country","text":""},{"location":"v2/docs/Country/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The country code as defined by ISO. name str The full name of the country. region str The region where the country belong to. tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateAnalysisCreationBatch/","title":"CreateAnalysisCreationBatch","text":""},{"location":"v2/docs/CreateAnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes cwl_items [CreateCwlAnalysis] [optional] nextflow_items [CreateNextflowAnalysis] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundle/","title":"CreateBundle","text":""},{"location":"v2/docs/CreateBundle/#properties","title":"Properties","text":"Name Type Description Notes name str bundle_release_version str region_id str bundle_status str categories [str] category tags as string array short_description str, none_type [optional] bundle_version_comment str, none_type [optional] metadata_model_id str, none_type [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateConnector/","title":"CreateConnector","text":""},{"location":"v2/docs/CreateConnector/#properties","title":"Properties","text":"Name Type Description Notes code str active bool mode str The mode the connector runs in. os str The target OS of the original connector installer. description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional]  if omitted the server will use the default value of 2 any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCustomEvent/","title":"CreateCustomEvent","text":""},{"location":"v2/docs/CreateCustomEvent/#properties","title":"Properties","text":"Name Type Description Notes code str The event code that should match a custom subscription. content {str: (bool, date, datetime, dict, float, int, list, str, none_type)} The content that will be forwarded to the configured custom subscription destinations. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCustomNotificationSubscription/","title":"CreateCustomNotificationSubscription","text":""},{"location":"v2/docs/CreateCustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The id of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCwlAnalysis/","title":"CreateCwlAnalysis","text":""},{"location":"v2/docs/CreateCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input CwlAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateData/","title":"CreateData","text":""},{"location":"v2/docs/CreateData/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file/folder as how it will be created. data_type str folder_id str, none_type The id of the folder you want to create this new data in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new data in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. This is only allowed for file data. If not specified, auto format assignment will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateDownloadRule/","title":"CreateDownloadRule","text":""},{"location":"v2/docs/CreateDownloadRule/#properties","title":"Properties","text":"Name Type Description Notes code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to filter which format this rule applies to. [optional] project_name str, none_type Regular expression to filter which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNextflowAnalysis/","title":"CreateNextflowAnalysis","text":""},{"location":"v2/docs/CreateNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag activation_code_detail_id str Indicates under which activation code the pipeline is executed. analysis_input NextflowAnalysisInput analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNotificationChannel/","title":"CreateNotificationChannel","text":""},{"location":"v2/docs/CreateNotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNotificationSubscription/","title":"CreateNotificationSubscription","text":""},{"location":"v2/docs/CreateNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The ID of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProject/","title":"CreateProject","text":""},{"location":"v2/docs/CreateProject/#properties","title":"Properties","text":"Name Type Description Notes name str region_id str The region of the project. All data and pipeline executions will reside in this region. billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. storage_bundle_id str short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] project_owner_id str, none_type Owner of the project. Defaults to the current user. [optional] tags ProjectTag [optional] metadata_model_id str, none_type [optional] storage_configuration_id str, none_type An optional storage configuration id to have self managed storage. [optional] storage_configuration_subfolder str, none_type Required when specifying a storageConfigurationId. The subfolder determines the object prefix of your self managed storage. [optional] analysis_priority str, none_type Indicates the priority given to a project and its analyses within a single tenant, where Medium is the default value. [optional]  if omitted the server will use the default value of \"Medium\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataLinkingBatch/","title":"CreateProjectDataLinkingBatch","text":""},{"location":"v2/docs/CreateProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateProjectDataLinkingBatchItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataLinkingBatchItem/","title":"CreateProjectDataLinkingBatchItem","text":""},{"location":"v2/docs/CreateProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectPermission/","title":"CreateProjectPermission","text":""},{"location":"v2/docs/CreateProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not. user_id str, none_type the id of the user that should be given access, required when membershipType is USER [optional] email_address str, none_type The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str, none_type the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSample/","title":"CreateSample","text":""},{"location":"v2/docs/CreateSample/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the sample. description str, none_type The description of the sample. [optional] tags OptionalSampleTags [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatch/","title":"CreateSampleCreationBatch","text":""},{"location":"v2/docs/CreateSampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateSampleCreationBatchSampleItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatchDataItem/","title":"CreateSampleCreationBatchDataItem","text":"<p>The data to be linked to the new sample.</p>"},{"location":"v2/docs/CreateSampleCreationBatchDataItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatchSampleItem/","title":"CreateSampleCreationBatchSampleItem","text":""},{"location":"v2/docs/CreateSampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample complete_sample bool Indicates whether the sample must be completed. data_to_link [CreateSampleCreationBatchDataItem], none_type The data to be linked to the new sample. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateStorageConfiguration/","title":"CreateStorageConfiguration","text":""},{"location":"v2/docs/CreateStorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration storage_credential_id str The id of the storage credential region_id str The id of the region where the bucket will be located type str The type of configuration defaults to \"AWS_S3\" description str, none_type An optional description [optional] aws_details AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateStorageCredential/","title":"CreateStorageCredential","text":""},{"location":"v2/docs/CreateStorageCredential/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the credentials type str The type of the credentials defaults to \"AWS_USER\" aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateTemporaryCredentials/","title":"CreateTemporaryCredentials","text":""},{"location":"v2/docs/CreateTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes credentials_format str, none_type The format in which temporary credentials have to be returned. If not provided, temporary credentials will be returned in a cloud specific format. [optional]  if omitted the server will use the default value of \"RCLONE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateTermsOfUse/","title":"CreateTermsOfUse","text":""},{"location":"v2/docs/CreateTermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. reset_acceptance_records bool Do you want to reset the acceptance records. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateUploadRule/","title":"CreateUploadRule","text":""},{"location":"v2/docs/CreateUploadRule/#properties","title":"Properties","text":"Name Type Description Notes code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project_id str The project to which the data will be uploaded. active bool, none_type [optional] description str, none_type [optional] data_format_id str, none_type The format which will be assigned to the uploaded data. If not specified, an auto-detection of the format will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CustomNotificationSubscription/","title":"CustomNotificationSubscription","text":""},{"location":"v2/docs/CustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CustomNotificationSubscriptionList/","title":"CustomNotificationSubscriptionList","text":""},{"location":"v2/docs/CustomNotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items [CustomNotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisInput/","title":"CwlAnalysisInput","text":"<p>This object contains a \\\"oneOf\\\" construct. With the \\\"objectType\\\" attribute you can specify which object type you want to provide. Use \\\"STRUCTURED\\\" for type \\\"CreateAnalysisStructuredInput\\\" or use \\\"JSON\\\" for type \\\"CreateAnalysisJsonInput\\\".</p>"},{"location":"v2/docs/CwlAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] inputs [AnalysisDataInput] [optional] input_json str Contains the input JSON, as an escaped JSON String. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisInputJson/","title":"CwlAnalysisInputJson","text":""},{"location":"v2/docs/CwlAnalysisInputJson/#properties","title":"Properties","text":"Name Type Description Notes input_json str The input json of the CWL analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisJsonInput/","title":"CwlAnalysisJsonInput","text":""},{"location":"v2/docs/CwlAnalysisJsonInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str input_json str Contains the input JSON, as an escaped JSON String. data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisOutputJson/","title":"CwlAnalysisOutputJson","text":""},{"location":"v2/docs/CwlAnalysisOutputJson/#properties","title":"Properties","text":"Name Type Description Notes output_json str The output json of the CWL analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisStructuredInput/","title":"CwlAnalysisStructuredInput","text":""},{"location":"v2/docs/CwlAnalysisStructuredInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str inputs [AnalysisDataInput] parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlToolDefinitionList/","title":"CwlToolDefinitionList","text":""},{"location":"v2/docs/CwlToolDefinitionList/#properties","title":"Properties","text":"Name Type Description Notes items [CWLToolDefinition] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Data/","title":"Data","text":""},{"location":"v2/docs/Data/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the file/folder as it was uploaded. urn str, none_type The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. [optional] details DataDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataApi/","title":"libica.openapi.v2.DataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. get_data GET /api/data/{dataUrn} Retrieve a data."},{"location":"v2/docs/DataApi/#create_download_url_for_data_without_project_context","title":"create_download_url_for_data_without_project_context","text":"<p>Download create_download_url_for_data_without_project_context(data_urn)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v2/docs/DataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.download import Download\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data_without_project_context(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;create_download_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type","title":"Return type","text":"<p>Download</p>"},{"location":"v2/docs/DataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataApi/#create_inline_view_url_for_data_without_project_context","title":"create_inline_view_url_for_data_without_project_context","text":"<p>InlineView create_inline_view_url_for_data_without_project_context(data_urn)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/DataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.inline_view import InlineView\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data_without_project_context(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;create_inline_view_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type_1","title":"Return type","text":"<p>InlineView</p>"},{"location":"v2/docs/DataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataApi/#get_data","title":"get_data","text":"<p>Data get_data(data_urn)</p> <p>Retrieve a data.</p>"},{"location":"v2/docs/DataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.data import Data\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a data.\n        api_response = api_instance.get_data(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;get_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type_2","title":"Return type","text":"<p>Data</p>"},{"location":"v2/docs/DataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataDetails/","title":"DataDetails","text":"<p>The details of this data. This object is optional because it is possible that these details are deleted.</p>"},{"location":"v2/docs/DataDetails/#properties","title":"Properties","text":"Name Type Description Notes time_created datetime time_modified datetime tenant_id str owning_project_id str name str The name of the file/folder as it was uploaded. status str tags DataTag data_type str creator_id str, none_type [optional] tenant_name str, none_type [optional] owning_project_name str, none_type [optional] path str, none_type The user friendly path of the parent of this data. [optional] file_size_in_bytes int, none_type The size of the file in bytes. Folders do not have a size. [optional] format DataFormat [optional] object_e_tag str, none_type The file's ETag, as received from the cloud provider. Not to be confused with the ETag reponse header of this API. [optional] stored_for_the_first_time_at datetime, none_type Specifies when the data object was stored for the first time [optional] region Region [optional] will_be_archived_at datetime, none_type Specifies when the data object will be archived. [optional] will_be_deleted_at datetime, none_type Specifies when the data object will be deleted. [optional] sequencing_run SequencingRun [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataFormat/","title":"DataFormat","text":""},{"location":"v2/docs/DataFormat/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the format. For example: FASTQ, BAM, ... tenant_name str, none_type [optional] description str, none_type [optional] mime_type str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataFormatApi/","title":"libica.openapi.v2.DataFormatApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_data_formats GET /api/dataFormats Retrieve a list of data formats."},{"location":"v2/docs/DataFormatApi/#get_data_formats","title":"get_data_formats","text":"<p>DataFormatPagedList get_data_formats()</p> <p>Retrieve a list of data formats.</p>"},{"location":"v2/docs/DataFormatApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_format_api\nfrom libica.openapi.v2.model.data_format_paged_list import DataFormatPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_format_api.DataFormatApi(api_client)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data formats.\n        api_response = api_instance.get_data_formats(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataFormatApi-&gt;get_data_formats: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataFormatApi/#parameters","title":"Parameters","text":"Name Type Description Notes page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]"},{"location":"v2/docs/DataFormatApi/#return-type","title":"Return type","text":"<p>DataFormatPagedList</p>"},{"location":"v2/docs/DataFormatApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataFormatApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataFormatApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data formats is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataFormatPagedList/","title":"DataFormatPagedList","text":""},{"location":"v2/docs/DataFormatPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [DataFormat] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataIdOrPathList/","title":"DataIdOrPathList","text":""},{"location":"v2/docs/DataIdOrPathList/#properties","title":"Properties","text":"Name Type Description Notes data_ids [str] [optional] data_paths [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataList/","title":"DataList","text":""},{"location":"v2/docs/DataList/#properties","title":"Properties","text":"Name Type Description Notes items [Data] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataPagedList/","title":"DataPagedList","text":""},{"location":"v2/docs/DataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Data] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTag/","title":"DataTag","text":""},{"location":"v2/docs/DataTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] [optional] user_tags [str] [optional] connector_tags [str] [optional] run_in_tags [str] [optional] run_out_tags [str] [optional] reference_tags [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransfer/","title":"DataTransfer","text":""},{"location":"v2/docs/DataTransfer/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str direction str data_transferred int The data transferred so far in bytes. status str data Data tenant_name str, none_type [optional] connector Connector [optional] protocol str, none_type [optional]  if omitted the server will use the default value of \"HTTPS\" status_message str, none_type A message explaining the reason why the transfer is in the current status. [optional] duration int, none_type The overall duration of of the transfer defined in seconds. [optional] project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransferPagedList/","title":"DataTransferPagedList","text":""},{"location":"v2/docs/DataTransferPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [DataTransfer] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransfers/","title":"DataTransfers","text":""},{"location":"v2/docs/DataTransfers/#properties","title":"Properties","text":"Name Type Description Notes data_transfers [DataTransfer] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrl/","title":"DataUrl","text":""},{"location":"v2/docs/DataUrl/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder as it was uploaded. data_urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. url str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlIdList/","title":"DataUrlIdList","text":""},{"location":"v2/docs/DataUrlIdList/#properties","title":"Properties","text":"Name Type Description Notes data_ids [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlList/","title":"DataUrlList","text":""},{"location":"v2/docs/DataUrlList/#properties","title":"Properties","text":"Name Type Description Notes items [DataUrl] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlWithPath/","title":"DataUrlWithPath","text":""},{"location":"v2/docs/DataUrlWithPath/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder as it was uploaded. data_urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. data_path str url str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlWithPathList/","title":"DataUrlWithPathList","text":""},{"location":"v2/docs/DataUrlWithPathList/#properties","title":"Properties","text":"Name Type Description Notes items [DataUrlWithPath] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Download/","title":"Download","text":""},{"location":"v2/docs/Download/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for downloading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DownloadRule/","title":"DownloadRule","text":""},{"location":"v2/docs/DownloadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to select which format this rule applies to. [optional] project_name str, none_type Regular expression to select which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DownloadRuleList/","title":"DownloadRuleList","text":""},{"location":"v2/docs/DownloadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items [DownloadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/","title":"libica.openapi.v2.EntitledBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles."},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundle","title":"get_entitled_bundle","text":"<p>Bundle get_entitled_bundle(entitled_bundle_id)</p> <p>Retrieve an entitled bundle.</p>"},{"location":"v2/docs/EntitledBundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    entitled_bundle_id = \"entitledBundleId_example\" # str | The ID of the entitled bundle to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an entitled bundle.\n        api_response = api_instance.get_entitled_bundle(entitled_bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle to retrieve"},{"location":"v2/docs/EntitledBundleApi/#return-type","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The entitled bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundles","title":"get_entitled_bundles","text":"<p>BundlePagedList get_entitled_bundles()</p> <p>Retrieve a list of entitled bundles.</p>"},{"location":"v2/docs/EntitledBundleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = \"userTags_example\" # str | User tags to filter on (optional)\n    technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of entitled bundles.\n        api_response = api_instance.get_entitled_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v2/docs/EntitledBundleApi/#return-type_1","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of entitled bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/","title":"libica.openapi.v2.EntitlementDetailApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline."},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_cwl","title":"find_all_matching_activation_codes_for_cwl","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_cwl()</p> <p>Search all matching activation code details for a Cwl pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=CwlAnalysisInput(),\n    ) # SearchMatchingActivationCodesForCwlAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search all matching activation code details for a Cwl pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_cwl(search_matching_activation_codes_for_cwl_analysis=search_matching_activation_codes_for_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional]"},{"location":"v2/docs/EntitlementDetailApi/#return-type","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_nextflow","title":"find_all_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_nextflow()</p> <p>Search all matching activation code details for a Nextflow pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # SearchMatchingActivationCodesForNextflowAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search all matching activation code details for a Nextflow pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis=search_matching_activation_codes_for_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional]"},{"location":"v2/docs/EntitlementDetailApi/#return-type_1","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_code_for_cwl","title":"find_best_matching_activation_code_for_cwl","text":"<p>ActivationCodeDetail find_best_matching_activation_code_for_cwl()</p> <p>Search the best matching activation code detail for Cwl pipeline.</p> <p>Endpoint for searching the best activation code detail for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=CwlAnalysisInput(),\n    ) # SearchMatchingActivationCodesForCwlAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search the best matching activation code detail for Cwl pipeline.\n        api_response = api_instance.find_best_matching_activation_code_for_cwl(search_matching_activation_codes_for_cwl_analysis=search_matching_activation_codes_for_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_code_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis [optional]"},{"location":"v2/docs/EntitlementDetailApi/#return-type_2","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_codes_for_nextflow","title":"find_best_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetail find_best_matching_activation_codes_for_nextflow()</p> <p>Search the best matching activation code details for Nextflow pipeline.</p> <p>Endpoint for searching the best activation code details for a project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # SearchMatchingActivationCodesForNextflowAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search the best matching activation code details for Nextflow pipeline.\n        api_response = api_instance.find_best_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis=search_matching_activation_codes_for_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis [optional]"},{"location":"v2/docs/EntitlementDetailApi/#return-type_3","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventCode/","title":"EventCode","text":""},{"location":"v2/docs/EventCode/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code that can be used for creating event subscriptions description str A short description about the event code any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventCodeApi/","title":"libica.openapi.v2.EventCodeApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_codes GET /api/eventCodes Retrieve event codes"},{"location":"v2/docs/EventCodeApi/#get_event_codes","title":"get_event_codes","text":"<p>EventCodeList get_event_codes()</p> <p>Retrieve event codes</p>"},{"location":"v2/docs/EventCodeApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import event_code_api\nfrom libica.openapi.v2.model.event_code_list import EventCodeList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = event_code_api.EventCodeApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve event codes\n        api_response = api_instance.get_event_codes()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EventCodeApi-&gt;get_event_codes: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EventCodeApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/EventCodeApi/#return-type","title":"Return type","text":"<p>EventCodeList</p>"},{"location":"v2/docs/EventCodeApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EventCodeApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EventCodeApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The event codes are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventCodeList/","title":"EventCodeList","text":""},{"location":"v2/docs/EventCodeList/#properties","title":"Properties","text":"Name Type Description Notes items [EventCode] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLog/","title":"EventLog","text":""},{"location":"v2/docs/EventLog/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the event description str The details of the event event_type_category str The type of the event user_id str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogApi/","title":"libica.openapi.v2.EventLogApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_logs GET /api/eventLog Retrieve a list of event logs."},{"location":"v2/docs/EventLogApi/#get_event_logs","title":"get_event_logs","text":"<p>EventLogList get_event_logs()</p> <p>Retrieve a list of event logs.</p>"},{"location":"v2/docs/EventLogApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import event_log_api\nfrom libica.openapi.v2.model.event_log_list import EventLogList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = event_log_api.EventLogApi(api_client)\n    code = \"code_example\" # str | Code (optional)\n    code_filter_type = \"STARTS_WITH\" # str | Code filter type (optional)\n    category = \"ERROR\" # str | Category (optional)\n    date_from = \"dateFrom_example\" # str | Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    date_until = \"dateUntil_example\" # str | Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    rows = 250 # int | Amount of rows to fetch. Maximum 250. Defaults to 250 (optional) if omitted the server will use the default value of 250\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of event logs.\n        api_response = api_instance.get_event_logs(code=code, code_filter_type=code_filter_type, category=category, date_from=date_from, date_until=date_until, rows=rows)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EventLogApi-&gt;get_event_logs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EventLogApi/#parameters","title":"Parameters","text":"Name Type Description Notes code str Code [optional] code_filter_type str Code filter type [optional] category str Category [optional] date_from str Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] date_until str Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] rows int Amount of rows to fetch. Maximum 250. Defaults to 250 [optional] if omitted the server will use the default value of 250"},{"location":"v2/docs/EventLogApi/#return-type","title":"Return type","text":"<p>EventLogList</p>"},{"location":"v2/docs/EventLogApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EventLogApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EventLogApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventLogList/","title":"EventLogList","text":""},{"location":"v2/docs/EventLogList/#properties","title":"Properties","text":"Name Type Description Notes items [EventLog] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ExecutionConfiguration/","title":"ExecutionConfiguration","text":""},{"location":"v2/docs/ExecutionConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values [str] The configuration values any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ExecutionConfigurationList/","title":"ExecutionConfigurationList","text":""},{"location":"v2/docs/ExecutionConfigurationList/#properties","title":"Properties","text":"Name Type Description Notes items [ExecutionConfiguration] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Field/","title":"Field","text":""},{"location":"v2/docs/Field/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] field_type str [optional] required bool [optional] multivalued bool [optional] filled_by_pipeline bool [optional] fields [Field] [optional] enumeration_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FieldId/","title":"FieldId","text":""},{"location":"v2/docs/FieldId/#properties","title":"Properties","text":"Name Type Description Notes id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FieldList/","title":"FieldList","text":""},{"location":"v2/docs/FieldList/#properties","title":"Properties","text":"Name Type Description Notes items [Field] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindProjectSamples/","title":"FindProjectSamples","text":""},{"location":"v2/docs/FindProjectSamples/#properties","title":"Properties","text":"Name Type Description Notes conditions [FindSampleCondition] Adds a condition on a string field. date_conditions [FindSampleDateCondition] Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. number_conditions [FindSampleNumberCondition] Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. boolean_conditions [FindSampleBooleanCondition] Adds a condition on a boolean field. full_text_search_string str, none_type Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field. [optional] include_deleted bool, none_type Indicates whether deleted samples should be included. [optional]  if omitted the server will use the default value of False user_tags [str, none_type], none_type The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str, none_type How the usertags are filtered. [optional] run_input_tags [str, none_type], none_type The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str, none_type How the runInputTags are filtered. [optional] connector_tags [str, none_type], none_type The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str, none_type How the connectorTags are filtered. [optional] tech_tags [str, none_type], none_type The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] tech_tag_match_mode str, none_type How the technicalTags are filtered. [optional] instrument_run_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleBooleanCondition/","title":"FindSampleBooleanCondition","text":"<p>Adds a condition on a boolean field.</p>"},{"location":"v2/docs/FindSampleBooleanCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field Field [optional] field str, none_type [optional] value str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleCondition/","title":"FindSampleCondition","text":"<p>Adds a condition on a string field.</p>"},{"location":"v2/docs/FindSampleCondition/#properties","title":"Properties","text":"Name Type Description Notes values [str] metadata_field FieldId [optional] field str, none_type [optional] match_mode str, none_type Defines how the value will be matched. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleDateCondition/","title":"FindSampleDateCondition","text":"<p>Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field.</p>"},{"location":"v2/docs/FindSampleDateCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] before_date str, none_type Before date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] after_date str, none_type After date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleNumberCondition/","title":"FindSampleNumberCondition","text":"<p>Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field.</p>"},{"location":"v2/docs/FindSampleNumberCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] lower_bound str, none_type [optional] upper_bound str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FolderUploadSession/","title":"FolderUploadSession","text":""},{"location":"v2/docs/FolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the folder upload session. time_created datetime The time the folder upload session was created. status str The status of the folder upload session. time_session_expires datetime The time the folder upload session will expire as it is only temporarily valid. time_completed datetime, none_type The time the folder upload session completed. [optional] time_closed datetime, none_type The time the folder upload session was closed. [optional] temp_credentials TempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InlineView/","title":"InlineView","text":""},{"location":"v2/docs/InlineView/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for inline viewing the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputParameter/","title":"InputParameter","text":""},{"location":"v2/docs/InputParameter/#properties","title":"Properties","text":"Name Type Description Notes id str The ID of the parameter code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputParameterList/","title":"InputParameterList","text":""},{"location":"v2/docs/InputParameterList/#properties","title":"Properties","text":"Name Type Description Notes items [InputParameter] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputPart/","title":"InputPart","text":""},{"location":"v2/docs/InputPart/#properties","title":"Properties","text":"Name Type Description Notes headers {str: ([str],)} [optional] media_type InputPartMediaType [optional] content_type_from_message bool [optional] body_as_string str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputPartMediaType/","title":"InputPartMediaType","text":""},{"location":"v2/docs/InputPartMediaType/#properties","title":"Properties","text":"Name Type Description Notes type str [optional] subtype str [optional] parameters {str: (str,)} [optional] wildcard_type bool [optional] wildcard_subtype bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Job/","title":"Job","text":""},{"location":"v2/docs/Job/#properties","title":"Properties","text":"Name Type Description Notes id str status str subject_type str The type of the subject for which this job provides execution. subject_id str The id of the subject for which this job provides execution. time_created datetime owner User additional_status_information str, none_type Additional information regarding the status of this job. [optional] time_started datetime, none_type [optional] time_finished datetime, none_type [optional] project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/JobApi/","title":"libica.openapi.v2.JobApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_job GET /api/jobs/{jobId} Retrieve a job. get_jobs GET /api/jobs Retrieve a list of jobs."},{"location":"v2/docs/JobApi/#get_job","title":"get_job","text":"<p>Job get_job(job_id)</p> <p>Retrieve a job.</p>"},{"location":"v2/docs/JobApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import job_api\nfrom libica.openapi.v2.model.job import Job\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = job_api.JobApi(api_client)\n    job_id = \"jobId_example\" # str | The ID of the job.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a job.\n        api_response = api_instance.get_job(job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling JobApi-&gt;get_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/JobApi/#parameters","title":"Parameters","text":"Name Type Description Notes job_id str The ID of the job."},{"location":"v2/docs/JobApi/#return-type","title":"Return type","text":"<p>Job</p>"},{"location":"v2/docs/JobApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/JobApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/JobApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The job is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/JobApi/#get_jobs","title":"get_jobs","text":"<p>JobPagedList get_jobs()</p> <p>Retrieve a list of jobs.</p>"},{"location":"v2/docs/JobApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import job_api\nfrom libica.openapi.v2.model.job_paged_list import JobPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = job_api.JobApi(api_client)\n    status = [\n        \"INITIALIZED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of jobs.\n        api_response = api_instance.get_jobs(status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling JobApi-&gt;get_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/JobApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes status [str] The statuses to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]"},{"location":"v2/docs/JobApi/#return-type_1","title":"Return type","text":"<p>JobPagedList</p>"},{"location":"v2/docs/JobApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/JobApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/JobApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of jobs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/JobPagedList/","title":"JobPagedList","text":""},{"location":"v2/docs/JobPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Job] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Link/","title":"Link","text":""},{"location":"v2/docs/Link/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the link url str The url of the link any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Links/","title":"Links","text":""},{"location":"v2/docs/Links/#properties","title":"Properties","text":"Name Type Description Notes links [Link] [optional] licenses [Link] [optional] homepages [Link] [optional] publications [Link] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/LoadDataInBaseRequest/","title":"LoadDataInBaseRequest","text":""},{"location":"v2/docs/LoadDataInBaseRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str ID of the data to load into the table allow_jagged_rows bool, none_type Enable to accept rows that are missing trailing optional columns. Missing values will be treated as nulls. [optional]  if omitted the server will use the default value of False allow_quoted_newlines bool, none_type Enable to include newlines contained in quoted data sections in the cell\u2019s value. When disabled, newlines will signal a new row [optional]  if omitted the server will use the default value of False delimiter str, none_type field delimiter [optional]  if omitted the server will use the default value of \",\" encoding str, none_type Encoding [optional]  if omitted the server will use the default value of \"UTF8\" force_load bool, none_type When false (default): the data will not be loaded if it was already previously loaded to table ; when true, the data will be loaded even if already loaded in the past [optional]  if omitted the server will use the default value of False header_rows_to_skip int, none_type number of rows to skip (usually for headers) [optional]  if omitted the server will use the default value of 1 ignore_unknown_values bool When enabled, rows with extra column values that do not match the schema will be ignored and will not be loaded into the table [optional]  if omitted the server will use the default value of False include_references bool, none_type Include references [optional]  if omitted the server will use the default value of True include_data_reference bool, none_type Include Data Reference [optional]  if omitted the server will use the default value of True include_sample_reference bool, none_type Include Sample Reference [optional]  if omitted the server will use the default value of True include_pipeline_reference bool, none_type Include Pipeline Reference [optional]  if omitted the server will use the default value of True include_pipeline_execution_reference bool, none_type Include Pipeline Execution Reference [optional]  if omitted the server will use the default value of True include_tenant_reference bool, none_type Include Tenant Reference [optional]  if omitted the server will use the default value of True null_marker str, none_type Specifies a string that represents a null value in a CSV/TSV file. [optional] number_of_errors_allowed int, none_type The maximum number of bad records that Base can ignore when running the job [optional]  if omitted the server will use the default value of 0 quote str, none_type The value that is used to quote data sections in a CSV/TSV file [optional] write_preference str, none_type specifies how to write data in the table. [optional]  if omitted the server will use the default value of \"APPENDTOTABLE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataField/","title":"MetadataField","text":"<p>The metadata of the sample</p>"},{"location":"v2/docs/MetadataField/#properties","title":"Properties","text":"Name Type Description Notes id str index int [optional] name str [optional] field_type str [optional] values [str] [optional] group_values [MetadataField] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataModel/","title":"MetadataModel","text":""},{"location":"v2/docs/MetadataModel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str state str tenant_name str, none_type [optional] description str, none_type [optional] parent_model_id str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/","title":"libica.openapi.v2.MetadataModelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context."},{"location":"v2/docs/MetadataModelApi/#get_metadata_model","title":"get_metadata_model","text":"<p>MetadataModel get_metadata_model(metadata_model_id)</p> <p>Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v2/docs/MetadataModelApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.metadata_model import MetadataModel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n    metadata_model_id = \"metadataModelId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model(metadata_model_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v2/docs/MetadataModelApi/#return-type","title":"Return type","text":"<p>MetadataModel</p>"},{"location":"v2/docs/MetadataModelApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_metadata_model_fields","title":"get_metadata_model_fields","text":"<p>FieldList get_metadata_model_fields(metadata_model_id)</p> <p>Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v2/docs/MetadataModelApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.field_list import FieldList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n    metadata_model_id = \"metadataModelId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model_fields(metadata_model_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v2/docs/MetadataModelApi/#return-type_1","title":"Return type","text":"<p>FieldList</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model fields are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_metadata_models","title":"get_metadata_models","text":"<p>MetadataModelList get_metadata_models()</p> <p>Retrieve the metadata models for the tenant associated to the security context.</p> <p>Retrieve the metadata models for the tenant associated to the security context. This call returns a list of metadata models for the tenant in a non-hierarchical way. Instead of a model having a list of child models all models except the root model have a parent model identifier. This can be used to reconstruct the hierarchy.</p>"},{"location":"v2/docs/MetadataModelApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.metadata_model_list import MetadataModelList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the metadata models for the tenant associated to the security context.\n        api_response = api_instance.get_metadata_models()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_models: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/MetadataModelApi/#return-type_2","title":"Return type","text":"<p>MetadataModelList</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata models are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_tenant_model","title":"get_tenant_model","text":"<p>Model get_tenant_model()</p> <p>Retrieve the tenant model for the tenant associated to the security context.</p> <p>Retrieve the tenant model for the tenant associated to the security context. The tenant model is a hierarchical structure where the top level tenant holds a list of child models (which in turn can hold child models).</p>"},{"location":"v2/docs/MetadataModelApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.model import Model\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the tenant model for the tenant associated to the security context.\n        api_response = api_instance.get_tenant_model()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_tenant_model: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/MetadataModelApi/#return-type_3","title":"Return type","text":"<p>Model</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The tenant model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelList/","title":"MetadataModelList","text":""},{"location":"v2/docs/MetadataModelList/#properties","title":"Properties","text":"Name Type Description Notes items [MetadataModel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Model/","title":"Model","text":""},{"location":"v2/docs/Model/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] state str [optional] models [Model] [optional] fields [Field] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MultipartFormDataInput/","title":"MultipartFormDataInput","text":""},{"location":"v2/docs/MultipartFormDataInput/#properties","title":"Properties","text":"Name Type Description Notes form_data {str: (InputPart,)} [optional] form_data_map {str: ([InputPart],)} [optional] parts [InputPart] [optional] preamble str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NextflowAnalysisInput/","title":"NextflowAnalysisInput","text":""},{"location":"v2/docs/NextflowAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes inputs [AnalysisDataInput] parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannel/","title":"NotificationChannel","text":""},{"location":"v2/docs/NotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/","title":"libica.openapi.v2.NotificationChannelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_channel POST /api/notificationChannels Create a notification channel delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel get_notification_channels GET /api/notificationChannels Retrieve notification channels update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel"},{"location":"v2/docs/NotificationChannelApi/#create_notification_channel","title":"create_notification_channel","text":"<p>NotificationChannel create_notification_channel()</p> <p>Create a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.create_notification_channel import CreateNotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    create_notification_channel = CreateNotificationChannel(\n        enabled=True,\n        type=\"MAIL\",\n        address=\"address_example\",\n    ) # CreateNotificationChannel | The new channel (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a notification channel\n        api_response = api_instance.create_notification_channel(create_notification_channel=create_notification_channel)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;create_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_notification_channel CreateNotificationChannel The new channel [optional]"},{"location":"v2/docs/NotificationChannelApi/#return-type","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The notification channel is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#delete_notification_channel","title":"delete_notification_channel","text":"<p>delete_notification_channel(channel_id)</p> <p>Delete a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a notification channel\n        api_instance.delete_notification_channel(channel_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;delete_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to delete"},{"location":"v2/docs/NotificationChannelApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification channel is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channel","title":"get_notification_channel","text":"<p>NotificationChannel get_notification_channel(channel_id)</p> <p>Retrieve a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification channel\n        api_response = api_instance.get_notification_channel(channel_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to retrieve"},{"location":"v2/docs/NotificationChannelApi/#return-type_2","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channels","title":"get_notification_channels","text":"<p>NotificationChannelList get_notification_channels()</p> <p>Retrieve notification channels</p>"},{"location":"v2/docs/NotificationChannelApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel_list import NotificationChannelList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve notification channels\n        api_response = api_instance.get_notification_channels()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channels: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/NotificationChannelApi/#return-type_3","title":"Return type","text":"<p>NotificationChannelList</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channels are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#update_notification_channel","title":"update_notification_channel","text":"<p>NotificationChannel update_notification_channel(channel_id)</p> <p>Update a notification channel</p> <p>This will affect all subscriptions which use this address!Fields which can be updated:  - enabled  - address </p>"},{"location":"v2/docs/NotificationChannelApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to update\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    notification_channel = NotificationChannel(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        enabled=True,\n        type=\"MAIL\",\n        address=\"address_example\",\n    ) # NotificationChannel | The updated channel (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification channel\n        api_response = api_instance.update_notification_channel(channel_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;update_notification_channel: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification channel\n        api_response = api_instance.update_notification_channel(channel_id, if_match=if_match, notification_channel=notification_channel)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;update_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_channel NotificationChannel The updated channel [optional]"},{"location":"v2/docs/NotificationChannelApi/#return-type_4","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelList/","title":"NotificationChannelList","text":""},{"location":"v2/docs/NotificationChannelList/#properties","title":"Properties","text":"Name Type Description Notes items [NotificationChannel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationSubscription/","title":"NotificationSubscription","text":""},{"location":"v2/docs/NotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationSubscriptionList/","title":"NotificationSubscriptionList","text":""},{"location":"v2/docs/NotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items [NotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/OptionalSampleTags/","title":"OptionalSampleTags","text":""},{"location":"v2/docs/OptionalSampleTags/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type [optional] user_tags [str, none_type], none_type [optional] connector_tags [str, none_type], none_type [optional] run_in_tags [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Pipeline/","title":"Pipeline","text":""},{"location":"v2/docs/Pipeline/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorage tenant_name str, none_type [optional] urn str, none_type The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] language_version PipelineLanguageVersion [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/","title":"libica.openapi.v2.PipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. get_pipelines GET /api/pipelines Retrieve a list of pipelines."},{"location":"v2/docs/PipelineApi/#get_pipeline","title":"get_pipeline","text":"<p>Pipeline get_pipeline(pipeline_id)</p> <p>Retrieve a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline import Pipeline\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a pipeline.\n        api_response = api_instance.get_pipeline(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve"},{"location":"v2/docs/PipelineApi/#return-type","title":"Return type","text":"<p>Pipeline</p>"},{"location":"v2/docs/PipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_html_documentation","title":"get_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_pipeline_html_documentation(pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/PipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_pipeline_html_documentation(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v2/docs/PipelineApi/#return-type_1","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v2/docs/PipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_input_parameters","title":"get_pipeline_input_parameters","text":"<p>InputParameterList get_pipeline_input_parameters(pipeline_id)</p> <p>Retrieve input parameters for a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.input_parameter_list import InputParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve input parameters for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve input parameters for a pipeline.\n        api_response = api_instance.get_pipeline_input_parameters(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve input parameters for"},{"location":"v2/docs/PipelineApi/#return-type_2","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v2/docs/PipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_reference_sets","title":"get_pipeline_reference_sets","text":"<p>ReferenceSetList get_pipeline_reference_sets(pipeline_id)</p> <p>Retrieve the reference sets of a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the reference sets of a pipeline.\n        api_response = api_instance.get_pipeline_reference_sets(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v2/docs/PipelineApi/#return-type_3","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/PipelineApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipelines","title":"get_pipelines","text":"<p>PipelineList get_pipelines()</p> <p>Retrieve a list of pipelines.</p> <p>Only lists pipelines that are owned by the user/tenant (not those to which a user is entitled).</p>"},{"location":"v2/docs/PipelineApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_list import PipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of pipelines.\n        api_response = api_instance.get_pipelines()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_4","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/PipelineApi/#return-type_4","title":"Return type","text":"<p>PipelineList</p>"},{"location":"v2/docs/PipelineApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineBundle/","title":"PipelineBundle","text":""},{"location":"v2/docs/PipelineBundle/#properties","title":"Properties","text":"Name Type Description Notes id str name str max_number_of_allowed_slots int active_pipelines [Pipeline] canceled_pipelines [Pipeline] retired_pipelines [Pipeline] regions [Region] analysis_storages [AnalysisStorage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineHtmlDocumentation/","title":"PipelineHtmlDocumentation","text":""},{"location":"v2/docs/PipelineHtmlDocumentation/#properties","title":"Properties","text":"Name Type Description Notes content str The content of the HTML documentation any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageApi/","title":"libica.openapi.v2.PipelineLanguageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions."},{"location":"v2/docs/PipelineLanguageApi/#get_nextflow_versions","title":"get_nextflow_versions","text":"<p>PipelineLanguageVersionList get_nextflow_versions()</p> <p>Retrieve a list of nextflow versions.</p>"},{"location":"v2/docs/PipelineLanguageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_language_api\nfrom libica.openapi.v2.model.pipeline_language_version_list import PipelineLanguageVersionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_language_api.PipelineLanguageApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of nextflow versions.\n        api_response = api_instance.get_nextflow_versions()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineLanguageApi-&gt;get_nextflow_versions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineLanguageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/PipelineLanguageApi/#return-type","title":"Return type","text":"<p>PipelineLanguageVersionList</p>"},{"location":"v2/docs/PipelineLanguageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineLanguageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineLanguageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of nextflow versions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageVersion/","title":"PipelineLanguageVersion","text":""},{"location":"v2/docs/PipelineLanguageVersion/#properties","title":"Properties","text":"Name Type Description Notes id str name str The name of the version language str The language of the version any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageVersionList/","title":"PipelineLanguageVersionList","text":""},{"location":"v2/docs/PipelineLanguageVersionList/#properties","title":"Properties","text":"Name Type Description Notes items [PipelineLanguageVersion] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineList/","title":"PipelineList","text":""},{"location":"v2/docs/PipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [Pipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineTag/","title":"PipelineTag","text":""},{"location":"v2/docs/PipelineTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] Technical tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Problem/","title":"Problem","text":"<p>RFC 7807 Problem object (https://tools.ietf.org/html/rfc7807)</p>"},{"location":"v2/docs/Problem/#properties","title":"Properties","text":"Name Type Description Notes type str A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \\\"about:blank\\\". title str A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; status int The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. parameters {str: (str,)} Problem parameters for e.g. request body attribute validation. This attribute is not in scope of RFC 7807. timestamp datetime id str [optional] detail str A human-readable explanation specific to this occurrence of the problem. [optional] instance str A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Project/","title":"Project","text":""},{"location":"v2/docs/Project/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str active bool Indicates whether the project is active or hidden. region Region billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. tags ProjectTag tenant_name str, none_type [optional] urn str, none_type The URN of the project. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] base_enabled bool, none_type Indicates whether the project is base enabled. [optional] short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] data_sharing_enabled bool, none_type Indicates whether the Data and Samples created in this Project can be linked to other Projects. [optional] storage_bundle StorageBundle [optional] self_managed_storage_configuration StorageConfiguration [optional] analysis_priority str, none_type Indicates the priority given to a project and its analyses within a single tenant. Note that for a PUT call, when not providing a value for this attribute (null value or absent attribute), the persisted value will not change. [optional] metadata_model MetadataModel [optional] application Application [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/","title":"libica.openapi.v2.ProjectAnalysisApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis. The list might be incomplete if a folder contains too many output files, but all the data can always be retrieved through the GET data endpoint. get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis."},{"location":"v2/docs/ProjectAnalysisApi/#abort_analysis","title":"abort_analysis","text":"<p>abort_analysis(project_id, analysis_id)</p> <p>Abort an analysis.</p> <p>Endpoint for aborting an analysis. The status of the analysis is not updated immediately, only when the abortion of the analysis has actually started.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to abort\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Abort an analysis.\n        api_instance.abort_analysis(project_id, analysis_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;abort_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to abort"},{"location":"v2/docs/ProjectAnalysisApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The analysis is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_analysis","title":"create_cwl_analysis","text":"<p>Analysis create_cwl_analysis(project_id)</p> <p>Create and start an analysis for a CWL pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.create_cwl_analysis import CreateCwlAnalysis\nfrom libica.openapi.v2.model.analysis import Analysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. (optional)\n    create_cwl_analysis = CreateCwlAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=AnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        activation_code_detail_id=\"activation_code_detail_id_example\",\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=CwlAnalysisInput(),\n    ) # CreateCwlAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a CWL pipeline.\n        api_response = api_instance.create_cwl_analysis(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a CWL pipeline.\n        api_response = api_instance.create_cwl_analysis(project_id, idempotency_key=idempotency_key, create_cwl_analysis=create_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. [optional] create_cwl_analysis CreateCwlAnalysis [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_1","title":"Return type","text":"<p>Analysis</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_nextflow_analysis","title":"create_nextflow_analysis","text":"<p>Analysis create_nextflow_analysis(project_id)</p> <p>Create and start an analysis for a Nextflow pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis import Analysis\nfrom libica.openapi.v2.model.create_nextflow_analysis import CreateNextflowAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. (optional)\n    create_nextflow_analysis = CreateNextflowAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=AnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        activation_code_detail_id=\"activation_code_detail_id_example\",\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # CreateNextflowAnalysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a Nextflow pipeline.\n        api_response = api_instance.create_nextflow_analysis(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a Nextflow pipeline.\n        api_response = api_instance.create_nextflow_analysis(project_id, idempotency_key=idempotency_key, create_nextflow_analysis=create_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. [optional] create_nextflow_analysis CreateNextflowAnalysis [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_2","title":"Return type","text":"<p>Analysis</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analyses","title":"get_analyses","text":"<p>AnalysisPagedList get_analyses(project_id)</p> <p>Retrieve the list of analyses.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_paged_list import AnalysisPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    reference = \"reference_example\" # str | The reference to filter on. (optional)\n    userreference = \"userreference_example\" # str | The user-reference to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    usertag = \"usertag_example\" # str | The user-tags to filter on. (optional)\n    technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional)\n    referencetag = \"referencetag_example\" # str | The reference-data-tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_analyses(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_analyses(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_3","title":"Return type","text":"<p>AnalysisPagedList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis","title":"get_analysis","text":"<p>Analysis get_analysis(project_id, analysis_id)</p> <p>Retrieve an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis import Analysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an analysis.\n        api_response = api_instance.get_analysis(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_4","title":"Return type","text":"<p>Analysis</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_configurations","title":"get_analysis_configurations","text":"<p>ExecutionConfigurationList get_analysis_configurations(project_id, analysis_id)</p> <p>Retrieve the configurations of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.execution_configuration_list import ExecutionConfigurationList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the configuration for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the configurations of an analysis.\n        api_response = api_instance.get_analysis_configurations(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the configuration for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_5","title":"Return type","text":"<p>ExecutionConfigurationList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The configurations of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_inputs","title":"get_analysis_inputs","text":"<p>AnalysisInputList get_analysis_inputs(project_id, analysis_id)</p> <p>Retrieve the inputs of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_input_list import AnalysisInputList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the inputs for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the inputs of an analysis.\n        api_response = api_instance.get_analysis_inputs(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_inputs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the inputs for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_6","title":"Return type","text":"<p>AnalysisInputList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The inputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_outputs","title":"get_analysis_outputs","text":"<p>AnalysisOutputList get_analysis_outputs(project_id, analysis_id)</p> <p>Retrieve the outputs of an analysis. The list might be incomplete if a folder contains too many output files, but all the data can always be retrieved through the GET data endpoint.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_output_list import AnalysisOutputList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the outputs for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the outputs of an analysis. The list might be incomplete if a folder contains too many output files, but all the data can always be retrieved through the GET data endpoint.\n        api_response = api_instance.get_analysis_outputs(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_outputs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the outputs for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_7","title":"Return type","text":"<p>AnalysisOutputList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The outputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_steps","title":"get_analysis_steps","text":"<p>AnalysisStepList get_analysis_steps(project_id, analysis_id)</p> <p>Retrieve the individual steps of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_step_list import AnalysisStepList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the individual steps for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the individual steps of an analysis.\n        api_response = api_instance.get_analysis_steps(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_steps: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the individual steps for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_8","title":"Return type","text":"<p>AnalysisStepList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The individual steps of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_cwl_input_json","title":"get_cwl_input_json","text":"<p>CwlAnalysisInputJson get_cwl_input_json(project_id, analysis_id)</p> <p>Retrieve the input json of a CWL analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.cwl_analysis_input_json import CwlAnalysisInputJson\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the CWL analysis for which to retrieve the input json\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the input json of a CWL analysis.\n        api_response = api_instance.get_cwl_input_json(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_input_json: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the input json"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_9","title":"Return type","text":"<p>CwlAnalysisInputJson</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The input json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_cwl_output_json","title":"get_cwl_output_json","text":"<p>CwlAnalysisOutputJson get_cwl_output_json(project_id, analysis_id)</p> <p>Retrieve the output json of a CWL analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.cwl_analysis_output_json import CwlAnalysisOutputJson\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the CWL analysis for which to retrieve the output json\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the output json of a CWL analysis.\n        api_response = api_instance.get_cwl_output_json(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_output_json: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the output json"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_10","title":"Return type","text":"<p>CwlAnalysisOutputJson</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The output json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_raw_analysis_output","title":"get_raw_analysis_output","text":"<p>AnalysisRawOutput get_raw_analysis_output(project_id, analysis_id)</p> <p>Retrieve the raw output of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.analysis_raw_output import AnalysisRawOutput\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis for which to retrieve the raw output\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the raw output of an analysis.\n        api_response = api_instance.get_raw_analysis_output(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_raw_analysis_output: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis for which to retrieve the raw output"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_11","title":"Return type","text":"<p>AnalysisRawOutput</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The raw output of the analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#update_analysis","title":"update_analysis","text":"<p>Analysis update_analysis(project_id, analysis_id)</p> <p>Update an analysis.</p> <p>Attributes which can be updated:    - tags</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis import Analysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    analysis = Analysis(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        pipeline=Pipeline(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            urn=\"urn_example\",\n            description=\"description_example\",\n            language=\"CWL\",\n            language_version=PipelineLanguageVersion(\n                id=\"id_example\",\n                name=\"name_example\",\n                language=\"CWL\",\n            ),\n            pipeline_tags=PipelineTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n            ),\n            analysis_storage=AnalysisStorage(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n            ),\n        ),\n        workflow_session=WorkflowSession(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            user_reference=\"user_reference_example\",\n            workflow=Workflow(\n                id=\"id_example\",\n                code=\"code_example\",\n                urn=\"urn_example\",\n                description=\"description_example\",\n                language_version=PipelineLanguageVersion(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                    language=\"CWL\",\n                ),\n                workflow_tags=PipelineTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                ),\n                analysis_storage=AnalysisStorage(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    name=\"name_example\",\n                    description=\"description_example\",\n                ),\n            ),\n            status=\"REQUESTED\",\n            start_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            end_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            summary=\"summary_example\",\n            tags=WorkflowSessionTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n            ),\n        ),\n        status=\"REQUESTED\",\n        start_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        end_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        summary=\"summary_example\",\n        analysis_storage=AnalysisStorage(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n        ),\n        analysis_priority=\"Low\",\n        tags=AnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n    ) # Analysis |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update an analysis.\n        api_response = api_instance.update_analysis(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;update_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update an analysis.\n        api_response = api_instance.update_analysis(project_id, analysis_id, if_match=if_match, analysis=analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;update_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] analysis Analysis [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_12","title":"Return type","text":"<p>Analysis</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/","title":"libica.openapi.v2.ProjectAnalysisCreationBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items. get_analysis_creation_batch_item1 GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item."},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#create_analysis_creation_batch","title":"create_analysis_creation_batch","text":"<p>AnalysisCreationBatch create_analysis_creation_batch(project_id)</p> <p>Create and start multiple analyses in batch.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.create_analysis_creation_batch import CreateAnalysisCreationBatch\nfrom libica.openapi.v2.model.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. (optional)\n    create_analysis_creation_batch = CreateAnalysisCreationBatch(\n        cwl_items=[\n            CreateCwlAnalysis(\n                user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n                pipeline_id=\"pipeline_id_example\",\n                tags=AnalysisTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                activation_code_detail_id=\"activation_code_detail_id_example\",\n                analysis_storage_id=\"analysis_storage_id_example\",\n                output_parent_folder_id=\"output_parent_folder_id_example\",\n                analysis_output=[\n                    AnalysisOutputMapping(\n                        source_path=\"source_path_example\",\n                        type=\"FILE\",\n                        target_project_id=\"target_project_id_example\",\n                        target_path=\"target_path_example\",\n                        action_on_exist=\"action_on_exist_example\",\n                    ),\n                ],\n                analysis_input=CwlAnalysisInput(),\n            ),\n        ],\n        nextflow_items=[\n            CreateNextflowAnalysis(\n                user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n                pipeline_id=\"pipeline_id_example\",\n                tags=AnalysisTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                activation_code_detail_id=\"activation_code_detail_id_example\",\n                analysis_storage_id=\"analysis_storage_id_example\",\n                output_parent_folder_id=\"output_parent_folder_id_example\",\n                analysis_output=[\n                    AnalysisOutputMapping(\n                        source_path=\"source_path_example\",\n                        type=\"FILE\",\n                        target_project_id=\"target_project_id_example\",\n                        target_path=\"target_path_example\",\n                        action_on_exist=\"action_on_exist_example\",\n                    ),\n                ],\n                analysis_input=NextflowAnalysisInput(\n                    inputs=[\n                        AnalysisDataInput(\n                            parameter_code=\"parameter_code_example\",\n                            data_ids=[\n                                \"data_ids_example\",\n                            ],\n                            mounts=[\n                                AnalysisInputDataMount(\n                                    data_id=\"data_id_example\",\n                                    mount_path=\"mount_path_example\",\n                                ),\n                            ],\n                        ),\n                    ],\n                    parameters=[\n                        AnalysisParameterInput(\n                            code=\"code_example\",\n                            value=\"value_example\",\n                            multi_value=[\n                                \"multi_value_example\",\n                            ],\n                        ),\n                    ],\n                    reference_data_parameters=[\n                        AnalysisReferenceDataParameter(\n                            parameter_code=\"parameter_code_example\",\n                            reference_data_id=\"reference_data_id_example\",\n                        ),\n                    ],\n                ),\n            ),\n        ],\n    ) # CreateAnalysisCreationBatch |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start multiple analyses in batch.\n        api_response = api_instance.create_analysis_creation_batch(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start multiple analyses in batch.\n        api_response = api_instance.create_analysis_creation_batch(project_id, idempotency_key=idempotency_key, create_analysis_creation_batch=create_analysis_creation_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. [optional] create_analysis_creation_batch CreateAnalysisCreationBatch [optional]"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The analyses are scheduled for creation. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch","title":"get_analysis_creation_batch","text":"<p>AnalysisCreationBatch get_analysis_creation_batch(project_id, batch_id)</p> <p>Retrieve a analysis creation batch.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a analysis creation batch.\n        api_response = api_instance.get_analysis_creation_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_1","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_item","title":"get_analysis_creation_batch_item","text":"<p>AnalysisCreationBatchItemPagedList get_analysis_creation_batch_item(project_id, batch_id)</p> <p>Retrieve a list of analysis creation batch items.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch_item_paged_list import AnalysisCreationBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n    status = [\n        \"RUNNING\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of analysis creation batch items.\n        api_response = api_instance.get_analysis_creation_batch_item(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of analysis creation batch items.\n        api_response = api_instance.get_analysis_creation_batch_item(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch status [str] The statuses to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_2","title":"Return type","text":"<p>AnalysisCreationBatchItemPagedList</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_item1","title":"get_analysis_creation_batch_item1","text":"<p>AnalysisCreationBatchItem get_analysis_creation_batch_item1(project_id, batch_id, item_id)</p> <p>Retrieve a analysis creation batch item.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch_item import AnalysisCreationBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n    item_id = \"itemId_example\" # str | The ID of the analysis creation batch item\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a analysis creation batch item.\n        api_response = api_instance.get_analysis_creation_batch_item1(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch item_id str The ID of the analysis creation batch item"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_3","title":"Return type","text":"<p>AnalysisCreationBatchItem</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/","title":"libica.openapi.v2.ProjectApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project POST /api/projects Create a new project. get_project GET /api/projects/{projectId} Retrieve a project. get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. get_projects GET /api/projects Retrieve a list of projects. hide_project POST /api/projects/{projectId}:hide Hide a project. link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. update_project PUT /api/projects/{projectId} Update a project."},{"location":"v2/docs/ProjectApi/#create_project","title":"create_project","text":"<p>Project create_project()</p> <p>Create a new project.</p>"},{"location":"v2/docs/ProjectApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.create_project import CreateProject\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    create_project = CreateProject(\n        name=\"AH\",\n        short_description=\"short_description_example\",\n        information=\"information_example\",\n        project_owner_id=\"project_owner_id_example\",\n        region_id=\"region_id_example\",\n        billing_mode=\"PROJECT\",\n        data_sharing_enabled=True,\n        tags=ProjectTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n        ),\n        storage_bundle_id=\"storage_bundle_id_example\",\n        metadata_model_id=\"metadata_model_id_example\",\n        storage_configuration_id=\"storage_configuration_id_example\",\n        storage_configuration_subfolder=\"storage_configuration_subfolder_example\",\n        analysis_priority=\"Medium\",\n    ) # CreateProject |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a new project.\n        api_response = api_instance.create_project(create_project=create_project)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;create_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_project CreateProject [optional]"},{"location":"v2/docs/ProjectApi/#return-type","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project","title":"get_project","text":"<p>Project get_project(project_id)</p> <p>Retrieve a project.</p>"},{"location":"v2/docs/ProjectApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project.\n        api_response = api_instance.get_project(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_1","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project_bundle","title":"get_project_bundle","text":"<p>ProjectBundle get_project_bundle(project_id, bundle_id)</p> <p>Retrieve a project bundle.</p>"},{"location":"v2/docs/ProjectApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle import ProjectBundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project bundle.\n        api_response = api_instance.get_project_bundle(project_id, bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_2","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v2/docs/ProjectApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project_bundles","title":"get_project_bundles","text":"<p>ProjectBundleList get_project_bundles(project_id)</p> <p>Retrieve project bundles.</p>"},{"location":"v2/docs/ProjectApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle_list import ProjectBundleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve project bundles.\n        api_response = api_instance.get_project_bundles(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_3","title":"Return type","text":"<p>ProjectBundleList</p>"},{"location":"v2/docs/ProjectApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundles are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_projects","title":"get_projects","text":"<p>ProjectPagedList get_projects()</p> <p>Retrieve a list of projects.</p>"},{"location":"v2/docs/ProjectApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_paged_list import ProjectPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = [\n        \"userTags_example\",\n    ] # [str] | User tags to filter on (optional)\n    technical_tags = [\n        \"technicalTags_example\",\n    ] # [str] | Technical tags to filter on (optional)\n    include_hidden_projects = False # bool, none_type | Include hidden projects. (optional) if omitted the server will use the default value of False\n    region = \"region_example\" # str | The ID of the region to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of projects.\n        api_response = api_instance.get_projects(search=search, user_tags=user_tags, technical_tags=technical_tags, include_hidden_projects=include_hidden_projects, region=region, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_projects: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags [str] User tags to filter on [optional] technical_tags [str] Technical tags to filter on [optional] include_hidden_projects bool, none_type Include hidden projects. [optional] if omitted the server will use the default value of False region str The ID of the region to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information [optional]"},{"location":"v2/docs/ProjectApi/#return-type_4","title":"Return type","text":"<p>ProjectPagedList</p>"},{"location":"v2/docs/ProjectApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#hide_project","title":"hide_project","text":"<p>hide_project(project_id)</p> <p>Hide a project.</p>"},{"location":"v2/docs/ProjectApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Hide a project.\n        api_instance.hide_project(project_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;hide_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The project is hidden. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#link_project_bundle","title":"link_project_bundle","text":"<p>ProjectBundle link_project_bundle(project_id, bundle_id)</p> <p>Link a bundle to a project.</p>"},{"location":"v2/docs/ProjectApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle import ProjectBundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a bundle to a project.\n        api_response = api_instance.link_project_bundle(project_id, bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;link_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_6","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v2/docs/ProjectApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#unlink_project_bundle","title":"unlink_project_bundle","text":"<p>unlink_project_bundle(project_id, bundle_id)</p> <p>Unlink a bundle from a project.</p>"},{"location":"v2/docs/ProjectApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a bundle from a project.\n        api_instance.unlink_project_bundle(project_id, bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;unlink_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#update_project","title":"update_project","text":"<p>Project update_project(project_id)</p> <p>Update a project.</p> <p>Fields which can be updated: - shortDescription - projectInformation - billingMode - dataSharingEnabled - tags - storageBundle - metaDataModel - analysisPriority</p>"},{"location":"v2/docs/ProjectApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    project = Project(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        urn=\"urn_example\",\n        name=\"name_example\",\n        active=True,\n        base_enabled=True,\n        short_description=\"short_description_example\",\n        information=\"information_example\",\n        region=Region(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            country=Country(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                name=\"name_example\",\n                region=\"region_example\",\n            ),\n            city_name=\"city_name_example\",\n        ),\n        billing_mode=\"PROJECT\",\n        data_sharing_enabled=True,\n        tags=ProjectTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n        ),\n        storage_bundle=StorageBundle(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            bundle_name=\"bundle_name_example\",\n            entitlement_name=\"entitlement_name_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n        ),\n        self_managed_storage_configuration=StorageConfiguration(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            type=\"AWS_S3\",\n            status=\"INITIALIZING\",\n            error_message=\"error_message_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            is_default=True,\n        ),\n        analysis_priority=\"Low\",\n        metadata_model=MetadataModel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            state=\"DRAFT\",\n            parent_model_id=\"parent_model_id_example\",\n        ),\n        application=Application(\n            id=\"id_example\",\n            name=\"name_example\",\n            type=\"MAIN\",\n            display_name=\"display_name_example\",\n        ),\n    ) # Project |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project.\n        api_response = api_instance.update_project(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;update_project: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project.\n        api_response = api_instance.update_project(project_id, if_match=if_match, project=project)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;update_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project Project [optional]"},{"location":"v2/docs/ProjectApi/#return-type_8","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully update. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/","title":"libica.openapi.v2.ProjectBaseApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table."},{"location":"v2/docs/ProjectBaseApi/#create_base_connection_details","title":"create_base_connection_details","text":"<p>BaseConnection create_base_connection_details(project_id)</p> <p>Creates the connection details to snowflake instance.</p>"},{"location":"v2/docs/ProjectBaseApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.base_connection import BaseConnection\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Creates the connection details to snowflake instance.\n        api_response = api_instance.create_base_connection_details(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;create_base_connection_details: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type","title":"Return type","text":"<p>BaseConnection</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The base connection details are created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_job","title":"get_base_job","text":"<p>BaseJob get_base_job(project_id, base_job_id)</p> <p>Retrieve a base job.</p>"},{"location":"v2/docs/ProjectBaseApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    base_job_id = \"baseJobId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a base job.\n        api_response = api_instance.get_base_job(project_id, base_job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str base_job_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type_1","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_jobs","title":"get_base_jobs","text":"<p>BaseJobList get_base_jobs(project_id)</p> <p>Retrieve a list of base jobs</p>"},{"location":"v2/docs/ProjectBaseApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job_list import BaseJobList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - description - type (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_jobs: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - description - type [optional]"},{"location":"v2/docs/ProjectBaseApi/#return-type_2","title":"Return type","text":"<p>BaseJobList</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_tables","title":"get_base_tables","text":"<p>ProjectBaseTableList get_base_tables(project_id)</p> <p>Retrieve a list of base tables.</p>"},{"location":"v2/docs/ProjectBaseApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base tables.\n        api_response = api_instance.get_base_tables(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_tables: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type_3","title":"Return type","text":"<p>ProjectBaseTableList</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#load_data","title":"load_data","text":"<p>BaseJob load_data(project_id, table_id)</p> <p>Load data in a base table.</p> <p>Load data in the specified table</p>"},{"location":"v2/docs/ProjectBaseApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    table_id = \"tableId_example\" # str | \n    load_data_in_base_request = LoadDataInBaseRequest(\n        allow_jagged_rows=False,\n        allow_quoted_newlines=False,\n        data_id=\"data_id_example\",\n        delimiter=\",\",\n        encoding=\"UTF8\",\n        force_load=False,\n        header_rows_to_skip=1,\n        ignore_unknown_values=False,\n        include_references=True,\n        include_data_reference=True,\n        include_sample_reference=True,\n        include_pipeline_reference=True,\n        include_pipeline_execution_reference=True,\n        include_tenant_reference=True,\n        null_marker=\"null_marker_example\",\n        number_of_errors_allowed=0,\n        quote=\"quote_example\",\n        write_preference=\"APPENDTOTABLE\",\n    ) # LoadDataInBaseRequest | Load data request (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;load_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id, load_data_in_base_request=load_data_in_base_request)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;load_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request [optional]"},{"location":"v2/docs/ProjectBaseApi/#return-type_4","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseJobApi/","title":"libica.openapi.v2.ProjectBaseJobApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_job","title":"get_base_job","text":"<p>BaseJob get_base_job(project_id, base_job_id)</p> <p>Retrieve a base job.</p>"},{"location":"v2/docs/ProjectBaseJobApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_job_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_job_api.ProjectBaseJobApi(api_client)\n    project_id = \"projectId_example\" # str | \n    base_job_id = \"baseJobId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a base job.\n        api_response = api_instance.get_base_job(project_id, base_job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseJobApi-&gt;get_base_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseJobApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str base_job_id str"},{"location":"v2/docs/ProjectBaseJobApi/#return-type","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseJobApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_jobs","title":"get_base_jobs","text":"<p>BaseJobList get_base_jobs(project_id)</p> <p>Retrieve a list of base jobs</p>"},{"location":"v2/docs/ProjectBaseJobApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_job_api\nfrom libica.openapi.v2.model.base_job_list import BaseJobList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_job_api.ProjectBaseJobApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseJobApi-&gt;get_base_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseJobApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseJobApi/#return-type_1","title":"Return type","text":"<p>BaseJobList</p>"},{"location":"v2/docs/ProjectBaseJobApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTable/","title":"ProjectBaseTable","text":""},{"location":"v2/docs/ProjectBaseTable/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the table which should be used in writing queries type str The type of the table status str The status of the table tenant_name str, none_type [optional] description str, none_type The description of the table [optional] number_of_records int, none_type The number of record in the table [optional] data_size int, none_type The amount of Data contained in this table in bytes [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableApi/","title":"libica.openapi.v2.ProjectBaseTableApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table."},{"location":"v2/docs/ProjectBaseTableApi/#get_base_tables","title":"get_base_tables","text":"<p>ProjectBaseTableList get_base_tables(project_id)</p> <p>Retrieve a liste of base tables.</p>"},{"location":"v2/docs/ProjectBaseTableApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_table_api\nfrom libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_table_api.ProjectBaseTableApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a liste of base tables.\n        api_response = api_instance.get_base_tables(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;get_base_tables: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseTableApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseTableApi/#return-type","title":"Return type","text":"<p>ProjectBaseTableList</p>"},{"location":"v2/docs/ProjectBaseTableApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableApi/#load_data","title":"load_data","text":"<p>BaseJob load_data(project_id, table_id)</p> <p>Load data in a base table.</p> <p>Load data in the specified table</p>"},{"location":"v2/docs/ProjectBaseTableApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_table_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_table_api.ProjectBaseTableApi(api_client)\n    project_id = \"projectId_example\" # str | \n    table_id = \"tableId_example\" # str | \n    load_data_in_base_request = LoadDataInBaseRequest(\n        allow_jagged_rows=False,\n        allow_quoted_newlines=False,\n        data_id=\"data_id_example\",\n        delimiter=\",\",\n        encoding=\"UTF8\",\n        force_load=False,\n        header_rows_to_skip=1,\n        ignore_unknown_values=False,\n        include_references=True,\n        include_data_reference=True,\n        include_sample_reference=True,\n        include_pipeline_reference=True,\n        include_pipeline_execution_reference=True,\n        include_tenant_reference=True,\n        null_marker=\"null_marker_example\",\n        number_of_errors_allowed=0,\n        quote=\"quote_example\",\n        write_preference=\"APPENDTOTABLE\",\n    ) # LoadDataInBaseRequest | Load data request (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;load_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id, load_data_in_base_request=load_data_in_base_request)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;load_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseTableApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request [optional]"},{"location":"v2/docs/ProjectBaseTableApi/#return-type_1","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseTableApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableList/","title":"ProjectBaseTableList","text":""},{"location":"v2/docs/ProjectBaseTableList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectBaseTable] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBundle/","title":"ProjectBundle","text":""},{"location":"v2/docs/ProjectBundle/#properties","title":"Properties","text":"Name Type Description Notes bundle Bundle project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBundleList/","title":"ProjectBundleList","text":""},{"location":"v2/docs/ProjectBundleList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomEventsApi/","title":"libica.openapi.v2.ProjectCustomEventsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event."},{"location":"v2/docs/ProjectCustomEventsApi/#create_custom_event","title":"create_custom_event","text":"<p>create_custom_event(project_id, create_custom_event)</p> <p>Create a new custom event.</p> <p>Warning: this endpoint allows to create custom events with a code larger than 20 characters (max 50), but the endpoint for creating a custom notification subscription (POST /api/projects/{projectId}/customNotificationSubscriptions) only accepts event codes up to 20 characters.</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_events_api\nfrom libica.openapi.v2.model.create_custom_event import CreateCustomEvent\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_events_api.ProjectCustomEventsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_custom_event = CreateCustomEvent(\n        code=\"code_example\",\n        content={},\n    ) # CreateCustomEvent | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new custom event.\n        api_instance.create_custom_event(project_id, create_custom_event)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomEventsApi-&gt;create_custom_event: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomEventsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_event CreateCustomEvent"},{"location":"v2/docs/ProjectCustomEventsApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectCustomEventsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The event is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/","title":"libica.openapi.v2.ProjectCustomNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription delete_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription get_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions update_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#create_notification_subscription","title":"create_notification_subscription","text":"<p>CustomNotificationSubscription create_notification_subscription(project_id)</p> <p>Create a custom notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.create_custom_notification_subscription import CreateCustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_custom_notification_subscription = CreateCustomNotificationSubscription(\n        custom_event_code=\"custom_event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel_id=\"notification_channel_id_example\",\n    ) # CreateCustomNotificationSubscription | The new subscription (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a custom notification subscription\n        api_response = api_instance.create_notification_subscription(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;create_notification_subscription: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a custom notification subscription\n        api_response = api_instance.create_notification_subscription(project_id, create_custom_notification_subscription=create_custom_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;create_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_notification_subscription CreateCustomNotificationSubscription The new subscription [optional]"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The custom notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#delete_notification_subscription","title":"delete_notification_subscription","text":"<p>delete_notification_subscription(project_id, subscription_id)</p> <p>Delete a custom notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a custom notification subscription\n        api_instance.delete_notification_subscription(project_id, subscription_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;delete_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str subscription_id str The ID of the custom notification subscription to delete"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The custom notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_notification_subscription","title":"get_notification_subscription","text":"<p>CustomNotificationSubscription get_notification_subscription(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_notification_subscription(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_notification_subscriptions","title":"get_notification_subscriptions","text":"<p>CustomNotificationSubscriptionList get_notification_subscriptions(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription_list import CustomNotificationSubscriptionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_notification_subscriptions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_notification_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>CustomNotificationSubscriptionList</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#update_notification_subscription","title":"update_notification_subscription","text":"<p>CustomNotificationSubscription update_notification_subscription(project_id, subscription_id)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel </p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to update\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    custom_notification_subscription = CustomNotificationSubscription(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        custom_event_code=\"custom_event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel=NotificationChannel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            enabled=True,\n            type=\"MAIL\",\n            address=\"address_example\",\n        ),\n    ) # CustomNotificationSubscription | The updated subscription (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;update_notification_subscription: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription(project_id, subscription_id, if_match=if_match, custom_notification_subscription=custom_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;update_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] custom_notification_subscription CustomNotificationSubscription The updated subscription [optional]"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectData/","title":"ProjectData","text":""},{"location":"v2/docs/ProjectData/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/","title":"libica.openapi.v2.ProjectDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. create_data_in_project POST /api/projects/{projectId}/data Create data in this project. create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data."},{"location":"v2/docs/ProjectDataApi/#add_secondary_data","title":"add_secondary_data","text":"<p>add_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Add secondary data to data.</p>"},{"location":"v2/docs/ProjectDataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    secondary_data_id = \"secondaryDataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Add secondary data to data.\n        api_instance.add_secondary_data(project_id, data_id, secondary_data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;add_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully added. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#archive_data","title":"archive_data","text":"<p>archive_data(project_id, data_id)</p> <p>Schedule this data for archival.</p> <p>Endpoint for scheduling this data for archival. This will also archive all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for archival.\n        api_instance.archive_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;archive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for archival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#complete_folder_upload_session","title":"complete_folder_upload_session","text":"<p>FolderUploadSession complete_folder_upload_session(project_id, data_id, folder_upload_session_id)</p> <p>Complete a trackable folder upload session.</p> <p>Complete a trackable folder upload session. By completing the folder upload session, and specifying how many files you have uploaded, ICA can ensure that all uploaded files are accounted for.</p>"},{"location":"v2/docs/ProjectDataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.complete_folder_upload_session import CompleteFolderUploadSession\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    folder_upload_session_id = \"folderUploadSessionId_example\" # str | \n    complete_folder_upload_session = CompleteFolderUploadSession(\n        number_of_expected_uploaded_files=1,\n    ) # CompleteFolderUploadSession | The info required to complete the folder upload session. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Complete a trackable folder upload session.\n        api_response = api_instance.complete_folder_upload_session(project_id, data_id, folder_upload_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;complete_folder_upload_session: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Complete a trackable folder upload session.\n        api_response = api_instance.complete_folder_upload_session(project_id, data_id, folder_upload_session_id, complete_folder_upload_session=complete_folder_upload_session)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;complete_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str complete_folder_upload_session CompleteFolderUploadSession The info required to complete the folder upload session. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_2","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_data_in_project","title":"create_data_in_project","text":"<p>ProjectData create_data_in_project(project_id)</p> <p>Create data in this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_data import CreateData\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_data = CreateData(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        format_code=\"format_code_example\",\n        data_type=\"FILE\",\n    ) # CreateData | The data to create. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create data in this project.\n        api_response = api_instance.create_data_in_project(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_data_in_project: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create data in this project.\n        api_response = api_instance.create_data_in_project(project_id, create_data=create_data)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_data_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str create_data CreateData The data to create. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_3","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_download_url_for_data","title":"create_download_url_for_data","text":"<p>Download create_download_url_for_data(project_id, data_id)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v2/docs/ProjectDataApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.download import Download\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_4","title":"Return type","text":"<p>Download</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_download_urls_for_data","title":"create_download_urls_for_data","text":"<p>DataUrlWithPathList create_download_urls_for_data(project_id)</p> <p>Retrieve download URLs for the data.</p> <p>Can be used to download files directly from the region where it is located, no connector is needed. Not applicable for Folders.</p>"},{"location":"v2/docs/ProjectDataApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_id_or_path_list import DataIdOrPathList\nfrom libica.openapi.v2.model.data_url_with_path_list import DataUrlWithPathList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id_or_path_list = DataIdOrPathList(\n        data_ids=[\n            \"data_ids_example\",\n        ],\n        data_paths=[\n            \"data_paths_example\",\n        ],\n    ) # DataIdOrPathList |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve download URLs for the data.\n        api_response = api_instance.create_download_urls_for_data(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_urls_for_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve download URLs for the data.\n        api_response = api_instance.create_download_urls_for_data(project_id, data_id_or_path_list=data_id_or_path_list)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_urls_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str data_id_or_path_list DataIdOrPathList [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_5","title":"Return type","text":"<p>DataUrlWithPathList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The download URLs are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_folder_upload_session","title":"create_folder_upload_session","text":"<p>FolderUploadSession create_folder_upload_session(project_id, data_id)</p> <p>Create a trackable folder upload session.</p> <p>This endpoint can be used to ensure that all uploaded files within the requested session are accounted for. This call has to be used together with the :complete endpoint once upload is done.</p>"},{"location":"v2/docs/ProjectDataApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    create_temporary_credentials = CreateTemporaryCredentials(\n        credentials_format=\"RCLONE\",\n    ) # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a trackable folder upload session.\n        api_response = api_instance.create_folder_upload_session(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_upload_session: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a trackable folder upload session.\n        api_response = api_instance.create_folder_upload_session(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_6","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 The folder upload session is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_inline_view_url_for_data","title":"create_inline_view_url_for_data","text":"<p>InlineView create_inline_view_url_for_data(project_id, data_id)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/ProjectDataApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.inline_view import InlineView\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_inline_view_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_7","title":"Return type","text":"<p>InlineView</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_temporary_credentials_for_data","title":"create_temporary_credentials_for_data","text":"<p>TempCredentials create_temporary_credentials_for_data(project_id, data_id)</p> <p>Retrieve temporary credentials for this data.</p> <p>Can be used to upload or download a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/ProjectDataApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v2.model.temp_credentials import TempCredentials\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    create_temporary_credentials = CreateTemporaryCredentials(\n        credentials_format=\"RCLONE\",\n    ) # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve temporary credentials for this data.\n        api_response = api_instance.create_temporary_credentials_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_temporary_credentials_for_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve temporary credentials for this data.\n        api_response = api_instance.create_temporary_credentials_for_data(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_temporary_credentials_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_8","title":"Return type","text":"<p>TempCredentials</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_upload_url_for_data","title":"create_upload_url_for_data","text":"<p>Upload create_upload_url_for_data(project_id, data_id)</p> <p>Retrieve an upload URL for this data.</p> <p>Can be used to upload a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/ProjectDataApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.upload import Upload\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    file_type = \"fileType_example\" # str |  (optional)\n    hash = \"hash_example\" # str |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an upload URL for this data.\n        api_response = api_instance.create_upload_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_upload_url_for_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve an upload URL for this data.\n        api_response = api_instance.create_upload_url_for_data(project_id, data_id, file_type=file_type, hash=hash)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_upload_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str data_id str file_type str [optional] hash str [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_9","title":"Return type","text":"<p>Upload</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The upload URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#delete_data","title":"delete_data","text":"<p>delete_data(project_id, data_id)</p> <p>Schedule this data for deletion.</p> <p>Endpoint for scheduling this data for deletion. This will also delete all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for deletion.\n        api_instance.delete_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;delete_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_10","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for deletion. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_data_eligible_for_linking","title":"get_data_eligible_for_linking","text":"<p>DataPagedList get_data_eligible_for_linking(project_id)</p> <p>Retrieve a list of data eligible for linking to the current project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_paged_list import DataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of data eligible for linking to the current project.\n        api_response = api_instance.get_data_eligible_for_linking(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_data_eligible_for_linking: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data eligible for linking to the current project.\n        api_response = api_instance.get_data_eligible_for_linking(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_data_eligible_for_linking: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_11","title":"Return type","text":"<p>DataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_folder_upload_session","title":"get_folder_upload_session","text":"<p>FolderUploadSession get_folder_upload_session(project_id, data_id, folder_upload_session_id)</p> <p>Retrieve folder upload session details.</p> <p>Retrieve folder upload session details, including the current status of your upload session.</p>"},{"location":"v2/docs/ProjectDataApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    folder_upload_session_id = \"folderUploadSessionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve folder upload session details.\n        api_response = api_instance.get_folder_upload_session(project_id, data_id, folder_upload_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_12","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session details are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_non_sample_project_data","title":"get_non_sample_project_data","text":"<p>ProjectDataPagedList get_non_sample_project_data(project_id)</p> <p>Retrieve a list of project data not linked to a sample.</p>"},{"location":"v2/docs/ProjectDataApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data not linked to a sample.\n        api_response = api_instance.get_non_sample_project_data(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_non_sample_project_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data not linked to a sample.\n        api_response = api_instance.get_non_sample_project_data(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_non_sample_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_13","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data","title":"get_project_data","text":"<p>ProjectData get_project_data(project_id, data_id)</p> <p>Retrieve a project data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data.\n        api_response = api_instance.get_project_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_14","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data_children","title":"get_project_data_children","text":"<p>ProjectDataPagedList get_project_data_children(project_id, data_id)</p> <p>Retrieve the children of this data.</p>"},{"location":"v2/docs/ProjectDataApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-pagination","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added pagination","text":""},{"location":"v2/docs/ProjectDataApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_list import DataList\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the children of this data.\n        api_response = api_instance.get_project_data_children(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_children: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the children of this data.\n        api_response = api_instance.get_project_data_children(project_id, data_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_children: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str data_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_15","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data children is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data_list","title":"get_project_data_list","text":"<p>ProjectDataPagedList get_project_data_list(project_id)</p> <p>Retrieve the list of project data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of project data.\n        api_response = api_instance.get_project_data_list(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_list: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of project data.\n        api_response = api_instance.get_project_data_list(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_16","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_projects_linked_to_data","title":"get_projects_linked_to_data","text":"<p>ProjectList get_projects_linked_to_data(project_id, data_id)</p> <p>Retrieve a list of projects to which this data is linked.</p>"},{"location":"v2/docs/ProjectDataApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_list import ProjectList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of projects to which this data is linked.\n        api_response = api_instance.get_projects_linked_to_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_projects_linked_to_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_17","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_secondary_data","title":"get_secondary_data","text":"<p>DataList get_secondary_data(project_id, data_id)</p> <p>Retrieve a list of secondary data for data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_list import DataList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of secondary data for data.\n        api_response = api_instance.get_secondary_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_18","title":"Return type","text":"<p>DataList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The list of secondary data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#link_data_to_project","title":"link_data_to_project","text":"<p>ProjectData link_data_to_project(project_id, data_id)</p> <p>Link data to this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to this project.\n        api_response = api_instance.link_data_to_project(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;link_data_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_19","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#remove_secondary_data","title":"remove_secondary_data","text":"<p>remove_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Remove secondary data from data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_20","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    secondary_data_id = \"secondaryDataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Remove secondary data from data.\n        api_instance.remove_secondary_data(project_id, data_id, secondary_data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;remove_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_20","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_20","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully removed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#schedule_download_for_data","title":"schedule_download_for_data","text":"<p>DataTransfer schedule_download_for_data(project_id, data_id, schedule_download)</p> <p>Schedule a download.</p> <p>Endpoint for scheduling a download for the data specified by the ID to a connector. This download will only start when the connector is running. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_21","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_transfer import DataTransfer\nfrom libica.openapi.v2.model.schedule_download import ScheduleDownload\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    schedule_download = ScheduleDownload(\n        connector_id=\"connector_id_example\",\n        protocol=\"HTTPS\",\n        local_path=\"local_path_example\",\n        disable_hashing=True,\n    ) # ScheduleDownload | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule a download.\n        api_response = api_instance.schedule_download_for_data(project_id, data_id, schedule_download)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;schedule_download_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str data_id str schedule_download ScheduleDownload"},{"location":"v2/docs/ProjectDataApi/#return-type_21","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_21","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 0 The datatransfer which is scheduled. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#unarchive_data","title":"unarchive_data","text":"<p>unarchive_data(project_id, data_id)</p> <p>Schedule this data for unarchival.</p> <p>Endpoint for scheduling this data for unarchival. This will also unarchive all files and directories below that data. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_22","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for unarchival.\n        api_instance.unarchive_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unarchive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_22","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_22","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_22","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_22","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_22","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for unarchival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#unlink_data_from_project","title":"unlink_data_from_project","text":"<p>unlink_data_from_project(project_id, data_id)</p> <p>Unlink data from this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_23","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from this project.\n        api_instance.unlink_data_from_project(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unlink_data_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_23","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_23","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_23","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_23","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_23","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#update_project_data","title":"update_project_data","text":"<p>ProjectData update_project_data(project_id, data_id)</p> <p>Update this project data.</p> <p>Fields which can be updated for files:  - data.willBeArchivedAt  - data.willBeDeletedAt  - data.format  - data.tags  Fields which can be updated for folders:  - data.tags  </p>"},{"location":"v2/docs/ProjectDataApi/#example_24","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    project_data = ProjectData(\n        data=Data(\n            id=\"id_example\",\n            urn=\"urn_example\",\n            details=DataDetails(\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                creator_id=\"creator_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                owning_project_id=\"owning_project_id_example\",\n                owning_project_name=\"owning_project_name_example\",\n                name=\"name_example\",\n                path=\"path_example\",\n                file_size_in_bytes=1,\n                status=\"PARTIAL\",\n                tags=DataTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    connector_tags=[\n                        \"connector_tags_example\",\n                    ],\n                    run_in_tags=[\n                        \"run_in_tags_example\",\n                    ],\n                    run_out_tags=[\n                        \"run_out_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                format=DataFormat(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    description=\"description_example\",\n                    mime_type=\"mime_type_example\",\n                ),\n                data_type=\"FILE\",\n                object_e_tag=\"object_e_tag_example\",\n                stored_for_the_first_time_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n                will_be_archived_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                will_be_deleted_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                sequencing_run=SequencingRun(\n                    id=\"id_example\",\n                    instrument_run_id=\"instrument_run_id_example\",\n                    name=\"name_example\",\n                ),\n            ),\n        ),\n        project_id=\"project_id_example\",\n    ) # ProjectData | The updated project data. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update this project data.\n        api_response = api_instance.update_project_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;update_project_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update this project data.\n        api_response = api_instance.update_project_data(project_id, data_id, project_data=project_data)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;update_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_24","title":"Parameters","text":"Name Type Description Notes project_id str data_id str project_data ProjectData The updated project data. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_24","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_24","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_24","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_24","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatch/","title":"ProjectDataLinkingBatch","text":""},{"location":"v2/docs/ProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/","title":"libica.openapi.v2.ProjectDataLinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items."},{"location":"v2/docs/ProjectDataLinkingBatchApi/#create_project_data_linking_batch","title":"create_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch create_project_data_linking_batch(project_id)</p> <p>Create a project data linking batch.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.create_project_data_linking_batch import CreateProjectDataLinkingBatch\nfrom libica.openapi.v2.model.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_data_linking_batch = CreateProjectDataLinkingBatch(\n        items=[\n            CreateProjectDataLinkingBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n    ) # CreateProjectDataLinkingBatch |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data linking batch.\n        api_response = api_instance.create_project_data_linking_batch(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;create_project_data_linking_batch: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a project data linking batch.\n        api_response = api_instance.create_project_data_linking_batch(project_id, create_project_data_linking_batch=create_project_data_linking_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;create_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_linking_batch CreateProjectDataLinkingBatch [optional]"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data linking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch","title":"get_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch get_project_data_linking_batch(project_id, batch_id)</p> <p>Retrieve a project data linking batch.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data linking batch.\n        api_response = api_instance.get_project_data_linking_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_item","title":"get_project_data_linking_batch_item","text":"<p>ProjectDataLinkingBatchItem get_project_data_linking_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data linking batch item.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch_item import ProjectDataLinkingBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data linking batch item.\n        api_response = api_instance.get_project_data_linking_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataLinkingBatchItem</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_items","title":"get_project_data_linking_batch_items","text":"<p>ProjectDataLinkingBatchItemPagedList get_project_data_linking_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data linking batch items.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch_item_paged_list import ProjectDataLinkingBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data linking batch items.\n        api_response = api_instance.get_project_data_linking_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data linking batch items.\n        api_response = api_instance.get_project_data_linking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataLinkingBatchItemPagedList</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data linking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItem/","title":"ProjectDataLinkingBatchItem","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataLinkingBatchItemRequest processing ProjectDataLinkingBatchItemProcessing created_project_data ProjectData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedList/","title":"ProjectDataLinkingBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataLinkingBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessing/","title":"ProjectDataLinkingBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemRequest/","title":"ProjectDataLinkingBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataPagedList/","title":"ProjectDataPagedList","text":""},{"location":"v2/docs/ProjectDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/","title":"libica.openapi.v2.ProjectDataTransferApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers."},{"location":"v2/docs/ProjectDataTransferApi/#abort_data_transfer","title":"abort_data_transfer","text":"<p>abort_data_transfer(project_id, data_transfer_id)</p> <p>Abort a data transfer.</p> <p>Endpoint for aborting a data transfer.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_transfer_id = \"dataTransferId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Abort a data transfer.\n        api_instance.abort_data_transfer(project_id, data_transfer_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;abort_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v2/docs/ProjectDataTransferApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The data transfer is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfer","title":"get_data_transfer","text":"<p>DataTransfer get_data_transfer(project_id, data_transfer_id)</p> <p>Retrieve a data transfer.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.data_transfer import DataTransfer\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_transfer_id = \"dataTransferId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a data transfer.\n        api_response = api_instance.get_data_transfer(project_id, data_transfer_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_1","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The data transfer is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfers","title":"get_data_transfers","text":"<p>DataTransferPagedList get_data_transfers(project_id)</p> <p>Retrieve a list of data transfers.</p> <p>Retrieve a list of data transfers for the current app (session), excluding web browser transfers.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.data_transfer_paged_list import DataTransferPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    connector = \"connector_example\" # str | The ID of the connector to filter on. (optional)\n    direction = \"direction_example\" # str | The direction to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of data transfers.\n        api_response = api_instance.get_data_transfers(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfers: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data transfers.\n        api_response = api_instance.get_data_transfers(project_id, connector=connector, direction=direction, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfers: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str connector str The ID of the connector to filter on. [optional] direction str The direction to filter on. [optional] status str The status to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration [optional]"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_2","title":"Return type","text":"<p>DataTransferPagedList</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data transfers is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectList/","title":"ProjectList","text":""},{"location":"v2/docs/ProjectList/#properties","title":"Properties","text":"Name Type Description Notes items [Project] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/","title":"libica.openapi.v2.ProjectNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_subscription1 POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription delete_notification_subscription1 DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription get_notification_subscription1 GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions1 GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions update_notification_subscription1 PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#create_notification_subscription1","title":"create_notification_subscription1","text":"<p>NotificationSubscription create_notification_subscription1(project_id)</p> <p>Create a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.create_notification_subscription import CreateNotificationSubscription\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    create_notification_subscription = CreateNotificationSubscription(\n        event_code=\"event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel_id=\"notification_channel_id_example\",\n    ) # CreateNotificationSubscription | The new subscription (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a notification subscription\n        api_response = api_instance.create_notification_subscription1(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;create_notification_subscription1: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a notification subscription\n        api_response = api_instance.create_notification_subscription1(project_id, create_notification_subscription=create_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;create_notification_subscription1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project create_notification_subscription CreateNotificationSubscription The new subscription [optional]"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#delete_notification_subscription1","title":"delete_notification_subscription1","text":"<p>delete_notification_subscription1(project_id, subscription_id)</p> <p>Delete a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a notification subscription\n        api_instance.delete_notification_subscription1(project_id, subscription_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;delete_notification_subscription1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to delete"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscription1","title":"get_notification_subscription1","text":"<p>NotificationSubscription get_notification_subscription1(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_notification_subscription1(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscription1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscriptions1","title":"get_notification_subscriptions1","text":"<p>NotificationSubscriptionList get_notification_subscriptions1(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.notification_subscription_list import NotificationSubscriptionList\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_notification_subscriptions1(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscriptions1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>NotificationSubscriptionList</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#update_notification_subscription1","title":"update_notification_subscription1","text":"<p>NotificationSubscription update_notification_subscription1(project_id, subscription_id)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel </p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to update\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    notification_subscription = NotificationSubscription(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        event_code=\"event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel=NotificationChannel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            enabled=True,\n            type=\"MAIL\",\n            address=\"address_example\",\n        ),\n    ) # NotificationSubscription | The updated subscription (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription1(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription1: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription1(project_id, subscription_id, if_match=if_match, notification_subscription=notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription1: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to update if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] notification_subscription NotificationSubscription The updated subscription [optional]"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPagedList/","title":"ProjectPagedList","text":""},{"location":"v2/docs/ProjectPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Project] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermission/","title":"ProjectPermission","text":""},{"location":"v2/docs/ProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str role_project str role_flow str role_base str role_bench str membership_type str upload_allowed bool download_allowed bool tenant_name str, none_type [optional] user User [optional] email_address str, none_type Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool, none_type Only present when membershipType is EMAIL [optional] invitation_rejected bool, none_type Only present when user is invited by EMAIL [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/","title":"libica.openapi.v2.ProjectPermissionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission."},{"location":"v2/docs/ProjectPermissionApi/#create_project_permission","title":"create_project_permission","text":"<p>ProjectPermission create_project_permission(project_id)</p> <p>Create a project permission.</p>"},{"location":"v2/docs/ProjectPermissionApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.create_project_permission import CreateProjectPermission\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_permission = CreateProjectPermission(\n        role_project=\"NONE\",\n        role_flow=\"NONE\",\n        role_base=\"NONE\",\n        role_bench=\"NONE\",\n        membership_type=\"USER\",\n        user_id=\"user_id_example\",\n        email_address=\"email_address_example\",\n        workgroup_id=\"workgroup_id_example\",\n        upload_allowed=True,\n        download_allowed=True,\n    ) # CreateProjectPermission |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project permission.\n        api_response = api_instance.create_project_permission(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;create_project_permission: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a project permission.\n        api_response = api_instance.create_project_permission(project_id, create_project_permission=create_project_permission)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;create_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_permission CreateProjectPermission [optional]"},{"location":"v2/docs/ProjectPermissionApi/#return-type","title":"Return type","text":"<p>ProjectPermission</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project permission is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permission","title":"get_project_permission","text":"<p>ProjectPermission get_project_permission(project_id, permission_id)</p> <p>Retrieve a project permission.</p>"},{"location":"v2/docs/ProjectPermissionApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    permission_id = \"permissionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project permission.\n        api_response = api_instance.get_project_permission(project_id, permission_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str"},{"location":"v2/docs/ProjectPermissionApi/#return-type_1","title":"Return type","text":"<p>ProjectPermission</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permissions","title":"get_project_permissions","text":"<p>ProjectPermissionList get_project_permissions(project_id)</p> <p>Retrieve a list of project permissions.</p>"},{"location":"v2/docs/ProjectPermissionApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission_list import ProjectPermissionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project permissions.\n        api_response = api_instance.get_project_permissions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permissions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectPermissionApi/#return-type_2","title":"Return type","text":"<p>ProjectPermissionList</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project permissions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#update_project_permission","title":"update_project_permission","text":"<p>ProjectPermission update_project_permission(project_id, permission_id)</p> <p>Update a project permission.</p> <p>Fields which can be updated: - uploadAllowed - downloadAllowed - roleProject - roleFlow - roleBase - roleBench</p>"},{"location":"v2/docs/ProjectPermissionApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    permission_id = \"permissionId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    project_permission = ProjectPermission(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        role_project=\"NONE\",\n        role_flow=\"NONE\",\n        role_base=\"NONE\",\n        role_bench=\"NONE\",\n        membership_type=\"USER\",\n        user=User(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            username=\"username_example\",\n            email=\"email_example\",\n            firstname=\"firstname_example\",\n            lastname=\"lastname_example\",\n            active=True,\n            tenant_administrator=True,\n            job_title=\"job_title_example\",\n            greeting=\"MR\",\n            mobile_phone_number=\"mobile_phone_number_example\",\n            phone_number=\"phone_number_example\",\n            fax_number=\"fax_number_example\",\n            email_verified=True,\n            two_factor_authentication=True,\n            country=Country(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                name=\"name_example\",\n                region=\"region_example\",\n            ),\n            address_line1=\"address_line1_example\",\n            address_line2=\"address_line2_example\",\n            address_line3=\"address_line3_example\",\n            postal_code=\"postal_code_example\",\n            city=\"city_example\",\n            state=\"state_example\",\n        ),\n        email_address=\"email_address_example\",\n        workgroup=Workgroup(\n            id=\"id_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n        ),\n        invitation_accepted=True,\n        invitation_rejected=True,\n        upload_allowed=True,\n        download_allowed=True,\n    ) # ProjectPermission |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project permission.\n        api_response = api_instance.update_project_permission(project_id, permission_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;update_project_permission: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project permission.\n        api_response = api_instance.update_project_permission(project_id, permission_id, if_match=if_match, project_permission=project_permission)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;update_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_permission ProjectPermission [optional]"},{"location":"v2/docs/ProjectPermissionApi/#return-type_3","title":"Return type","text":"<p>ProjectPermission</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionList/","title":"ProjectPermissionList","text":""},{"location":"v2/docs/ProjectPermissionList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectPermission] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipeline/","title":"ProjectPipeline","text":""},{"location":"v2/docs/ProjectPipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline Pipeline project_id str bundle_links BundleList any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/","title":"libica.openapi.v2.ProjectPipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. release_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project."},{"location":"v2/docs/ProjectPipelineApi/#create_cwl_pipeline","title":"create_cwl_pipeline","text":"<p>ProjectPipeline create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id)</p> <p>Create a CWL pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the CWL pipeline\n    description = \"description_example\" # str | The description of the CWL pipeline\n    workflow_cwl_file = open('/path/to/file', 'rb') # file_type | The CWL workflow file.\n    parameters_xml_file = open('/path/to/file', 'rb') # file_type | \n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    tool_cwl_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a CWL pipeline within a project.\n        api_response = api_instance.create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a CWL pipeline within a project.\n        api_response = api_instance.create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file file_type The CWL workflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_nextflow_pipeline","title":"create_nextflow_pipeline","text":"<p>ProjectPipeline create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id)</p> <p>Create a Nextflow pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the pipeline\n    description = \"description_example\" # str | The description of the pipeline\n    main_nextflow_file = open('/path/to/file', 'rb') # file_type | The main Nextflow file.\n    parameters_xml_file = open('/path/to/file', 'rb') # file_type | \n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    pipeline_language_version_id = \"pipeline_language_version_id_example\" # str, none_type | The id of the Nextflow version to use for the pipeline. (optional)\n    nextflow_config_file = open('/path/to/file', 'rb') # file_type | The Nextflow config file. (optional)\n    other_nextflow_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the pipeline description str The description of the pipeline main_nextflow_file file_type The main Nextflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. pipeline_language_version_id str, none_type The id of the Nextflow version to use for the pipeline. [optional] nextflow_config_file file_type The Nextflow config file. [optional] other_nextflow_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type_1","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline","title":"get_project_pipeline","text":"<p>ProjectPipeline get_project_pipeline(project_id, pipeline_id)</p> <p>Retrieve a project pipeline.</p> <p>Retrieves a project pipeline. This can be a pipeline from a linked bundle or an entitled, unlinked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project pipeline.\n        api_response = api_instance.get_project_pipeline(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve"},{"location":"v2/docs/ProjectPipelineApi/#return-type_2","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_html_documentation","title":"get_project_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_project_pipeline_html_documentation(project_id, pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_project_pipeline_html_documentation(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v2/docs/ProjectPipelineApi/#return-type_3","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_input_parameters","title":"get_project_pipeline_input_parameters","text":"<p>InputParameterList get_project_pipeline_input_parameters(project_id, pipeline_id)</p> <p>Retrieve input parameters for a project pipeline.</p> <p>Retrieve input parameters for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.input_parameter_list import InputParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve input parameters for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve input parameters for a project pipeline.\n        api_response = api_instance.get_project_pipeline_input_parameters(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve input parameters for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_4","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_reference_sets","title":"get_project_pipeline_reference_sets","text":"<p>ReferenceSetList get_project_pipeline_reference_sets(project_id, pipeline_id)</p> <p>Retrieve the reference sets of a project pipeline.</p> <p>Retrieve the reference sets of a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the reference sets of a project pipeline.\n        api_response = api_instance.get_project_pipeline_reference_sets(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_5","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipelines","title":"get_project_pipelines","text":"<p>ProjectPipelineList get_project_pipelines(project_id)</p> <p>Retrieve a list of project pipelines.</p> <p>Lists all pipelines that are available to the project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline_list import ProjectPipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project to retrieve pipelines for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project pipelines.\n        api_response = api_instance.get_project_pipelines(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to retrieve pipelines for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_6","title":"Return type","text":"<p>ProjectPipelineList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#link_pipeline_to_project","title":"link_pipeline_to_project","text":"<p>link_pipeline_to_project(project_id, pipeline_id)</p> <p>Link a pipeline to a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a pipeline to a project.\n        api_instance.link_pipeline_to_project(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;link_pipeline_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#release_pipeline","title":"release_pipeline","text":"<p>release_pipeline(project_id, pipeline_id)</p> <p>Release a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Release a pipeline.\n        api_instance.release_pipeline(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;release_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_8","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully released. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#unlink_pipeline_from_project","title":"unlink_pipeline_from_project","text":"<p>unlink_pipeline_from_project(project_id, pipeline_id)</p> <p>Unlink a pipeline from a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a pipeline from a project.\n        api_instance.unlink_pipeline_from_project(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;unlink_pipeline_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_9","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineList/","title":"ProjectPipelineList","text":""},{"location":"v2/docs/ProjectPipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectPipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectSample/","title":"ProjectSample","text":""},{"location":"v2/docs/ProjectSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/","title":"libica.openapi.v2.ProjectSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields."},{"location":"v2/docs/ProjectSampleApi/#add_metadata_model_to_sample","title":"add_metadata_model_to_sample","text":"<p>add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)</p> <p>Add a metadata model to a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    metadata_model_id = \"metadataModelId_example\" # str | The ID of the metadata model\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Add a metadata model to a sample.\n        api_instance.add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;add_metadata_model_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample metadata_model_id str The ID of the metadata model"},{"location":"v2/docs/ProjectSampleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata model is successfully added to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#complete_project_sample","title":"complete_project_sample","text":"<p>complete_project_sample(project_id, sample_id)</p> <p>Completes the sample after data has been linked to it.</p> <p>Completes the sample after data has been linked to it. The sample status will be set to 'Available' and a sample completed event will be triggered as well.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Completes the sample after data has been linked to it.\n        api_instance.complete_project_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;complete_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#create_sample_in_project","title":"create_sample_in_project","text":"<p>ProjectSample create_sample_in_project(project_id)</p> <p>Create a new sample in this project</p>"},{"location":"v2/docs/ProjectSampleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.create_sample import CreateSample\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_sample = CreateSample(\n        name=\"name_example\",\n        description=\"description_example\",\n        tags=OptionalSampleTags(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            connector_tags=[\n                \"connector_tags_example\",\n            ],\n            run_in_tags=[\n                \"run_in_tags_example\",\n            ],\n        ),\n    ) # CreateSample |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new sample in this project\n        api_response = api_instance.create_sample_in_project(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;create_sample_in_project: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a new sample in this project\n        api_response = api_instance.create_sample_in_project(project_id, create_sample=create_sample)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;create_sample_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str create_sample CreateSample [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_2","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#deep_delete_sample","title":"deep_delete_sample","text":"<p>deep_delete_sample(project_id, sample_id)</p> <p>Delete a sample together with all of its data.</p> <p>Endpoint deleting a sample together with all of its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample together with all of its data.\n        api_instance.deep_delete_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;deep_delete_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and all of its data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#delete_and_unlink_sample","title":"delete_and_unlink_sample","text":"<p>delete_and_unlink_sample(project_id, sample_id)</p> <p>Delete a sample and unlink its data.</p> <p>Endpoint for deleting a sample while unlinking its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample and unlink its data.\n        api_instance.delete_and_unlink_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_and_unlink_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully deleted and the its data is successfully unlinked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#delete_sample_with_input","title":"delete_sample_with_input","text":"<p>delete_sample_with_input(project_id, sample_id)</p> <p>Delete a sample as well as its input data.</p> <p>Endpoint for deleting a sample as well as its input data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample as well as its input data.\n        api_instance.delete_sample_with_input(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_sample_with_input: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and its input data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_project_sample","title":"get_project_sample","text":"<p>ProjectSample get_project_sample(project_id, sample_id)</p> <p>Retrieve a project sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project sample.\n        api_response = api_instance.get_project_sample(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_6","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The project sample is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_project_samples","title":"get_project_samples","text":"<p>ProjectSamplePagedList get_project_samples(project_id)</p> <p>Retrieve project samples.</p> <p>Endpoint for retrieving project samples. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.find_project_samples import FindProjectSamples\nfrom libica.openapi.v2.model.project_sample_paged_list import ProjectSamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n    find_project_samples = FindProjectSamples(\n        conditions=[\n            FindSampleCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                match_mode=\"EXACT\",\n                values=[\n                    \"values_example\",\n                ],\n            ),\n        ],\n        date_conditions=[\n            FindSampleDateCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                before_date=\"before_date_example\",\n                after_date=\"after_date_example\",\n            ),\n        ],\n        number_conditions=[\n            FindSampleNumberCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                lower_bound=\"lower_bound_example\",\n                upper_bound=\"upper_bound_example\",\n            ),\n        ],\n        boolean_conditions=[\n            FindSampleBooleanCondition(\n                metadata_field=Field(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                    description=\"description_example\",\n                    field_type=\"TEXT\",\n                    required=True,\n                    multivalued=True,\n                    filled_by_pipeline=True,\n                    fields=[\n                        Field(),\n                    ],\n                    enumeration_values=[\n                        \"enumeration_values_example\",\n                    ],\n                ),\n                field=\"field_example\",\n                value=\"value_example\",\n            ),\n        ],\n        full_text_search_string=\"full_text_search_string_example\",\n        include_deleted=False,\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        user_tag_match_mode=\"EXACT\",\n        run_input_tags=[\n            \"run_input_tags_example\",\n        ],\n        run_input_tag_match_mode=\"EXACT\",\n        connector_tags=[\n            \"connector_tags_example\",\n        ],\n        connector_tag_match_mode=\"EXACT\",\n        tech_tags=[\n            \"tech_tags_example\",\n        ],\n        tech_tag_match_mode=\"EXACT\",\n        instrument_run_ids=[\n            \"instrument_run_ids_example\",\n        ],\n    ) # FindProjectSamples |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve project samples.\n        api_response = api_instance.get_project_samples(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve project samples.\n        api_response = api_instance.get_project_samples(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, find_project_samples=find_project_samples)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional] find_project_samples FindProjectSamples [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_7","title":"Return type","text":"<p>ProjectSamplePagedList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The project samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_projects_for_sample","title":"get_projects_for_sample","text":"<p>ProjectList get_projects_for_sample(project_id, sample_id)</p> <p>Retrieve a list of projects for this sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_list import ProjectList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of projects for this sample.\n        api_response = api_instance.get_projects_for_sample(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_projects_for_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_8","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_data_list","title":"get_sample_data_list","text":"<p>DataList get_sample_data_list(project_id, sample_id)</p> <p>Retrieve the list of sample data.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.data_list import DataList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample to retrieve data for\n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of sample data.\n        api_response = api_instance.get_sample_data_list(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_data_list: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of sample data.\n        api_response = api_instance.get_sample_data_list(project_id, sample_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample to retrieve data for full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_9","title":"Return type","text":"<p>DataList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_history","title":"get_sample_history","text":"<p>SampleHistoryList get_sample_history(project_id, sample_id)</p> <p>Retrieve sample history.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.sample_history_list import SampleHistoryList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve sample history.\n        api_response = api_instance.get_sample_history(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_history: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_10","title":"Return type","text":"<p>SampleHistoryList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The sample history is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field","title":"get_sample_metadata_field","text":"<p>Field get_sample_metadata_field(project_id, sample_id, field_id)</p> <p>Retrieve a metadata field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v2/docs/ProjectSampleApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.field import Field\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    field_id = \"fieldId_example\" # str | The ID of the field\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a metadata field.\n        api_response = api_instance.get_sample_metadata_field(project_id, sample_id, field_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v2/docs/ProjectSampleApi/#return-type_11","title":"Return type","text":"<p>Field</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata field is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field_count","title":"get_sample_metadata_field_count","text":"<p>Field get_sample_metadata_field_count(project_id, sample_id, field_id)</p> <p>Retrieves the number of occurrences of a given field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v2/docs/ProjectSampleApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.field import Field\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    field_id = \"fieldId_example\" # str | The ID of the field\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieves the number of occurrences of a given field.\n        api_response = api_instance.get_sample_metadata_field_count(project_id, sample_id, field_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field_count: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v2/docs/ProjectSampleApi/#return-type_12","title":"Return type","text":"<p>Field</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The number of occurrences is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#link_data_to_sample","title":"link_data_to_sample","text":"<p>link_data_to_sample(project_id, sample_id, data_id)</p> <p>Link data to a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    data_id = \"dataId_example\" # str | The ID of the data to link\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to a sample.\n        api_instance.link_data_to_sample(project_id, sample_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_data_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to link"},{"location":"v2/docs/ProjectSampleApi/#return-type_13","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#link_sample_to_project","title":"link_sample_to_project","text":"<p>ProjectSample link_sample_to_project(project_id, sample_id)</p> <p>Link a sample to a project.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a sample to a project.\n        api_response = api_instance.link_sample_to_project(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_sample_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_14","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#mark_sample_deleted","title":"mark_sample_deleted","text":"<p>mark_sample_deleted(project_id, sample_id)</p> <p>Mark a sample deleted.</p> <p>Endpoint for marking a sample as deleted.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Mark a sample deleted.\n        api_instance.mark_sample_deleted(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;mark_sample_deleted: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_15","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully marked as deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#unlink_data_from_sample","title":"unlink_data_from_sample","text":"<p>unlink_data_from_sample(project_id, sample_id, data_id)</p> <p>Unlink data from a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    data_id = \"dataId_example\" # str | The ID of the data to unlink\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from a sample.\n        api_instance.unlink_data_from_sample(project_id, sample_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_data_from_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to unlink"},{"location":"v2/docs/ProjectSampleApi/#return-type_16","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#unlink_sample_from_project","title":"unlink_sample_from_project","text":"<p>unlink_sample_from_project(project_id, sample_id)</p> <p>Unlink a sample from a project.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a sample from a project.\n        api_instance.unlink_sample_from_project(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_sample_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_17","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#update_project_sample","title":"update_project_sample","text":"<p>ProjectSample update_project_sample(project_id, sample_id)</p> <p>Update a project sample.</p> <p>Fields which can be updated: - sample.name - sample.description - sample.status - sample.tags</p>"},{"location":"v2/docs/ProjectSampleApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    project_sample = ProjectSample(\n        sample=Sample(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            tags=SampleTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n                connector_tags=[\n                    \"connector_tags_example\",\n                ],\n                run_in_tags=[\n                    \"run_in_tags_example\",\n                ],\n            ),\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            status=\"DELETED\",\n            metadata_valid=True,\n            metadata=[\n                MetadataField(\n                    id=\"id_example\",\n                    index=1,\n                    name=\"name_example\",\n                    field_type=\"TEXT\",\n                    values=[\n                        \"values_example\",\n                    ],\n                    group_values=[\n                        MetadataField(),\n                    ],\n                ),\n            ],\n            sequencing_runs=[\n                SequencingRun(\n                    id=\"id_example\",\n                    instrument_run_id=\"instrument_run_id_example\",\n                    name=\"name_example\",\n                ),\n            ],\n        ),\n        project_id=\"project_id_example\",\n    ) # ProjectSample |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project sample.\n        api_response = api_instance.update_project_sample(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_project_sample: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project sample.\n        api_response = api_instance.update_project_sample(project_id, sample_id, if_match=if_match, project_sample=project_sample)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] project_sample ProjectSample [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_18","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The sample is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#update_sample_metadata_fields","title":"update_sample_metadata_fields","text":"<p>Sample update_sample_metadata_fields(project_id, sample_id)</p> <p>Update metadata fields.</p> <p>Endpoint for updating metadata fields.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.update_metadata import UpdateMetadata\nfrom libica.openapi.v2.model.sample import Sample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n    update_metadata = UpdateMetadata(\n        update_single_metadata_fields=[\n            UpdateSingleMetadataField(\n                field_id=FieldId(\n                    id=\"id_example\",\n                ),\n                field_name=\"field_name_example\",\n                values=[\n                    \"values_example\",\n                ],\n            ),\n        ],\n        update_metadata_field_groups=[\n            UpdateMetadataFieldGroup(\n                field_id=FieldId(\n                    id=\"id_example\",\n                ),\n                field_name=\"field_name_example\",\n                index=1,\n                update_single_metadata_fields=[\n                    UpdateSingleMetadataField(\n                        field_id=FieldId(\n                            id=\"id_example\",\n                        ),\n                        field_name=\"field_name_example\",\n                        values=[\n                            \"values_example\",\n                        ],\n                    ),\n                ],\n            ),\n        ],\n    ) # UpdateMetadata |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update metadata fields.\n        api_response = api_instance.update_sample_metadata_fields(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_sample_metadata_fields: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update metadata fields.\n        api_response = api_instance.update_sample_metadata_fields(project_id, sample_id, update_metadata=update_metadata)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_sample_metadata_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str update_metadata UpdateMetadata [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_19","title":"Return type","text":"<p>Sample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/","title":"libica.openapi.v2.ProjectSampleBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items."},{"location":"v2/docs/ProjectSampleBatchApi/#create_sample_creation_batch","title":"create_sample_creation_batch","text":"<p>SampleCreationBatch create_sample_creation_batch(project_id)</p> <p>Create a sample creation batch.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.create_sample_creation_batch import CreateSampleCreationBatch\nfrom libica.openapi.v2.model.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. (optional)\n    create_sample_creation_batch = CreateSampleCreationBatch(\n        items=[\n            CreateSampleCreationBatchSampleItem(\n                sample_to_create=CreateSample(\n                    name=\"name_example\",\n                    description=\"description_example\",\n                    tags=OptionalSampleTags(\n                        technical_tags=[\n                            \"technical_tags_example\",\n                        ],\n                        user_tags=[\n                            \"user_tags_example\",\n                        ],\n                        connector_tags=[\n                            \"connector_tags_example\",\n                        ],\n                        run_in_tags=[\n                            \"run_in_tags_example\",\n                        ],\n                    ),\n                ),\n                data_to_link=[\n                    CreateSampleCreationBatchDataItem(\n                        data_id=\"data_id_example\",\n                    ),\n                ],\n                complete_sample=True,\n            ),\n        ],\n    ) # CreateSampleCreationBatch |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a sample creation batch.\n        api_response = api_instance.create_sample_creation_batch(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;create_sample_creation_batch: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a sample creation batch.\n        api_response = api_instance.create_sample_creation_batch(project_id, idempotency_key=idempotency_key, create_sample_creation_batch=create_sample_creation_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;create_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to &lt;a href=\\\"https://tools.ietf.org/id/draft-idempotency-header-01.html\\\"&gt;the IETF spec&lt;/a&gt; and is allowed to be max 255 characters long. If the header is supplied, the response of the request will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing an API request using the Idempotency-Key header, the request has to contain a new value that hasn't been used in the past 7 days for that specific API and by the specific user. [optional] create_sample_creation_batch CreateSampleCreationBatch [optional]"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The sample creation batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch","title":"get_sample_creation_batch","text":"<p>SampleCreationBatch get_sample_creation_batch(project_id, batch_id)</p> <p>Retrieve a sample creation batch.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a sample creation batch.\n        api_response = api_instance.get_sample_creation_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_1","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch_item","title":"get_sample_creation_batch_item","text":"<p>SampleCreationBatchSampleItem get_sample_creation_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a sample creation batch item.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch_sample_item import SampleCreationBatchSampleItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n    item_id = \"itemId_example\" # str | The ID of the sample creation batch item\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a sample creation batch item.\n        api_response = api_instance.get_sample_creation_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch item_id str The ID of the sample creation batch item"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_2","title":"Return type","text":"<p>SampleCreationBatchSampleItem</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch_items","title":"get_sample_creation_batch_items","text":"<p>SampleCreationBatchItemPagedList get_sample_creation_batch_items(project_id, batch_id)</p> <p>Retrieve a list of sample creation batch items.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch_item_paged_list import SampleCreationBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n    status = [\n        \"INITIALIZED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of sample creation batch items.\n        api_response = api_instance.get_sample_creation_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of sample creation batch items.\n        api_response = api_instance.get_sample_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch status [str] The statuses to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\" [optional]"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_3","title":"Return type","text":"<p>SampleCreationBatchItemPagedList</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSamplePagedList/","title":"ProjectSamplePagedList","text":""},{"location":"v2/docs/ProjectSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectTag/","title":"ProjectTag","text":""},{"location":"v2/docs/ProjectTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/RcloneTempCredentials/","title":"RcloneTempCredentials","text":""},{"location":"v2/docs/RcloneTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes config {str: (str,)} The config in key value format. file_path_prefix str The prefix of the file path. storage_type str The type of the object storage. expiration_time str The timestamp when the credentials expire. upload_session_id str, none_type The folder upload session id which can be used after upload to complete the upload session. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceData/","title":"ReferenceData","text":""},{"location":"v2/docs/ReferenceData/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data version str The version of the reference data type_list TypeList tenant_name str, none_type [optional] species Species [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceDataList/","title":"ReferenceDataList","text":""},{"location":"v2/docs/ReferenceDataList/#properties","title":"Properties","text":"Name Type Description Notes items [ReferenceData] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSet/","title":"ReferenceSet","text":""},{"location":"v2/docs/ReferenceSet/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set reference_data_list ReferenceDataList tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetApi/","title":"libica.openapi.v2.ReferenceSetApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set."},{"location":"v2/docs/ReferenceSetApi/#get_reference_sets","title":"get_reference_sets","text":"<p>ReferenceSetList get_reference_sets()</p> <p>Retrieve a list of of reference sets.</p>"},{"location":"v2/docs/ReferenceSetApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import reference_set_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = reference_set_api.ReferenceSetApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of of reference sets.\n        api_response = api_instance.get_reference_sets()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ReferenceSetApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/ReferenceSetApi/#return-type","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/ReferenceSetApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ReferenceSetApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ReferenceSetApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetApi/#get_species","title":"get_species","text":"<p>SpeciesList get_species(reference_set_id)</p> <p>Retrieve a list of species linked to the reference set.</p>"},{"location":"v2/docs/ReferenceSetApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import reference_set_api\nfrom libica.openapi.v2.model.species_list import SpeciesList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = reference_set_api.ReferenceSetApi(api_client)\n    reference_set_id = \"referenceSetId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of species linked to the reference set.\n        api_response = api_instance.get_species(reference_set_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_species: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ReferenceSetApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes reference_set_id str"},{"location":"v2/docs/ReferenceSetApi/#return-type_1","title":"Return type","text":"<p>SpeciesList</p>"},{"location":"v2/docs/ReferenceSetApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ReferenceSetApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ReferenceSetApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of species is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetList/","title":"ReferenceSetList","text":""},{"location":"v2/docs/ReferenceSetList/#properties","title":"Properties","text":"Name Type Description Notes items [ReferenceSet] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Region/","title":"Region","text":""},{"location":"v2/docs/Region/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str country Country city_name str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/RegionApi/","title":"libica.openapi.v2.RegionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned."},{"location":"v2/docs/RegionApi/#get_region","title":"get_region","text":"<p>Region get_region(region_id)</p> <p>Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.</p>"},{"location":"v2/docs/RegionApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import region_api\nfrom libica.openapi.v2.model.region import Region\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = region_api.RegionApi(api_client)\n    region_id = \"regionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.\n        api_response = api_instance.get_region(region_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling RegionApi-&gt;get_region: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/RegionApi/#parameters","title":"Parameters","text":"Name Type Description Notes region_id str"},{"location":"v2/docs/RegionApi/#return-type","title":"Return type","text":"<p>Region</p>"},{"location":"v2/docs/RegionApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/RegionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/RegionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The region is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/RegionApi/#get_regions","title":"get_regions","text":"<p>RegionList get_regions()</p> <p>Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.</p>"},{"location":"v2/docs/RegionApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import region_api\nfrom libica.openapi.v2.model.region_list import RegionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = region_api.RegionApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.\n        api_response = api_instance.get_regions()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling RegionApi-&gt;get_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/RegionApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/RegionApi/#return-type_1","title":"Return type","text":"<p>RegionList</p>"},{"location":"v2/docs/RegionApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/RegionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/RegionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of regions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/RegionList/","title":"RegionList","text":""},{"location":"v2/docs/RegionList/#properties","title":"Properties","text":"Name Type Description Notes items [Region] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Sample/","title":"Sample","text":""},{"location":"v2/docs/Sample/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the sample tags SampleTag region Region status str metadata_valid bool Whether the metadata is valid metadata [MetadataField] The metadata of the sample tenant_name str, none_type [optional] description str, none_type The description of the sample [optional] sequencing_runs [SequencingRun], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleApi/","title":"libica.openapi.v2.SampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_samples GET /api/samples Retrieve a list of samples."},{"location":"v2/docs/SampleApi/#get_samples","title":"get_samples","text":"<p>SamplePagedList get_samples(region)</p> <p>Retrieve a list of samples.</p>"},{"location":"v2/docs/SampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import sample_api\nfrom libica.openapi.v2.model.sample_paged_list import SamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = sample_api.SampleApi(api_client)\n    region = \"region_example\" # str | The ID of the region to filter on. This parameter is required.\n    search = \"search_example\" # str | To search through multiple fields of data. (optional)\n    user_tags = \"userTags_example\" # str | The user tags to filter on. (optional)\n    technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. (optional)\n    sort = \"sort_example\" # str | Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of samples.\n        api_response = api_instance.get_samples(region)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SampleApi-&gt;get_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of samples.\n        api_response = api_instance.get_samples(region, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SampleApi-&gt;get_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/SampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes region str The ID of the region to filter on. This parameter is required. search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str The amount of rows to return. Use in combination with the offset or cursor parameter to get subsequent results. [optional] sort str Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=dateCreated, lastName desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v2/docs/SampleApi/#return-type","title":"Return type","text":"<p>SamplePagedList</p>"},{"location":"v2/docs/SampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/SampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/SampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of samples is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatch/","title":"SampleCreationBatch","text":""},{"location":"v2/docs/SampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemPagedList/","title":"SampleCreationBatchItemPagedList","text":""},{"location":"v2/docs/SampleCreationBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [SampleCreationBatchSampleItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemProcessing/","title":"SampleCreationBatchItemProcessing","text":""},{"location":"v2/docs/SampleCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemRequest/","title":"SampleCreationBatchItemRequest","text":""},{"location":"v2/docs/SampleCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample complete_sample bool Indicates whether the sample must be completed. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchSampleItem/","title":"SampleCreationBatchSampleItem","text":""},{"location":"v2/docs/SampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes id str request SampleCreationBatchItemRequest processing SampleCreationBatchItemProcessing created_sample Sample [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleHistory/","title":"SampleHistory","text":""},{"location":"v2/docs/SampleHistory/#properties","title":"Properties","text":"Name Type Description Notes occurred_at datetime When the change was made source str In which context the change was made text str What was changed user str, none_type The user that made the change [optional] run str, none_type In which execution context the change was made [optional] project str, none_type In which project context the change was made [optional] model int, none_type In which model context the change was made [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleHistoryList/","title":"SampleHistoryList","text":""},{"location":"v2/docs/SampleHistoryList/#properties","title":"Properties","text":"Name Type Description Notes items [SampleHistory] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SamplePagedList/","title":"SamplePagedList","text":""},{"location":"v2/docs/SamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Sample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleTag/","title":"SampleTag","text":""},{"location":"v2/docs/SampleTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] connector_tags [str] run_in_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ScheduleDownload/","title":"ScheduleDownload","text":""},{"location":"v2/docs/ScheduleDownload/#properties","title":"Properties","text":"Name Type Description Notes connector_id str [optional] protocol str [optional]  if omitted the server will use the default value of \"HTTPS\" local_path str [optional] disable_hashing bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/","title":"SearchMatchingActivationCodesForCwlAnalysis","text":""},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input CwlAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/","title":"SearchMatchingActivationCodesForNextflowAnalysis","text":""},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input NextflowAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SequencingRun/","title":"SequencingRun","text":""},{"location":"v2/docs/SequencingRun/#properties","title":"Properties","text":"Name Type Description Notes id str instrument_run_id str name str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Species/","title":"Species","text":""},{"location":"v2/docs/Species/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the species tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SpeciesList/","title":"SpeciesList","text":""},{"location":"v2/docs/SpeciesList/#properties","title":"Properties","text":"Name Type Description Notes items [Species] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageBundle/","title":"StorageBundle","text":""},{"location":"v2/docs/StorageBundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str bundle_name str The name of the storage bundle entitlement_name str The name of the parent entitlement region Region tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageBundleApi/","title":"libica.openapi.v2.StorageBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles."},{"location":"v2/docs/StorageBundleApi/#get_storage_bundles","title":"get_storage_bundles","text":"<p>StorageBundleList get_storage_bundles()</p> <p>Retrieve a list of storage bundles.</p>"},{"location":"v2/docs/StorageBundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_bundle_api\nfrom libica.openapi.v2.model.storage_bundle_list import StorageBundleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_bundle_api.StorageBundleApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage bundles.\n        api_response = api_instance.get_storage_bundles()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageBundleApi-&gt;get_storage_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageBundleApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageBundleApi/#return-type","title":"Return type","text":"<p>StorageBundleList</p>"},{"location":"v2/docs/StorageBundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageBundleList/","title":"StorageBundleList","text":""},{"location":"v2/docs/StorageBundleList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfiguration/","title":"StorageConfiguration","text":""},{"location":"v2/docs/StorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/","title":"libica.openapi.v2.StorageConfigurationApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_configuration POST /api/storageConfigurations Create a new storage configuration get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant."},{"location":"v2/docs/StorageConfigurationApi/#create_storage_configuration","title":"create_storage_configuration","text":"<p>StorageConfiguration create_storage_configuration()</p> <p>Create a new storage configuration</p>"},{"location":"v2/docs/StorageConfigurationApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration import StorageConfiguration\nfrom libica.openapi.v2.model.create_storage_configuration import CreateStorageConfiguration\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    create_storage_configuration = CreateStorageConfiguration(\n        name=\"wwat4ikwowtta-2mh1lcafqw2zhes0\",\n        description=\"description_example\",\n        storage_credential_id=\"storage_credential_id_example\",\n        type=\"AWS_S3\",\n        aws_details=AWSDetails(\n            bucket_name=\"bucket_name_example\",\n            key_prefix=\"jR,rZ#UM/?R,Fp^l6$ARjbhJk C&gt;i H'qT\\{&lt;?'es#)#iK.YM{Rag2/!KB!k@5oXh.:\",\n            server_side_encryption_algorithm=\"server_side_encryption_algorithm_example\",\n            server_side_encryption_key=\"server_side_encryption_key_example\",\n        ),\n        region_id=\"region_id_example\",\n    ) # CreateStorageConfiguration |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a new storage configuration\n        api_response = api_instance.create_storage_configuration(create_storage_configuration=create_storage_configuration)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;create_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_configuration CreateStorageConfiguration [optional]"},{"location":"v2/docs/StorageConfigurationApi/#return-type","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage configuration is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration","title":"get_storage_configuration","text":"<p>StorageConfiguration get_storage_configuration(storage_configuration_id)</p> <p>Retrieve a storage configuration.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration import StorageConfiguration\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage configuration.\n        api_response = api_instance.get_storage_configuration(storage_configuration_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v2/docs/StorageConfigurationApi/#return-type_1","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration_details","title":"get_storage_configuration_details","text":"<p>StorageConfigurationDetails get_storage_configuration_details(storage_configuration_id)</p> <p>Retrieve a storage configuration detail.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration_details import StorageConfigurationDetails\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage configuration detail.\n        api_response = api_instance.get_storage_configuration_details(storage_configuration_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration_details: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v2/docs/StorageConfigurationApi/#return-type_2","title":"Return type","text":"<p>StorageConfigurationDetails</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration detail is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configurations","title":"get_storage_configurations","text":"<p>StorageConfigurationWithDetailsList get_storage_configurations()</p> <p>Retrieve a list of storage configurations.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration_with_details_list import StorageConfigurationWithDetailsList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage configurations.\n        api_response = api_instance.get_storage_configurations()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageConfigurationApi/#return-type_3","title":"Return type","text":"<p>StorageConfigurationWithDetailsList</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage configurations is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#share_storage_configuration","title":"share_storage_configuration","text":"<p>share_storage_configuration(storage_configuration_id)</p> <p>Share your own storage configuration with tenant.</p> <p>Here you share your own storage configuration with all the other users in your tenant.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to share\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Share your own storage configuration with tenant.\n        api_instance.share_storage_configuration(storage_configuration_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;share_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to share"},{"location":"v2/docs/StorageConfigurationApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage configuration is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationDetails/","title":"StorageConfigurationDetails","text":""},{"location":"v2/docs/StorageConfigurationDetails/#properties","title":"Properties","text":"Name Type Description Notes aws_s3 AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationWithDetails/","title":"StorageConfigurationWithDetails","text":""},{"location":"v2/docs/StorageConfigurationWithDetails/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects storage_configuration_details StorageConfigurationDetails type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationWithDetailsList/","title":"StorageConfigurationWithDetailsList","text":""},{"location":"v2/docs/StorageConfigurationWithDetailsList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageConfigurationWithDetails] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredential/","title":"StorageCredential","text":""},{"location":"v2/docs/StorageCredential/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str type str defaults to \"AWS_USER\" tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialList/","title":"StorageCredentialList","text":""},{"location":"v2/docs/StorageCredentialList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageCredential] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/","title":"libica.openapi.v2.StorageCredentialsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_credential POST /api/storageCredentials Create a new storage credential get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets."},{"location":"v2/docs/StorageCredentialsApi/#create_storage_credential","title":"create_storage_credential","text":"<p>StorageCredential create_storage_credential()</p> <p>Create a new storage credential</p>"},{"location":"v2/docs/StorageCredentialsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.create_storage_credential import CreateStorageCredential\nfrom libica.openapi.v2.model.storage_credential import StorageCredential\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    create_storage_credential = CreateStorageCredential(\n        name=\"zBAMDTMv2D2ylmgd10Z3UB\",\n        type=\"AWS_USER\",\n        aws_credentials=AwsCredentials(\n            access_key_id=\"+\",\n            secret_access_key=\"+\",\n        ),\n    ) # CreateStorageCredential |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a new storage credential\n        api_response = api_instance.create_storage_credential(create_storage_credential=create_storage_credential)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;create_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_credential CreateStorageCredential [optional]"},{"location":"v2/docs/StorageCredentialsApi/#return-type","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage credential is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credential","title":"get_storage_credential","text":"<p>StorageCredential get_storage_credential(storage_credential_id)</p> <p>Retrieve a storage credential.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.storage_credential import StorageCredential\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage credential.\n        api_response = api_instance.get_storage_credential(storage_credential_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to retrieve"},{"location":"v2/docs/StorageCredentialsApi/#return-type_1","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage credential is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credentials","title":"get_storage_credentials","text":"<p>StorageCredentialList get_storage_credentials()</p> <p>Retrieve a list of storage credentials.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.storage_credential_list import StorageCredentialList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage credentials.\n        api_response = api_instance.get_storage_credentials()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageCredentialsApi/#return-type_2","title":"Return type","text":"<p>StorageCredentialList</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage credentials is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#share_storage_credential","title":"share_storage_credential","text":"<p>share_storage_credential(storage_credential_id)</p> <p>Share your own storage credentials with tenant.</p> <p>Here you share your own storage credentials with all the other users in your tenant.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to share\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Share your own storage credentials with tenant.\n        api_instance.share_storage_credential(storage_credential_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;share_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to share"},{"location":"v2/docs/StorageCredentialsApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#update_storage_credential_secrets","title":"update_storage_credential_secrets","text":"<p>update_storage_credential_secrets(storage_credential_id)</p> <p>Update a storage credential's secrets.</p> <p>When your storage credentials change or get updated due to security reasons you need to update them here.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.update_storage_credential_secrets import UpdateStorageCredentialSecrets\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | \n    update_storage_credential_secrets = UpdateStorageCredentialSecrets(\n        aws_credentials=AwsCredentials(\n            access_key_id=\"+\",\n            secret_access_key=\"+\",\n        ),\n    ) # UpdateStorageCredentialSecrets |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a storage credential's secrets.\n        api_instance.update_storage_credential_secrets(storage_credential_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;update_storage_credential_secrets: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a storage credential's secrets.\n        api_instance.update_storage_credential_secrets(storage_credential_id, update_storage_credential_secrets=update_storage_credential_secrets)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;update_storage_credential_secrets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_credential_id str update_storage_credential_secrets UpdateStorageCredentialSecrets [optional]"},{"location":"v2/docs/StorageCredentialsApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential secrets are successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/TempCredentials/","title":"TempCredentials","text":""},{"location":"v2/docs/TempCredentials/#properties","title":"Properties","text":"Name Type Description Notes aws_temp_credentials AwsTempCredentials [optional] rclone_temp_credentials RcloneTempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TermsOfUse/","title":"TermsOfUse","text":""},{"location":"v2/docs/TermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Token/","title":"Token","text":""},{"location":"v2/docs/Token/#properties","title":"Properties","text":"Name Type Description Notes token str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TokenApi/","title":"libica.openapi.v2.TokenApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT."},{"location":"v2/docs/TokenApi/#create_jwt_token","title":"create_jwt_token","text":"<p>Token create_jwt_token()</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken.</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken. When using Basic Authentication, and you are member of several tenants, also provide the tenant request parameter to indicate for which tenant you want to authenticate. Note that Basic Authentication will not work for SSO (Single Sign On) enabled authentication.</p>"},{"location":"v2/docs/TokenApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Basic Authentication (BasicAuth):</li> <li>Bearer (psToken) Authentication (PsTokenAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import token_api\nfrom libica.openapi.v2.model.token import Token\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure HTTP basic authorization: BasicAuth\nconfiguration = libica.openapi.v2.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure Bearer authorization (psToken): PsTokenAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = token_api.TokenApi(api_client)\n    tenant = \"tenant_example\" # str, none_type | The name of your tenant in case you have access to multiple tenants. (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Generate a JWT using an API-key, Basic Authentication or a psToken.\n        api_response = api_instance.create_jwt_token(tenant=tenant)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling TokenApi-&gt;create_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/TokenApi/#parameters","title":"Parameters","text":"Name Type Description Notes tenant str, none_type The name of your tenant in case you have access to multiple tenants. [optional]"},{"location":"v2/docs/TokenApi/#return-type","title":"Return type","text":"<p>Token</p>"},{"location":"v2/docs/TokenApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, BasicAuth, PsTokenAuth</p>"},{"location":"v2/docs/TokenApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/TokenApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully generated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/TokenApi/#refresh_jwt_token","title":"refresh_jwt_token","text":"<p>Token refresh_jwt_token()</p> <p>Refresh a JWT using a not yet expired, still valid JWT.</p> <p>When still having a valid JWT, this endpoint can be used to extend the validity.</p>"},{"location":"v2/docs/TokenApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import token_api\nfrom libica.openapi.v2.model.token import Token\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = token_api.TokenApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Refresh a JWT using a not yet expired, still valid JWT.\n        api_response = api_instance.refresh_jwt_token()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling TokenApi-&gt;refresh_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/TokenApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/TokenApi/#return-type_1","title":"Return type","text":"<p>Token</p>"},{"location":"v2/docs/TokenApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth</p>"},{"location":"v2/docs/TokenApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/TokenApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully refreshed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/Type/","title":"Type","text":""},{"location":"v2/docs/Type/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data type tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TypeList/","title":"TypeList","text":""},{"location":"v2/docs/TypeList/#properties","title":"Properties","text":"Name Type Description Notes items [Type] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateMetadata/","title":"UpdateMetadata","text":""},{"location":"v2/docs/UpdateMetadata/#properties","title":"Properties","text":"Name Type Description Notes update_single_metadata_fields [UpdateSingleMetadataField], none_type List of metadata fields to be updated [optional] update_metadata_field_groups [UpdateMetadataFieldGroup], none_type List of metadata field groups to be updated [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateMetadataFieldGroup/","title":"UpdateMetadataFieldGroup","text":"<p>List of metadata field groups to be updated</p>"},{"location":"v2/docs/UpdateMetadataFieldGroup/#properties","title":"Properties","text":"Name Type Description Notes index int Which metadata row index to update update_single_metadata_fields [UpdateSingleMetadataField] List of metadata fields to be updated field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateSingleMetadataField/","title":"UpdateSingleMetadataField","text":"<p>List of metadata fields to be updated</p>"},{"location":"v2/docs/UpdateSingleMetadataField/#properties","title":"Properties","text":"Name Type Description Notes field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] values [str] The updated value(s) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateStorageCredentialSecrets/","title":"UpdateStorageCredentialSecrets","text":""},{"location":"v2/docs/UpdateStorageCredentialSecrets/#properties","title":"Properties","text":"Name Type Description Notes aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Upload/","title":"Upload","text":""},{"location":"v2/docs/Upload/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for uploading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UploadRule/","title":"UploadRule","text":""},{"location":"v2/docs/UploadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project Project tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UploadRuleList/","title":"UploadRuleList","text":""},{"location":"v2/docs/UploadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items [UploadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/User/","title":"User","text":""},{"location":"v2/docs/User/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str username str email str active bool tenant_administrator bool email_verified bool two_factor_authentication bool tenant_name str, none_type [optional] firstname str, none_type [optional] lastname str, none_type [optional] job_title str, none_type [optional] greeting str, none_type [optional] mobile_phone_number str, none_type [optional] phone_number str, none_type [optional] fax_number str, none_type [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UserApi/","title":"libica.openapi.v2.UserApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description approve_user POST /api/users/{userId}:approve Approve a user. assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. get_user GET /api/users/{userId} Retrieve a user. get_users GET /api/users Retrieve a list of users. revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. update_user PUT /api/users/{userId} Update a user."},{"location":"v2/docs/UserApi/#approve_user","title":"approve_user","text":"<p>approve_user(user_id)</p> <p>Approve a user.</p> <p>Endpoint for approving a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Approve a user.\n        api_instance.approve_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;approve_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The user is successfully approved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#assign_tenant_admin_rights_to_user","title":"assign_tenant_admin_rights_to_user","text":"<p>assign_tenant_admin_rights_to_user(user_id)</p> <p>Assign tenant administrator rights to a user.</p> <p>Endpoint for assigning tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Assign tenant administrator rights to a user.\n        api_instance.assign_tenant_admin_rights_to_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;assign_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully assigned. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#get_user","title":"get_user","text":"<p>User get_user(user_id)</p> <p>Retrieve a user.</p>"},{"location":"v2/docs/UserApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user import User\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a user.\n        api_response = api_instance.get_user(user_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;get_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_2","title":"Return type","text":"<p>User</p>"},{"location":"v2/docs/UserApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#get_users","title":"get_users","text":"<p>UserList get_users()</p> <p>Retrieve a list of users.</p>"},{"location":"v2/docs/UserApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user_list import UserList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    email_address = \"emailAddress_example\" # str, none_type | The email address to filter on (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of users.\n        api_response = api_instance.get_users(email_address=email_address)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;get_users: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes email_address str, none_type The email address to filter on [optional]"},{"location":"v2/docs/UserApi/#return-type_3","title":"Return type","text":"<p>UserList</p>"},{"location":"v2/docs/UserApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of users is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#revoke_tenant_admin_rights_to_user","title":"revoke_tenant_admin_rights_to_user","text":"<p>revoke_tenant_admin_rights_to_user(user_id)</p> <p>Revoke tenant administrator rights to a user.</p> <p>Endpoint for revoking tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Revoke tenant administrator rights to a user.\n        api_instance.revoke_tenant_admin_rights_to_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;revoke_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully revoked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#update_user","title":"update_user","text":"<p>User update_user(user_id)</p> <p>Update a user.</p> <p>Fields which can be updated: - greeting - two factor authentication - job title - first name - last name - mobile phone number - phone number - fax number - address lines - postal code - city - country - state</p>"},{"location":"v2/docs/UserApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user import User\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n    user = User(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        username=\"username_example\",\n        email=\"email_example\",\n        firstname=\"firstname_example\",\n        lastname=\"lastname_example\",\n        active=True,\n        tenant_administrator=True,\n        job_title=\"job_title_example\",\n        greeting=\"MR\",\n        mobile_phone_number=\"mobile_phone_number_example\",\n        phone_number=\"phone_number_example\",\n        fax_number=\"fax_number_example\",\n        email_verified=True,\n        two_factor_authentication=True,\n        country=Country(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            name=\"name_example\",\n            region=\"region_example\",\n        ),\n        address_line1=\"address_line1_example\",\n        address_line2=\"address_line2_example\",\n        address_line3=\"address_line3_example\",\n        postal_code=\"postal_code_example\",\n        city=\"city_example\",\n        state=\"state_example\",\n    ) # User |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a user.\n        api_response = api_instance.update_user(user_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;update_user: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a user.\n        api_response = api_instance.update_user(user_id, if_match=if_match, user=user)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;update_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes user_id str if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional] user User [optional]"},{"location":"v2/docs/UserApi/#return-type_5","title":"Return type","text":"<p>User</p>"},{"location":"v2/docs/UserApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserList/","title":"UserList","text":""},{"location":"v2/docs/UserList/#properties","title":"Properties","text":"Name Type Description Notes items [User] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Workflow/","title":"Workflow","text":""},{"location":"v2/docs/Workflow/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow analysis_storage AnalysisStorage language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSession/","title":"WorkflowSession","text":""},{"location":"v2/docs/WorkflowSession/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner_id str tenant_id str user_reference str The user reference of the workflow session workflow Workflow status str The status of the workflow session tags WorkflowSessionTag tenant_name str, none_type [optional] start_date datetime, none_type When the workflow session was started [optional] end_date datetime, none_type When the workflow session was finished [optional] summary str, none_type The summary of the workflow session [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionTag/","title":"WorkflowSessionTag","text":""},{"location":"v2/docs/WorkflowSessionTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type Technical tags [optional] user_tags [str, none_type], none_type User tags [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Workgroup/","title":"Workgroup","text":""},{"location":"v2/docs/Workgroup/#properties","title":"Properties","text":"Name Type Description Notes id str name str description str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupApi/","title":"libica.openapi.v2.WorkgroupApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v2/docs/WorkgroupApi/#get_workgroup","title":"get_workgroup","text":"<p>Workgroup get_workgroup(workgroup_id)</p> <p>Retrieve a workgroup.</p>"},{"location":"v2/docs/WorkgroupApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import workgroup_api\nfrom libica.openapi.v2.model.workgroup import Workgroup\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = workgroup_api.WorkgroupApi(api_client)\n    workgroup_id = \"workgroupId_example\" # str | The ID of the workgroup to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a workgroup.\n        api_response = api_instance.get_workgroup(workgroup_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroup: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/WorkgroupApi/#parameters","title":"Parameters","text":"Name Type Description Notes workgroup_id str The ID of the workgroup to retrieve"},{"location":"v2/docs/WorkgroupApi/#return-type","title":"Return type","text":"<p>Workgroup</p>"},{"location":"v2/docs/WorkgroupApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/WorkgroupApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/WorkgroupApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The workgroup is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupApi/#get_workgroups","title":"get_workgroups","text":"<p>WorkgroupList get_workgroups()</p> <p>Retrieve a list of workgroups.</p>"},{"location":"v2/docs/WorkgroupApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import workgroup_api\nfrom libica.openapi.v2.model.workgroup_list import WorkgroupList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = workgroup_api.WorkgroupApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of workgroups.\n        api_response = api_instance.get_workgroups()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroups: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/WorkgroupApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/WorkgroupApi/#return-type_1","title":"Return type","text":"<p>WorkgroupList</p>"},{"location":"v2/docs/WorkgroupApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/WorkgroupApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/WorkgroupApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of workgroups is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupList/","title":"WorkgroupList","text":""},{"location":"v2/docs/WorkgroupList/#properties","title":"Properties","text":"Name Type Description Notes items [Workgroup] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"}]}